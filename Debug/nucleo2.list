
nucleo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be08  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800bfe8  0800bfe8  0001bfe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c12c  0800c12c  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800c12c  0800c12c  0001c12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c134  0800c134  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c134  0800c134  0001c134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c138  0800c138  0001c138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800c13c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f7c  20000170  0800c2ac  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020ec  0800c2ac  000220ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023795  00000000  00000000  000201e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047c3  00000000  00000000  00043978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b90  00000000  00000000  00048140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000155d  00000000  00000000  00049cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000286c4  00000000  00000000  0004b22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022a0c  00000000  00000000  000738f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4197  00000000  00000000  000962fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007f48  00000000  00000000  0017a494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001823dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000170 	.word	0x20000170
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bfd0 	.word	0x0800bfd0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000174 	.word	0x20000174
 800021c:	0800bfd0 	.word	0x0800bfd0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b970 	b.w	8000f30 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	460d      	mov	r5, r1
 8000c70:	4604      	mov	r4, r0
 8000c72:	460f      	mov	r7, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d14a      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4694      	mov	ip, r2
 8000c7c:	d965      	bls.n	8000d4a <__udivmoddi4+0xe2>
 8000c7e:	fab2 f382 	clz	r3, r2
 8000c82:	b143      	cbz	r3, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c88:	f1c3 0220 	rsb	r2, r3, #32
 8000c8c:	409f      	lsls	r7, r3
 8000c8e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c92:	4317      	orrs	r7, r2
 8000c94:	409c      	lsls	r4, r3
 8000c96:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c9a:	fa1f f58c 	uxth.w	r5, ip
 8000c9e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ca2:	0c22      	lsrs	r2, r4, #16
 8000ca4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ca8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cac:	fb01 f005 	mul.w	r0, r1, r5
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x62>
 8000cb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cbc:	f080 811c 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	f240 8119 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	4462      	add	r2, ip
 8000cca:	1a12      	subs	r2, r2, r0
 8000ccc:	b2a4      	uxth	r4, r4
 8000cce:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cd6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cda:	fb00 f505 	mul.w	r5, r0, r5
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	d90a      	bls.n	8000cf8 <__udivmoddi4+0x90>
 8000ce2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cea:	f080 8107 	bcs.w	8000efc <__udivmoddi4+0x294>
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	f240 8104 	bls.w	8000efc <__udivmoddi4+0x294>
 8000cf4:	4464      	add	r4, ip
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	2100      	movs	r1, #0
 8000d00:	b11e      	cbz	r6, 8000d0a <__udivmoddi4+0xa2>
 8000d02:	40dc      	lsrs	r4, r3
 8000d04:	2300      	movs	r3, #0
 8000d06:	e9c6 4300 	strd	r4, r3, [r6]
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0xbc>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80ed 	beq.w	8000ef2 <__udivmoddi4+0x28a>
 8000d18:	2100      	movs	r1, #0
 8000d1a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	fab3 f183 	clz	r1, r3
 8000d28:	2900      	cmp	r1, #0
 8000d2a:	d149      	bne.n	8000dc0 <__udivmoddi4+0x158>
 8000d2c:	42ab      	cmp	r3, r5
 8000d2e:	d302      	bcc.n	8000d36 <__udivmoddi4+0xce>
 8000d30:	4282      	cmp	r2, r0
 8000d32:	f200 80f8 	bhi.w	8000f26 <__udivmoddi4+0x2be>
 8000d36:	1a84      	subs	r4, r0, r2
 8000d38:	eb65 0203 	sbc.w	r2, r5, r3
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	2e00      	cmp	r6, #0
 8000d42:	d0e2      	beq.n	8000d0a <__udivmoddi4+0xa2>
 8000d44:	e9c6 4700 	strd	r4, r7, [r6]
 8000d48:	e7df      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d4a:	b902      	cbnz	r2, 8000d4e <__udivmoddi4+0xe6>
 8000d4c:	deff      	udf	#255	; 0xff
 8000d4e:	fab2 f382 	clz	r3, r2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f040 8090 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d58:	1a8a      	subs	r2, r1, r2
 8000d5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	2101      	movs	r1, #1
 8000d64:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d68:	fb07 2015 	mls	r0, r7, r5, r2
 8000d6c:	0c22      	lsrs	r2, r4, #16
 8000d6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d72:	fb0e f005 	mul.w	r0, lr, r5
 8000d76:	4290      	cmp	r0, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d7e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4290      	cmp	r0, r2
 8000d86:	f200 80cb 	bhi.w	8000f20 <__udivmoddi4+0x2b8>
 8000d8a:	4645      	mov	r5, r8
 8000d8c:	1a12      	subs	r2, r2, r0
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d94:	fb07 2210 	mls	r2, r7, r0, r2
 8000d98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x14e>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x14c>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2c2>
 8000db4:	4610      	mov	r0, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dbe:	e79f      	b.n	8000d00 <__udivmoddi4+0x98>
 8000dc0:	f1c1 0720 	rsb	r7, r1, #32
 8000dc4:	408b      	lsls	r3, r1
 8000dc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dce:	fa05 f401 	lsl.w	r4, r5, r1
 8000dd2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dd6:	40fd      	lsrs	r5, r7
 8000dd8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ddc:	4323      	orrs	r3, r4
 8000dde:	fbb5 f8f9 	udiv	r8, r5, r9
 8000de2:	fa1f fe8c 	uxth.w	lr, ip
 8000de6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dea:	0c1c      	lsrs	r4, r3, #16
 8000dec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000df0:	fb08 f50e 	mul.w	r5, r8, lr
 8000df4:	42a5      	cmp	r5, r4
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e08:	f080 8088 	bcs.w	8000f1c <__udivmoddi4+0x2b4>
 8000e0c:	42a5      	cmp	r5, r4
 8000e0e:	f240 8085 	bls.w	8000f1c <__udivmoddi4+0x2b4>
 8000e12:	f1a8 0802 	sub.w	r8, r8, #2
 8000e16:	4464      	add	r4, ip
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	b29d      	uxth	r5, r3
 8000e1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e20:	fb09 4413 	mls	r4, r9, r3, r4
 8000e24:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e28:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e38:	d26c      	bcs.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	d96a      	bls.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3e:	3b02      	subs	r3, #2
 8000e40:	4464      	add	r4, ip
 8000e42:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e46:	fba3 9502 	umull	r9, r5, r3, r2
 8000e4a:	eba4 040e 	sub.w	r4, r4, lr
 8000e4e:	42ac      	cmp	r4, r5
 8000e50:	46c8      	mov	r8, r9
 8000e52:	46ae      	mov	lr, r5
 8000e54:	d356      	bcc.n	8000f04 <__udivmoddi4+0x29c>
 8000e56:	d053      	beq.n	8000f00 <__udivmoddi4+0x298>
 8000e58:	b156      	cbz	r6, 8000e70 <__udivmoddi4+0x208>
 8000e5a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e5e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e62:	fa04 f707 	lsl.w	r7, r4, r7
 8000e66:	40ca      	lsrs	r2, r1
 8000e68:	40cc      	lsrs	r4, r1
 8000e6a:	4317      	orrs	r7, r2
 8000e6c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e70:	4618      	mov	r0, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	f1c3 0120 	rsb	r1, r3, #32
 8000e7c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e80:	fa20 f201 	lsr.w	r2, r0, r1
 8000e84:	fa25 f101 	lsr.w	r1, r5, r1
 8000e88:	409d      	lsls	r5, r3
 8000e8a:	432a      	orrs	r2, r5
 8000e8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1510 	mls	r5, r7, r0, r1
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ea2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ea6:	428d      	cmp	r5, r1
 8000ea8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x258>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eb6:	d22f      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eb8:	428d      	cmp	r5, r1
 8000eba:	d92d      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1b49      	subs	r1, r1, r5
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ec8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ecc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ed4:	4291      	cmp	r1, r2
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x282>
 8000ed8:	eb1c 0202 	adds.w	r2, ip, r2
 8000edc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ee0:	d216      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee2:	4291      	cmp	r1, r2
 8000ee4:	d914      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee6:	3d02      	subs	r5, #2
 8000ee8:	4462      	add	r2, ip
 8000eea:	1a52      	subs	r2, r2, r1
 8000eec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ef0:	e738      	b.n	8000d64 <__udivmoddi4+0xfc>
 8000ef2:	4631      	mov	r1, r6
 8000ef4:	4630      	mov	r0, r6
 8000ef6:	e708      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000ef8:	4639      	mov	r1, r7
 8000efa:	e6e6      	b.n	8000cca <__udivmoddi4+0x62>
 8000efc:	4610      	mov	r0, r2
 8000efe:	e6fb      	b.n	8000cf8 <__udivmoddi4+0x90>
 8000f00:	4548      	cmp	r0, r9
 8000f02:	d2a9      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f04:	ebb9 0802 	subs.w	r8, r9, r2
 8000f08:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	e7a3      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f10:	4645      	mov	r5, r8
 8000f12:	e7ea      	b.n	8000eea <__udivmoddi4+0x282>
 8000f14:	462b      	mov	r3, r5
 8000f16:	e794      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f18:	4640      	mov	r0, r8
 8000f1a:	e7d1      	b.n	8000ec0 <__udivmoddi4+0x258>
 8000f1c:	46d0      	mov	r8, sl
 8000f1e:	e77b      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f20:	3d02      	subs	r5, #2
 8000f22:	4462      	add	r2, ip
 8000f24:	e732      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f26:	4608      	mov	r0, r1
 8000f28:	e70a      	b.n	8000d40 <__udivmoddi4+0xd8>
 8000f2a:	4464      	add	r4, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x14e>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <_ZN6BMI160C1EtP13I2C_Callbacks>:
#include <math.h>

#define BMI160_SIGN_EXTEND(val, from) \
    (((val) & (1 << ((from) - 1))) ? (val | (((1 << (1 + (sizeof(val) << 3) - (from))) - 1) << (from))) : val)

BMI160::BMI160(uint16_t i2cAddress, I2C_Callbacks *callbacks) {
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	817b      	strh	r3, [r7, #10]
	this->i2cAddress = i2cAddress;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	897a      	ldrh	r2, [r7, #10]
 8000f46:	801a      	strh	r2, [r3, #0]
	this->callbacks = *callbacks;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4618      	mov	r0, r3
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_ZN6BMI1604initEP13BMI160_Config>:

int BMI160::init(BMI160_Config *config) {
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]

	int opStatus = softReset();
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f861 	bl	8001034 <_ZN6BMI1609softResetEv>
 8000f72:	60f8      	str	r0, [r7, #12]
	if(opStatus != 0) {
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <_ZN6BMI1604initEP13BMI160_Config+0x1c>
		return opStatus;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	e044      	b.n	8001008 <_ZN6BMI1604initEP13BMI160_Config+0xa6>
	}

	callbacks.delayMs(2);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	2002      	movs	r0, #2
 8000f84:	4798      	blx	r3

	if(checkSensorID() == 0) { return -1; }
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f8b8 	bl	80010fc <_ZN6BMI16013checkSensorIDEv>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bf0c      	ite	eq
 8000f92:	2301      	moveq	r3, #1
 8000f94:	2300      	movne	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <_ZN6BMI1604initEP13BMI160_Config+0x40>
 8000f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa0:	e032      	b.n	8001008 <_ZN6BMI1604initEP13BMI160_Config+0xa6>

	powerUpAccelerometer();
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f854 	bl	8001050 <_ZN6BMI16020powerUpAccelerometerEv>
	setFullScaleAccelRange(config->accelRange);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 fb17 	bl	80015e2 <_ZN6BMI16022setFullScaleAccelRangeE16BMI160AccelRange>
	setAccelRate(config->accelRate);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 fac2 	bl	8001544 <_ZN6BMI16012setAccelRateE15BMI160AccelRate>
	setAccelDLPFMode(config->accelmode);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	789b      	ldrb	r3, [r3, #2]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 fae2 	bl	8001590 <_ZN6BMI16016setAccelDLPFModeE14BMI160DLPFMode>
	setAccelOffsetEnabled(1);
 8000fcc:	2101      	movs	r1, #1
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 fb1d 	bl	800160e <_ZN6BMI16021setAccelOffsetEnabledEh>

	powerUpGyroscope();
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 f866 	bl	80010a6 <_ZN6BMI16016powerUpGyroscopeEv>
	setFullScaleGyroRange(config->gyroRange);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	78db      	ldrb	r3, [r3, #3]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 fae8 	bl	80015b6 <_ZN6BMI16021setFullScaleGyroRangeE15BMI160GyroRange>
	setGyroRate(config->gyroRate);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	791b      	ldrb	r3, [r3, #4]
 8000fea:	4619      	mov	r1, r3
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 fa96 	bl	800151e <_ZN6BMI16011setGyroRateE14BMI160GyroRate>
	setGyroDLPFMode(config->gyroMode);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	795b      	ldrb	r3, [r3, #5]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 fab6 	bl	800156a <_ZN6BMI16015setGyroDLPFModeE14BMI160DLPFMode>
	setGyroOffsetEnabled(1);
 8000ffe:	2101      	movs	r1, #1
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 fb1c 	bl	800163e <_ZN6BMI16020setGyroOffsetEnabledEh>

	return 0;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_ZN6BMI16010readChipIDEv>:

uint8_t BMI160::readChipID(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	uint8_t readData = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
	readRegister(BMI160_RA_CHIP_ID, 1, &readData);
 800101c:	f107 030f 	add.w	r3, r7, #15
 8001020:	2201      	movs	r2, #1
 8001022:	2100      	movs	r1, #0
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 fbb1 	bl	800178c <_ZN6BMI16012readRegisterEhhPh>
	return readData;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_ZN6BMI1609softResetEv>:

int BMI160::softReset(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	return writeRegister(BMI160_RA_CMD, BMI160_CMD_SOFT_RESET);
 800103c:	22b6      	movs	r2, #182	; 0xb6
 800103e:	217e      	movs	r1, #126	; 0x7e
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 fb88 	bl	8001756 <_ZN6BMI16013writeRegisterEhh>
 8001046:	4603      	mov	r3, r0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_ZN6BMI16020powerUpAccelerometerEv>:

int BMI160::powerUpAccelerometer(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

	int opStatus = writeRegister(BMI160_RA_CMD, BMI160_CMD_ACC_MODE_NORMAL);
 8001058:	2211      	movs	r2, #17
 800105a:	217e      	movs	r1, #126	; 0x7e
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 fb7a 	bl	8001756 <_ZN6BMI16013writeRegisterEhh>
 8001062:	60f8      	str	r0, [r7, #12]
	if(opStatus != 0) {
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <_ZN6BMI16020powerUpAccelerometerEv+0x1e>
		return opStatus;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	e017      	b.n	800109e <_ZN6BMI16020powerUpAccelerometerEv+0x4e>
	}

	callbacks.delayMs(1);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2001      	movs	r0, #1
 8001074:	4798      	blx	r3
	while (0x1 != readRegBits(BMI160_RA_PMU_STATUS, BMI160_ACC_PMU_STATUS_BIT, BMI160_ACC_PMU_STATUS_LEN)) {
 8001076:	e003      	b.n	8001080 <_ZN6BMI16020powerUpAccelerometerEv+0x30>
		callbacks.delayMs(1);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2001      	movs	r0, #1
 800107e:	4798      	blx	r3
	while (0x1 != readRegBits(BMI160_RA_PMU_STATUS, BMI160_ACC_PMU_STATUS_BIT, BMI160_ACC_PMU_STATUS_LEN)) {
 8001080:	2302      	movs	r3, #2
 8001082:	2204      	movs	r2, #4
 8001084:	2103      	movs	r1, #3
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 fb36 	bl	80016f8 <_ZN6BMI16011readRegBitsEhjj>
 800108c:	4603      	mov	r3, r0
 800108e:	2b01      	cmp	r3, #1
 8001090:	bf14      	ite	ne
 8001092:	2301      	movne	r3, #1
 8001094:	2300      	moveq	r3, #0
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1ed      	bne.n	8001078 <_ZN6BMI16020powerUpAccelerometerEv+0x28>
	}

	return 0;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <_ZN6BMI16016powerUpGyroscopeEv>:

int BMI160::powerUpGyroscope(void) {
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]

	int opStatus = writeRegister(BMI160_RA_CMD, BMI160_CMD_GYR_MODE_NORMAL);
 80010ae:	2215      	movs	r2, #21
 80010b0:	217e      	movs	r1, #126	; 0x7e
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fb4f 	bl	8001756 <_ZN6BMI16013writeRegisterEhh>
 80010b8:	60f8      	str	r0, [r7, #12]
	if(opStatus != 0) {
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <_ZN6BMI16016powerUpGyroscopeEv+0x1e>
		return opStatus;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	e017      	b.n	80010f4 <_ZN6BMI16016powerUpGyroscopeEv+0x4e>
	}

	callbacks.delayMs(1);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	2001      	movs	r0, #1
 80010ca:	4798      	blx	r3
	while (0x1 != readRegBits(BMI160_RA_PMU_STATUS, BMI160_GYR_PMU_STATUS_BIT, BMI160_GYR_PMU_STATUS_LEN)) {
 80010cc:	e003      	b.n	80010d6 <_ZN6BMI16016powerUpGyroscopeEv+0x30>
		callbacks.delayMs(1);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2001      	movs	r0, #1
 80010d4:	4798      	blx	r3
	while (0x1 != readRegBits(BMI160_RA_PMU_STATUS, BMI160_GYR_PMU_STATUS_BIT, BMI160_GYR_PMU_STATUS_LEN)) {
 80010d6:	2302      	movs	r3, #2
 80010d8:	2202      	movs	r2, #2
 80010da:	2103      	movs	r1, #3
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 fb0b 	bl	80016f8 <_ZN6BMI16011readRegBitsEhjj>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	bf14      	ite	ne
 80010e8:	2301      	movne	r3, #1
 80010ea:	2300      	moveq	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1ed      	bne.n	80010ce <_ZN6BMI16016powerUpGyroscopeEv+0x28>
	}

	return 0;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <_ZN6BMI16013checkSensorIDEv>:

uint8_t BMI160::checkSensorID(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

	uint8_t readedChipId = readChipID();
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff83 	bl	8001010 <_ZN6BMI16010readChipIDEv>
 800110a:	4603      	mov	r3, r0
 800110c:	73fb      	strb	r3, [r7, #15]
	if(readedChipId == SENSOR_CHIP_ID_BMI160) {
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	2bd0      	cmp	r3, #208	; 0xd0
 8001112:	d101      	bne.n	8001118 <_ZN6BMI16013checkSensorIDEv+0x1c>
		return 1;
 8001114:	2301      	movs	r3, #1
 8001116:	e00a      	b.n	800112e <_ZN6BMI16013checkSensorIDEv+0x32>
	}
	else if(readedChipId == SENSOR_CHIP_ID_BMI160_C2) {
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2bd1      	cmp	r3, #209	; 0xd1
 800111c:	d101      	bne.n	8001122 <_ZN6BMI16013checkSensorIDEv+0x26>
		return 2;
 800111e:	2302      	movs	r3, #2
 8001120:	e005      	b.n	800112e <_ZN6BMI16013checkSensorIDEv+0x32>
	}
	else if(readedChipId == SENSOR_CHIP_ID_BMI160_C3) {
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2bd3      	cmp	r3, #211	; 0xd3
 8001126:	d101      	bne.n	800112c <_ZN6BMI16013checkSensorIDEv+0x30>
		return 3;
 8001128:	2303      	movs	r3, #3
 800112a:	e000      	b.n	800112e <_ZN6BMI16013checkSensorIDEv+0x32>
	}

	return 0;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_ZN6BMI1608readGyroEPsS0_S0_>:

int BMI160::readGyro(int16_t* x, int16_t* y, int16_t* z) {
 8001136:	b580      	push	{r7, lr}
 8001138:	b088      	sub	sp, #32
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	603b      	str	r3, [r7, #0]
    uint8_t buffer[6];

    buffer[0] = BMI160_RA_GYRO_X_L;
 8001144:	230c      	movs	r3, #12
 8001146:	753b      	strb	r3, [r7, #20]

    int opStat = readRegister(BMI160_RA_GYRO_X_L, 6, &buffer[0]);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2206      	movs	r2, #6
 800114e:	210c      	movs	r1, #12
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f000 fb1b 	bl	800178c <_ZN6BMI16012readRegisterEhhPh>
 8001156:	61f8      	str	r0, [r7, #28]

    *x = (((int16_t)buffer[1]) << 8) | buffer[0];
 8001158:	7d7b      	ldrb	r3, [r7, #21]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	7d3b      	ldrb	r3, [r7, #20]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21a      	sxth	r2, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[3]) << 8) | buffer[2];
 800116a:	7dfb      	ldrb	r3, [r7, #23]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	7dbb      	ldrb	r3, [r7, #22]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21a      	sxth	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[5]) << 8) | buffer[4];
 800117c:	7e7b      	ldrb	r3, [r7, #25]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	7e3b      	ldrb	r3, [r7, #24]
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b21a      	sxth	r2, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	801a      	strh	r2, [r3, #0]

    return opStat;
 800118e:	69fb      	ldr	r3, [r7, #28]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <_ZN6BMI16022getAccelerometerAnglesEv>:
    }

    return result;
}

AnglePeachData BMI160::getAccelerometerAngles() {
 8001198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119a:	b08b      	sub	sp, #44	; 0x2c
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
	AnglePeachData result = {};
 80011a0:	f107 0318 	add.w	r3, r7, #24
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]

	int16_t x, y, z = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	827b      	strh	r3, [r7, #18]
	readAccelerometer(&x, &y, &z);
 80011ae:	f107 0312 	add.w	r3, r7, #18
 80011b2:	f107 0214 	add.w	r2, r7, #20
 80011b6:	f107 0116 	add.w	r1, r7, #22
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f000 f97c 	bl	80014b8 <_ZN6BMI16017readAccelerometerEPsS0_S0_>

	result.AngleRoll = atan2(y, sqrt((int32_t)x*x + (int32_t)z*z)) * 57.288;
 80011c0:	f9b7 6014 	ldrsh.w	r6, [r7, #20]
 80011c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011cc:	fb03 f202 	mul.w	r2, r3, r2
 80011d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011d4:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80011d8:	fb01 f303 	mul.w	r3, r1, r3
 80011dc:	4413      	add	r3, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 faf6 	bl	80017d0 <_ZSt4sqrtIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80011e4:	eeb0 7a40 	vmov.f32	s14, s0
 80011e8:	eef0 7a60 	vmov.f32	s15, s1
 80011ec:	eeb0 0a47 	vmov.f32	s0, s14
 80011f0:	eef0 0a67 	vmov.f32	s1, s15
 80011f4:	4630      	mov	r0, r6
 80011f6:	f000 fb03 	bl	8001800 <_ZSt5atan2IsdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011fa:	ec51 0b10 	vmov	r0, r1, d0
 80011fe:	a32a      	add	r3, pc, #168	; (adr r3, 80012a8 <_ZN6BMI16022getAccelerometerAnglesEv+0x110>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff fa18 	bl	8000638 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fcc2 	bl	8000b98 <__aeabi_d2f>
 8001214:	4603      	mov	r3, r0
 8001216:	61bb      	str	r3, [r7, #24]
	result.AnglePitch = -1 * atan2(x, sqrt((int32_t)y*y+ (int32_t)z*z)) * 57.288;
 8001218:	f9b7 6016 	ldrsh.w	r6, [r7, #22]
 800121c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001220:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001224:	fb03 f202 	mul.w	r2, r3, r2
 8001228:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800122c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001230:	fb01 f303 	mul.w	r3, r1, r3
 8001234:	4413      	add	r3, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f000 faca 	bl	80017d0 <_ZSt4sqrtIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800123c:	eeb0 7a40 	vmov.f32	s14, s0
 8001240:	eef0 7a60 	vmov.f32	s15, s1
 8001244:	eeb0 0a47 	vmov.f32	s0, s14
 8001248:	eef0 0a67 	vmov.f32	s1, s15
 800124c:	4630      	mov	r0, r6
 800124e:	f000 fad7 	bl	8001800 <_ZSt5atan2IsdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001252:	ec53 2b10 	vmov	r2, r3, d0
 8001256:	4614      	mov	r4, r2
 8001258:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800125c:	a312      	add	r3, pc, #72	; (adr r3, 80012a8 <_ZN6BMI16022getAccelerometerAnglesEv+0x110>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff f9e7 	bl	8000638 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fc91 	bl	8000b98 <__aeabi_d2f>
 8001276:	4603      	mov	r3, r0
 8001278:	61fb      	str	r3, [r7, #28]

	return result;
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	f107 0218 	add.w	r2, r7, #24
 8001282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001286:	e883 0003 	stmia.w	r3, {r0, r1}
 800128a:	6a3a      	ldr	r2, [r7, #32]
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	ee07 2a10 	vmov	s14, r2
 8001292:	ee07 3a90 	vmov	s15, r3
}
 8001296:	eeb0 0a47 	vmov.f32	s0, s14
 800129a:	eef0 0a67 	vmov.f32	s1, s15
 800129e:	372c      	adds	r7, #44	; 0x2c
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a4:	f3af 8000 	nop.w
 80012a8:	2f1a9fbe 	.word	0x2f1a9fbe
 80012ac:	404ca4dd 	.word	0x404ca4dd

080012b0 <_ZN6BMI16014scaledGyroDataEv>:

GyroAccelData BMI160::scaledGyroData() {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	; 0x38
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6178      	str	r0, [r7, #20]
	GyroAccelData result = {};
 80012b8:	f107 0320 	add.w	r3, r7, #32
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]

	int16_t x, y, z = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	837b      	strh	r3, [r7, #26]
	readGyro(&x, &y, &z);
 80012c8:	f107 031a 	add.w	r3, r7, #26
 80012cc:	f107 021c 	add.w	r2, r7, #28
 80012d0:	f107 011e 	add.w	r1, r7, #30
 80012d4:	6978      	ldr	r0, [r7, #20]
 80012d6:	f7ff ff2e 	bl	8001136 <_ZN6BMI1608readGyroEPsS0_S0_>

    if(gyroRange == BMI160_GYRO_RANGE_2000) {
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	7c1b      	ldrb	r3, [r3, #16]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d124      	bne.n	800132c <_ZN6BMI16014scaledGyroDataEv+0x7c>
    	result.x = (x / SENS_2000_DPS_LSB_PER_DPS);
 80012e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ee:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80014a4 <_ZN6BMI16014scaledGyroDataEv+0x1f4>
 80012f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f6:	edc7 7a08 	vstr	s15, [r7, #32]
    	result.y = (y / SENS_2000_DPS_LSB_PER_DPS);
 80012fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001306:	eddf 6a67 	vldr	s13, [pc, #412]	; 80014a4 <_ZN6BMI16014scaledGyroDataEv+0x1f4>
 800130a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    	result.z = (z / SENS_2000_DPS_LSB_PER_DPS);
 8001312:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001316:	ee07 3a90 	vmov	s15, r3
 800131a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131e:	eddf 6a61 	vldr	s13, [pc, #388]	; 80014a4 <_ZN6BMI16014scaledGyroDataEv+0x1f4>
 8001322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001326:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800132a:	e0a2      	b.n	8001472 <_ZN6BMI16014scaledGyroDataEv+0x1c2>
    }
    else if(gyroRange == BMI160_GYRO_RANGE_1000) {
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	7c1b      	ldrb	r3, [r3, #16]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d124      	bne.n	800137e <_ZN6BMI16014scaledGyroDataEv+0xce>
    	result.x = (x / SENS_1000_DPS_LSB_PER_DPS);
 8001334:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001340:	eddf 6a59 	vldr	s13, [pc, #356]	; 80014a8 <_ZN6BMI16014scaledGyroDataEv+0x1f8>
 8001344:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001348:	edc7 7a08 	vstr	s15, [r7, #32]
    	result.y = (y / SENS_1000_DPS_LSB_PER_DPS);
 800134c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001358:	eddf 6a53 	vldr	s13, [pc, #332]	; 80014a8 <_ZN6BMI16014scaledGyroDataEv+0x1f8>
 800135c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001360:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    	result.z = (z / SENS_1000_DPS_LSB_PER_DPS);
 8001364:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001368:	ee07 3a90 	vmov	s15, r3
 800136c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001370:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80014a8 <_ZN6BMI16014scaledGyroDataEv+0x1f8>
 8001374:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001378:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800137c:	e079      	b.n	8001472 <_ZN6BMI16014scaledGyroDataEv+0x1c2>
    }
    else if(gyroRange == BMI160_GYRO_RANGE_500) {
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	7c1b      	ldrb	r3, [r3, #16]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d124      	bne.n	80013d0 <_ZN6BMI16014scaledGyroDataEv+0x120>
    	result.x = (x / SENS_500_DPS_LSB_PER_DPS);
 8001386:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800138a:	ee07 3a90 	vmov	s15, r3
 800138e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001392:	eddf 6a46 	vldr	s13, [pc, #280]	; 80014ac <_ZN6BMI16014scaledGyroDataEv+0x1fc>
 8001396:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800139a:	edc7 7a08 	vstr	s15, [r7, #32]
    	result.y = (y / SENS_500_DPS_LSB_PER_DPS);
 800139e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013aa:	eddf 6a40 	vldr	s13, [pc, #256]	; 80014ac <_ZN6BMI16014scaledGyroDataEv+0x1fc>
 80013ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    	result.z = (z / SENS_500_DPS_LSB_PER_DPS);
 80013b6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80014ac <_ZN6BMI16014scaledGyroDataEv+0x1fc>
 80013c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ca:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80013ce:	e050      	b.n	8001472 <_ZN6BMI16014scaledGyroDataEv+0x1c2>
    }
    else if(gyroRange == BMI160_GYRO_RANGE_250) {
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	7c1b      	ldrb	r3, [r3, #16]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d124      	bne.n	8001422 <_ZN6BMI16014scaledGyroDataEv+0x172>
    	result.x = (x / SENS_250_DPS_LSB_PER_DPS);
 80013d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e4:	eddf 6a32 	vldr	s13, [pc, #200]	; 80014b0 <_ZN6BMI16014scaledGyroDataEv+0x200>
 80013e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ec:	edc7 7a08 	vstr	s15, [r7, #32]
    	result.y = (y / SENS_250_DPS_LSB_PER_DPS);
 80013f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013fc:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80014b0 <_ZN6BMI16014scaledGyroDataEv+0x200>
 8001400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001404:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    	result.z = (z / SENS_250_DPS_LSB_PER_DPS);
 8001408:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800140c:	ee07 3a90 	vmov	s15, r3
 8001410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001414:	eddf 6a26 	vldr	s13, [pc, #152]	; 80014b0 <_ZN6BMI16014scaledGyroDataEv+0x200>
 8001418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800141c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001420:	e027      	b.n	8001472 <_ZN6BMI16014scaledGyroDataEv+0x1c2>
    }
    else if(gyroRange == BMI160_GYRO_RANGE_125) {
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	7c1b      	ldrb	r3, [r3, #16]
 8001426:	2b04      	cmp	r3, #4
 8001428:	d123      	bne.n	8001472 <_ZN6BMI16014scaledGyroDataEv+0x1c2>
    	result.x = (x / SENS_125_DPS_LSB_PER_DPS);
 800142a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800142e:	ee07 3a90 	vmov	s15, r3
 8001432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001436:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80014b4 <_ZN6BMI16014scaledGyroDataEv+0x204>
 800143a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800143e:	edc7 7a08 	vstr	s15, [r7, #32]
    	result.y = (y / SENS_125_DPS_LSB_PER_DPS);
 8001442:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800144e:	eddf 6a19 	vldr	s13, [pc, #100]	; 80014b4 <_ZN6BMI16014scaledGyroDataEv+0x204>
 8001452:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001456:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    	result.z = (z / SENS_125_DPS_LSB_PER_DPS);
 800145a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001466:	eddf 6a13 	vldr	s13, [pc, #76]	; 80014b4 <_ZN6BMI16014scaledGyroDataEv+0x204>
 800146a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800146e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }

    return result;
 8001472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001476:	f107 0220 	add.w	r2, r7, #32
 800147a:	ca07      	ldmia	r2, {r0, r1, r2}
 800147c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001480:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001486:	ee06 1a90 	vmov	s13, r1
 800148a:	ee07 2a10 	vmov	s14, r2
 800148e:	ee07 3a90 	vmov	s15, r3
}
 8001492:	eeb0 0a66 	vmov.f32	s0, s13
 8001496:	eef0 0a47 	vmov.f32	s1, s14
 800149a:	eeb0 1a67 	vmov.f32	s2, s15
 800149e:	3738      	adds	r7, #56	; 0x38
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	41833333 	.word	0x41833333
 80014a8:	42033333 	.word	0x42033333
 80014ac:	42833333 	.word	0x42833333
 80014b0:	43033333 	.word	0x43033333
 80014b4:	43833333 	.word	0x43833333

080014b8 <_ZN6BMI16017readAccelerometerEPsS0_S0_>:
    else { convertTemp = ((tempRaw/512.0F) + 23.0F); }

    return convertTemp;
}

int BMI160::readAccelerometer(int16_t* x, int16_t* y, int16_t* z) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]

    uint8_t buffer[6] = {0x00};
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	2300      	movs	r3, #0
 80014cc:	833b      	strh	r3, [r7, #24]
    int opStat = readRegister(BMI160_RA_ACCEL_X_L, 6, &buffer[0]);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	2206      	movs	r2, #6
 80014d4:	2112      	movs	r1, #18
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 f958 	bl	800178c <_ZN6BMI16012readRegisterEhhPh>
 80014dc:	61f8      	str	r0, [r7, #28]

    *x = (((int16_t)buffer[1]) << 8) | buffer[0];
 80014de:	7d7b      	ldrb	r3, [r7, #21]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	7d3b      	ldrb	r3, [r7, #20]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	801a      	strh	r2, [r3, #0]
    *y = (((int16_t)buffer[3]) << 8) | buffer[2];
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	7dbb      	ldrb	r3, [r7, #22]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	801a      	strh	r2, [r3, #0]
    *z = (((int16_t)buffer[5]) << 8) | buffer[4];
 8001502:	7e7b      	ldrb	r3, [r7, #25]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b21a      	sxth	r2, r3
 8001508:	7e3b      	ldrb	r3, [r7, #24]
 800150a:	b21b      	sxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b21a      	sxth	r2, r3
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	801a      	strh	r2, [r3, #0]

    return opStat;
 8001514:	69fb      	ldr	r3, [r7, #28]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3720      	adds	r7, #32
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_ZN6BMI16011setGyroRateE14BMI160GyroRate>:

BMI160GyroRate BMI160::getGyroRate(void) {
	return (BMI160GyroRate)readRegBits(BMI160_RA_GYRO_CONF, BMI160_GYRO_RATE_SEL_BIT, BMI160_GYRO_RATE_SEL_LEN);
}

int BMI160::setGyroRate(const BMI160GyroRate rate) {
 800151e:	b580      	push	{r7, lr}
 8001520:	b084      	sub	sp, #16
 8001522:	af02      	add	r7, sp, #8
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	70fb      	strb	r3, [r7, #3]
	return writeRegisterBits(BMI160_RA_GYRO_CONF, (uint8_t)rate, BMI160_GYRO_RATE_SEL_BIT, BMI160_GYRO_RATE_SEL_LEN);
 800152a:	78fa      	ldrb	r2, [r7, #3]
 800152c:	2304      	movs	r3, #4
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2300      	movs	r3, #0
 8001532:	2142      	movs	r1, #66	; 0x42
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f89a 	bl	800166e <_ZN6BMI16017writeRegisterBitsEhhjj>
 800153a:	4603      	mov	r3, r0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_ZN6BMI16012setAccelRateE15BMI160AccelRate>:

BMI160AccelRate BMI160::getAccelRate(void) {
	return (BMI160AccelRate)readRegBits(BMI160_RA_ACCEL_CONF, BMI160_ACCEL_RATE_SEL_BIT, BMI160_ACCEL_RATE_SEL_LEN);
}

int BMI160::setAccelRate(const BMI160AccelRate rate) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af02      	add	r7, sp, #8
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	70fb      	strb	r3, [r7, #3]
	return writeRegisterBits(BMI160_RA_ACCEL_CONF, (uint8_t)rate, BMI160_ACCEL_RATE_SEL_BIT, BMI160_ACCEL_RATE_SEL_LEN);
 8001550:	78fa      	ldrb	r2, [r7, #3]
 8001552:	2304      	movs	r3, #4
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2300      	movs	r3, #0
 8001558:	2140      	movs	r1, #64	; 0x40
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f887 	bl	800166e <_ZN6BMI16017writeRegisterBitsEhhjj>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <_ZN6BMI16015setGyroDLPFModeE14BMI160DLPFMode>:

BMI160DLPFMode BMI160::getGyroDLPFMode(void) {
    return (BMI160DLPFMode)readRegBits(BMI160_RA_GYRO_CONF, BMI160_GYRO_DLPF_SEL_BIT, BMI160_GYRO_DLPF_SEL_LEN);
}

int BMI160::setGyroDLPFMode(BMI160DLPFMode mode) {
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af02      	add	r7, sp, #8
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	70fb      	strb	r3, [r7, #3]
	return writeRegisterBits(BMI160_RA_GYRO_CONF, mode, BMI160_GYRO_DLPF_SEL_BIT, BMI160_GYRO_DLPF_SEL_LEN);
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	2302      	movs	r3, #2
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2304      	movs	r3, #4
 800157e:	2142      	movs	r1, #66	; 0x42
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f874 	bl	800166e <_ZN6BMI16017writeRegisterBitsEhhjj>
 8001586:	4603      	mov	r3, r0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_ZN6BMI16016setAccelDLPFModeE14BMI160DLPFMode>:

BMI160DLPFMode BMI160::getAccelDLPFMode(void) {
    return (BMI160DLPFMode)readRegBits(BMI160_RA_ACCEL_CONF, BMI160_ACCEL_DLPF_SEL_BIT, BMI160_ACCEL_DLPF_SEL_LEN);
}

int BMI160::setAccelDLPFMode(BMI160DLPFMode mode) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af02      	add	r7, sp, #8
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	70fb      	strb	r3, [r7, #3]
    return writeRegisterBits(BMI160_RA_ACCEL_CONF, mode, BMI160_ACCEL_DLPF_SEL_BIT, BMI160_ACCEL_DLPF_SEL_LEN);
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	2303      	movs	r3, #3
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2304      	movs	r3, #4
 80015a4:	2140      	movs	r1, #64	; 0x40
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f861 	bl	800166e <_ZN6BMI16017writeRegisterBitsEhhjj>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <_ZN6BMI16021setFullScaleGyroRangeE15BMI160GyroRange>:

BMI160GyroRange BMI160::getFullScaleGyroRange(void) {
	return (BMI160GyroRange)readRegBits(BMI160_RA_GYRO_RANGE, BMI160_GYRO_RANGE_SEL_BIT, BMI160_GYRO_RANGE_SEL_LEN);
}

int BMI160::setFullScaleGyroRange(const BMI160GyroRange range) {
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af02      	add	r7, sp, #8
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	70fb      	strb	r3, [r7, #3]
	gyroRange = range;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	78fa      	ldrb	r2, [r7, #3]
 80015c6:	741a      	strb	r2, [r3, #16]
    return writeRegisterBits(BMI160_RA_GYRO_RANGE, (uint8_t)range, BMI160_GYRO_RANGE_SEL_BIT, BMI160_GYRO_RANGE_SEL_LEN);
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	2303      	movs	r3, #3
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2300      	movs	r3, #0
 80015d0:	2143      	movs	r1, #67	; 0x43
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f84b 	bl	800166e <_ZN6BMI16017writeRegisterBitsEhhjj>
 80015d8:	4603      	mov	r3, r0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_ZN6BMI16022setFullScaleAccelRangeE16BMI160AccelRange>:

BMI160AccelRange BMI160::getFullScaleAccelRange(void) {
	return (BMI160AccelRange)readRegBits(BMI160_RA_ACCEL_RANGE, BMI160_ACCEL_RANGE_SEL_BIT, BMI160_ACCEL_RANGE_SEL_LEN);
}

int BMI160::setFullScaleAccelRange(const BMI160AccelRange range) {
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af02      	add	r7, sp, #8
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	460b      	mov	r3, r1
 80015ec:	70fb      	strb	r3, [r7, #3]
	accelRange = range;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	745a      	strb	r2, [r3, #17]
	return writeRegisterBits(BMI160_RA_ACCEL_RANGE, (uint8_t)range, BMI160_ACCEL_RANGE_SEL_BIT, BMI160_ACCEL_RANGE_SEL_LEN);
 80015f4:	78fa      	ldrb	r2, [r7, #3]
 80015f6:	2304      	movs	r3, #4
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	2300      	movs	r3, #0
 80015fc:	2141      	movs	r1, #65	; 0x41
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f835 	bl	800166e <_ZN6BMI16017writeRegisterBitsEhhjj>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_ZN6BMI16021setAccelOffsetEnabledEh>:

uint8_t BMI160::getAccelOffsetEnabled(void) {
    return !!(readRegBits(BMI160_RA_OFFSET_6, BMI160_ACC_OFFSET_EN, 1));
}

int BMI160::setAccelOffsetEnabled(const uint8_t enabled) {
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af02      	add	r7, sp, #8
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	70fb      	strb	r3, [r7, #3]
	return writeRegisterBits(BMI160_RA_OFFSET_6, enabled ? 0x1 : 0, BMI160_ACC_OFFSET_EN, 1);
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <_ZN6BMI16021setAccelOffsetEnabledEh+0x16>
 8001620:	2201      	movs	r2, #1
 8001622:	e000      	b.n	8001626 <_ZN6BMI16021setAccelOffsetEnabledEh+0x18>
 8001624:	2200      	movs	r2, #0
 8001626:	2301      	movs	r3, #1
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2306      	movs	r3, #6
 800162c:	2177      	movs	r1, #119	; 0x77
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f81d 	bl	800166e <_ZN6BMI16017writeRegisterBitsEhhjj>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_ZN6BMI16020setGyroOffsetEnabledEh>:

uint8_t BMI160::getGyroOffsetEnabled(void) {
    return !!(readRegBits(BMI160_RA_OFFSET_6, BMI160_GYR_OFFSET_EN, 1));
}

int BMI160::setGyroOffsetEnabled(uint8_t enabled) {
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af02      	add	r7, sp, #8
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	460b      	mov	r3, r1
 8001648:	70fb      	strb	r3, [r7, #3]
	return writeRegisterBits(BMI160_RA_OFFSET_6, enabled ? 0x1 : 0, BMI160_GYR_OFFSET_EN, 1);
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <_ZN6BMI16020setGyroOffsetEnabledEh+0x16>
 8001650:	2201      	movs	r2, #1
 8001652:	e000      	b.n	8001656 <_ZN6BMI16020setGyroOffsetEnabledEh+0x18>
 8001654:	2200      	movs	r2, #0
 8001656:	2301      	movs	r3, #1
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2307      	movs	r3, #7
 800165c:	2177      	movs	r1, #119	; 0x77
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f805 	bl	800166e <_ZN6BMI16017writeRegisterBitsEhhjj>
 8001664:	4603      	mov	r3, r0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_ZN6BMI16017writeRegisterBitsEhhjj>:

uint8_t BMI160::getTapShockDuration(void) {
    return !!(readRegBits(BMI160_RA_INT_TAP_0, BMI160_TAP_SHOCK_BIT, 1));
}

int BMI160::writeRegisterBits(uint8_t reg, uint8_t data, unsigned pos, unsigned len) {
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	72fb      	strb	r3, [r7, #11]
 800167c:	4613      	mov	r3, r2
 800167e:	72bb      	strb	r3, [r7, #10]
	uint8_t readData = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	74bb      	strb	r3, [r7, #18]
	int opStatus = readRegister(reg, 1, &readData);
 8001684:	f107 0312 	add.w	r3, r7, #18
 8001688:	7af9      	ldrb	r1, [r7, #11]
 800168a:	2201      	movs	r2, #1
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 f87d 	bl	800178c <_ZN6BMI16012readRegisterEhhPh>
 8001692:	6178      	str	r0, [r7, #20]

	if(opStatus != 0) {
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <_ZN6BMI16017writeRegisterBitsEhhjj+0x30>
		return opStatus;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	e028      	b.n	80016f0 <_ZN6BMI16017writeRegisterBitsEhhjj+0x82>
	}

    uint8_t mask = ((1 << len) - 1) << pos;
 800169e:	2201      	movs	r2, #1
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	1e5a      	subs	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	74fb      	strb	r3, [r7, #19]

    data <<= pos;
 80016b0:	7aba      	ldrb	r2, [r7, #10]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	72bb      	strb	r3, [r7, #10]
    data &= mask;
 80016ba:	7aba      	ldrb	r2, [r7, #10]
 80016bc:	7cfb      	ldrb	r3, [r7, #19]
 80016be:	4013      	ands	r3, r2
 80016c0:	72bb      	strb	r3, [r7, #10]
    readData &= ~(mask);
 80016c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	b25a      	sxtb	r2, r3
 80016ca:	7cbb      	ldrb	r3, [r7, #18]
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	4013      	ands	r3, r2
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	74bb      	strb	r3, [r7, #18]
    readData |= data;
 80016d6:	7cba      	ldrb	r2, [r7, #18]
 80016d8:	7abb      	ldrb	r3, [r7, #10]
 80016da:	4313      	orrs	r3, r2
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	74bb      	strb	r3, [r7, #18]

    return writeRegister(reg, readData);
 80016e0:	7cba      	ldrb	r2, [r7, #18]
 80016e2:	7afb      	ldrb	r3, [r7, #11]
 80016e4:	4619      	mov	r1, r3
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 f835 	bl	8001756 <_ZN6BMI16013writeRegisterEhh>
 80016ec:	4603      	mov	r3, r0
 80016ee:	bf00      	nop
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_ZN6BMI16011readRegBitsEhjj>:

uint8_t BMI160::readRegBits(uint8_t reg, unsigned pos, unsigned len) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	460b      	mov	r3, r1
 8001706:	72fb      	strb	r3, [r7, #11]
	uint8_t readData = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	74bb      	strb	r3, [r7, #18]
	int opStatus = readRegister(reg, 1, &readData);
 800170c:	f107 0312 	add.w	r3, r7, #18
 8001710:	7af9      	ldrb	r1, [r7, #11]
 8001712:	2201      	movs	r2, #1
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f839 	bl	800178c <_ZN6BMI16012readRegisterEhhPh>
 800171a:	6178      	str	r0, [r7, #20]

	if(opStatus != 0) {
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <_ZN6BMI16011readRegBitsEhjj+0x2e>
		return 0x00;
 8001722:	2300      	movs	r3, #0
 8001724:	e013      	b.n	800174e <_ZN6BMI16011readRegBitsEhjj+0x56>
	}

    uint8_t mask = (1 << len) - 1;
 8001726:	2201      	movs	r2, #1
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	3b01      	subs	r3, #1
 8001732:	74fb      	strb	r3, [r7, #19]
    readData >>= pos;
 8001734:	7cbb      	ldrb	r3, [r7, #18]
 8001736:	461a      	mov	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	fa42 f303 	asr.w	r3, r2, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	74bb      	strb	r3, [r7, #18]
    readData &= mask;
 8001742:	7cba      	ldrb	r2, [r7, #18]
 8001744:	7cfb      	ldrb	r3, [r7, #19]
 8001746:	4013      	ands	r3, r2
 8001748:	b2db      	uxtb	r3, r3
 800174a:	74bb      	strb	r3, [r7, #18]

    return readData;
 800174c:	7cbb      	ldrb	r3, [r7, #18]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_ZN6BMI16013writeRegisterEhh>:

int BMI160::writeRegister(uint8_t address, uint8_t cmd) {
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	460b      	mov	r3, r1
 8001760:	70fb      	strb	r3, [r7, #3]
 8001762:	4613      	mov	r3, r2
 8001764:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2] = {0x00};
 8001766:	2300      	movs	r3, #0
 8001768:	81bb      	strh	r3, [r7, #12]
	data[0] = address;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	733b      	strb	r3, [r7, #12]
	data[1] = cmd;
 800176e:	78bb      	ldrb	r3, [r7, #2]
 8001770:	737b      	strb	r3, [r7, #13]

	return callbacks.transmit(this->i2cAddress, data, 2);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	8810      	ldrh	r0, [r2, #0]
 800177a:	f107 010c 	add.w	r1, r7, #12
 800177e:	2202      	movs	r2, #2
 8001780:	4798      	blx	r3
 8001782:	4603      	mov	r3, r0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_ZN6BMI16012readRegisterEhhPh>:

int BMI160::readRegister(uint8_t address, uint8_t dataSize, uint8_t *rec) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	72fb      	strb	r3, [r7, #11]
 800179a:	4613      	mov	r3, r2
 800179c:	72bb      	strb	r3, [r7, #10]
	uint8_t data[1] = {0x00};
 800179e:	2300      	movs	r3, #0
 80017a0:	753b      	strb	r3, [r7, #20]
	data[0] = address;
 80017a2:	7afb      	ldrb	r3, [r7, #11]
 80017a4:	753b      	strb	r3, [r7, #20]

	callbacks.transmit(this->i2cAddress, data, 1);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	8810      	ldrh	r0, [r2, #0]
 80017ae:	f107 0114 	add.w	r1, r7, #20
 80017b2:	2201      	movs	r2, #1
 80017b4:	4798      	blx	r3
	return callbacks.receive(this->i2cAddress, &rec[0], dataSize);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	8810      	ldrh	r0, [r2, #0]
 80017be:	7aba      	ldrb	r2, [r7, #10]
 80017c0:	b292      	uxth	r2, r2
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4798      	blx	r3
 80017c6:	4603      	mov	r3, r0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_ZSt4sqrtIlEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7fe fec3 	bl	8000564 <__aeabi_i2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	ec43 2b10 	vmov	d0, r2, r3
 80017e6:	f009 fb71 	bl	800aecc <sqrt>
 80017ea:	eeb0 7a40 	vmov.f32	s14, s0
 80017ee:	eef0 7a60 	vmov.f32	s15, s1
 80017f2:	eeb0 0a47 	vmov.f32	s0, s14
 80017f6:	eef0 0a67 	vmov.f32	s1, s15
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_ZSt5atan2IsdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	ed87 0b00 	vstr	d0, [r7]
 800180c:	81fb      	strh	r3, [r7, #14]
      return atan2(__type(__y), __type(__x));
 800180e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fea6 	bl	8000564 <__aeabi_i2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	ed97 1b00 	vldr	d1, [r7]
 8001820:	ec43 2b10 	vmov	d0, r2, r3
 8001824:	f009 fb50 	bl	800aec8 <atan2>
 8001828:	eeb0 7a40 	vmov.f32	s14, s0
 800182c:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001830:	eeb0 0a47 	vmov.f32	s0, s14
 8001834:	eef0 0a67 	vmov.f32	s1, s15
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <_Z9kalman_1dffff>:
	float Value;
	float Uncertainty;
} KalmanOutput_t;


KalmanOutput_t kalman_1d(float KalmanState, float KalmanUncertainty, float KalmanInput, float KalmanMeasurement) {
 8001840:	b5b0      	push	{r4, r5, r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af00      	add	r7, sp, #0
 8001846:	ed87 0a05 	vstr	s0, [r7, #20]
 800184a:	edc7 0a04 	vstr	s1, [r7, #16]
 800184e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001852:	edc7 1a02 	vstr	s3, [r7, #8]

	KalmanState=KalmanState+0.004*KalmanInput;
 8001856:	6978      	ldr	r0, [r7, #20]
 8001858:	f7fe fe96 	bl	8000588 <__aeabi_f2d>
 800185c:	4604      	mov	r4, r0
 800185e:	460d      	mov	r5, r1
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f7fe fe91 	bl	8000588 <__aeabi_f2d>
 8001866:	a334      	add	r3, pc, #208	; (adr r3, 8001938 <_Z9kalman_1dffff+0xf8>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe fee4 	bl	8000638 <__aeabi_dmul>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4620      	mov	r0, r4
 8001876:	4629      	mov	r1, r5
 8001878:	f7fe fd28 	bl	80002cc <__adddf3>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f7ff f988 	bl	8000b98 <__aeabi_d2f>
 8001888:	4603      	mov	r3, r0
 800188a:	617b      	str	r3, [r7, #20]
    KalmanUncertainty=KalmanUncertainty + 0.004 * 0.004 * 4 * 4;
 800188c:	6938      	ldr	r0, [r7, #16]
 800188e:	f7fe fe7b 	bl	8000588 <__aeabi_f2d>
 8001892:	a32b      	add	r3, pc, #172	; (adr r3, 8001940 <_Z9kalman_1dffff+0x100>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	f7fe fd18 	bl	80002cc <__adddf3>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7ff f978 	bl	8000b98 <__aeabi_d2f>
 80018a8:	4603      	mov	r3, r0
 80018aa:	613b      	str	r3, [r7, #16]

    float KalmanGain=KalmanUncertainty * 1/(1*KalmanUncertainty + 3 * 3);
 80018ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80018b0:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80018b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80018bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    KalmanState=KalmanState+KalmanGain * (KalmanMeasurement-KalmanState);
 80018c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80018c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80018cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80018dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e0:	edc7 7a05 	vstr	s15, [r7, #20]
    KalmanUncertainty=(1-KalmanGain) * KalmanUncertainty;
 80018e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80018f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f8:	edc7 7a04 	vstr	s15, [r7, #16]

    KalmanOutput_t result = {};
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
    result.Value = KalmanState;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	61fb      	str	r3, [r7, #28]
    result.Uncertainty = KalmanUncertainty;
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	623b      	str	r3, [r7, #32]

    return result;
 800190e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001912:	f107 021c 	add.w	r2, r7, #28
 8001916:	e892 0003 	ldmia.w	r2, {r0, r1}
 800191a:	e883 0003 	stmia.w	r3, {r0, r1}
 800191e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001922:	ee07 2a10 	vmov	s14, r2
 8001926:	ee07 3a90 	vmov	s15, r3
}
 800192a:	eeb0 0a47 	vmov.f32	s0, s14
 800192e:	eef0 0a67 	vmov.f32	s1, s15
 8001932:	3730      	adds	r7, #48	; 0x30
 8001934:	46bd      	mov	sp, r7
 8001936:	bdb0      	pop	{r4, r5, r7, pc}
 8001938:	d2f1a9fc 	.word	0xd2f1a9fc
 800193c:	3f70624d 	.word	0x3f70624d
 8001940:	a0b5ed8d 	.word	0xa0b5ed8d
 8001944:	3f30c6f7 	.word	0x3f30c6f7

08001948 <_Z12BMI160_Delaym>:


int BMI160_Delay(uint32_t timeout) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	HAL_Delay(timeout);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fe19 	bl	8002588 <HAL_Delay>
	return 0;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_Z15BMI160_TransmittPht>:

int BMI160_Transmit(uint16_t address,  uint8_t *data, uint16_t size) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af02      	add	r7, sp, #8
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	80fb      	strh	r3, [r7, #6]
 800196c:	4613      	mov	r3, r2
 800196e:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef opResoult = HAL_I2C_Master_Transmit(&hi2c1, address, data, size, 10);
 8001970:	88bb      	ldrh	r3, [r7, #4]
 8001972:	88f9      	ldrh	r1, [r7, #6]
 8001974:	220a      	movs	r2, #10
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	4808      	ldr	r0, [pc, #32]	; (800199c <_Z15BMI160_TransmittPht+0x3c>)
 800197c:	f001 fa20 	bl	8002dc0 <HAL_I2C_Master_Transmit>
 8001980:	4603      	mov	r3, r0
 8001982:	73fb      	strb	r3, [r7, #15]
	return opResoult == HAL_OK ? 0 : -1;
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <_Z15BMI160_TransmittPht+0x2e>
 800198a:	2300      	movs	r3, #0
 800198c:	e001      	b.n	8001992 <_Z15BMI160_TransmittPht+0x32>
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000210 	.word	0x20000210

080019a0 <_Z14BMI160_ReceivetPht>:

int BMI160_Receive(uint16_t address,  uint8_t *data, uint16_t size) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	80fb      	strh	r3, [r7, #6]
 80019ac:	4613      	mov	r3, r2
 80019ae:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef opResoult = HAL_I2C_Master_Receive(&hi2c1, address, data, size, 10);
 80019b0:	88bb      	ldrh	r3, [r7, #4]
 80019b2:	88f9      	ldrh	r1, [r7, #6]
 80019b4:	220a      	movs	r2, #10
 80019b6:	9200      	str	r2, [sp, #0]
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	4808      	ldr	r0, [pc, #32]	; (80019dc <_Z14BMI160_ReceivetPht+0x3c>)
 80019bc:	f001 fafe 	bl	8002fbc <HAL_I2C_Master_Receive>
 80019c0:	4603      	mov	r3, r0
 80019c2:	73fb      	strb	r3, [r7, #15]
	return opResoult == HAL_OK ? 0 : -1;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <_Z14BMI160_ReceivetPht+0x2e>
 80019ca:	2300      	movs	r3, #0
 80019cc:	e001      	b.n	80019d2 <_Z14BMI160_ReceivetPht+0x32>
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000210 	.word	0x20000210

080019e0 <DefaultTask>:

KalmanOutput_t KalmanRoll = {0, 2*2};
KalmanOutput_t KalmanPitch = {0, 2*2};
BMI160 *bmi160 = NULL;

extern "C" void DefaultTask() {
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b08f      	sub	sp, #60	; 0x3c
 80019e4:	af02      	add	r7, sp, #8
	{
		I2C_Callbacks clbks = {
 80019e6:	4a53      	ldr	r2, [pc, #332]	; (8001b34 <DefaultTask+0x154>)
 80019e8:	f107 0320 	add.w	r3, r7, #32
 80019ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.transmit = BMI160_Transmit,
			.receive = BMI160_Receive,
			.delayMs = BMI160_Delay
		};

		BMI160_Config config {
 80019f2:	4a51      	ldr	r2, [pc, #324]	; (8001b38 <DefaultTask+0x158>)
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019fc:	6018      	str	r0, [r3, #0]
 80019fe:	3304      	adds	r3, #4
 8001a00:	8019      	strh	r1, [r3, #0]
			.gyroRange = BMI160_GYRO_RANGE_250,
			.gyroRate = BMI160_GYRO_RATE_100HZ,
			.gyroMode = BMI160_DLPF_MODE_OSR2
		};

		bmi160 = new BMI160(BMI160_I2C_ADDR << 1, &clbks);
 8001a02:	2014      	movs	r0, #20
 8001a04:	f009 fa46 	bl	800ae94 <_Znwj>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461c      	mov	r4, r3
 8001a0c:	f107 0320 	add.w	r3, r7, #32
 8001a10:	461a      	mov	r2, r3
 8001a12:	21d2      	movs	r1, #210	; 0xd2
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7ff fa8d 	bl	8000f34 <_ZN6BMI160C1EtP13I2C_Callbacks>
 8001a1a:	4b48      	ldr	r3, [pc, #288]	; (8001b3c <DefaultTask+0x15c>)
 8001a1c:	601c      	str	r4, [r3, #0]
		bmi160->init(&config);
 8001a1e:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <DefaultTask+0x15c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f107 0218 	add.w	r2, r7, #24
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fa9a 	bl	8000f62 <_ZN6BMI1604initEP13BMI160_Config>
	}

    while(1) {

    	GyroAccelData gyro = bmi160->scaledGyroData();
 8001a2e:	4b43      	ldr	r3, [pc, #268]	; (8001b3c <DefaultTask+0x15c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fc3c 	bl	80012b0 <_ZN6BMI16014scaledGyroDataEv>
 8001a38:	eef0 6a40 	vmov.f32	s13, s0
 8001a3c:	eeb0 7a60 	vmov.f32	s14, s1
 8001a40:	eef0 7a41 	vmov.f32	s15, s2
 8001a44:	edc7 6a03 	vstr	s13, [r7, #12]
 8001a48:	ed87 7a04 	vstr	s14, [r7, #16]
 8001a4c:	edc7 7a05 	vstr	s15, [r7, #20]
    	AnglePeachData angles = bmi160->getAccelerometerAngles();
 8001a50:	4b3a      	ldr	r3, [pc, #232]	; (8001b3c <DefaultTask+0x15c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fb9f 	bl	8001198 <_ZN6BMI16022getAccelerometerAnglesEv>
 8001a5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a5e:	eef0 7a60 	vmov.f32	s15, s1
 8001a62:	ed87 7a01 	vstr	s14, [r7, #4]
 8001a66:	edc7 7a02 	vstr	s15, [r7, #8]
    	KalmanRoll = kalman_1d(KalmanRoll.Value, KalmanRoll.Uncertainty, gyro.x, angles.AngleRoll);
 8001a6a:	4b35      	ldr	r3, [pc, #212]	; (8001b40 <DefaultTask+0x160>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	4b33      	ldr	r3, [pc, #204]	; (8001b40 <DefaultTask+0x160>)
 8001a72:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a76:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a7a:	ed97 6a01 	vldr	s12, [r7, #4]
 8001a7e:	eef0 1a46 	vmov.f32	s3, s12
 8001a82:	eeb0 1a66 	vmov.f32	s2, s13
 8001a86:	eef0 0a47 	vmov.f32	s1, s14
 8001a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8e:	f7ff fed7 	bl	8001840 <_Z9kalman_1dffff>
 8001a92:	eeb0 7a40 	vmov.f32	s14, s0
 8001a96:	eef0 7a60 	vmov.f32	s15, s1
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <DefaultTask+0x160>)
 8001a9c:	ed83 7a00 	vstr	s14, [r3]
 8001aa0:	edc3 7a01 	vstr	s15, [r3, #4]
    	KalmanPitch = kalman_1d(KalmanPitch.Value, KalmanPitch.Uncertainty, gyro.y, angles.AnglePitch);
 8001aa4:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <DefaultTask+0x164>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <DefaultTask+0x164>)
 8001aac:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ab0:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ab4:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ab8:	eef0 1a46 	vmov.f32	s3, s12
 8001abc:	eeb0 1a66 	vmov.f32	s2, s13
 8001ac0:	eef0 0a47 	vmov.f32	s1, s14
 8001ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac8:	f7ff feba 	bl	8001840 <_Z9kalman_1dffff>
 8001acc:	eeb0 7a40 	vmov.f32	s14, s0
 8001ad0:	eef0 7a60 	vmov.f32	s15, s1
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <DefaultTask+0x164>)
 8001ad6:	ed83 7a00 	vstr	s14, [r3]
 8001ada:	edc3 7a01 	vstr	s15, [r3, #4]

    	int size = snprintf((char*)buffer, 128, "Roll Angle [o] %d Pitch Angle [o] %d", (int)(KalmanRoll.Value), (int)(KalmanPitch.Value));
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <DefaultTask+0x160>)
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <DefaultTask+0x164>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af2:	ee17 3a90 	vmov	r3, s15
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	ee17 3a10 	vmov	r3, s14
 8001afc:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <DefaultTask+0x168>)
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	4812      	ldr	r0, [pc, #72]	; (8001b4c <DefaultTask+0x16c>)
 8001b02:	f009 fe15 	bl	800b730 <sniprintf>
 8001b06:	62f8      	str	r0, [r7, #44]	; 0x2c
    	if (size > 128) {
 8001b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0a:	2b80      	cmp	r3, #128	; 0x80
 8001b0c:	dd01      	ble.n	8001b12 <DefaultTask+0x132>
    		size = 128;
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    	}

    	HAL_UART_Transmit(&huart6, buffer, size, 10);
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	230a      	movs	r3, #10
 8001b18:	490c      	ldr	r1, [pc, #48]	; (8001b4c <DefaultTask+0x16c>)
 8001b1a:	480d      	ldr	r0, [pc, #52]	; (8001b50 <DefaultTask+0x170>)
 8001b1c:	f004 fd5b 	bl	80065d6 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart6, (uint8_t*)"\r\n", 2, 10);
 8001b20:	230a      	movs	r3, #10
 8001b22:	2202      	movs	r2, #2
 8001b24:	490b      	ldr	r1, [pc, #44]	; (8001b54 <DefaultTask+0x174>)
 8001b26:	480a      	ldr	r0, [pc, #40]	; (8001b50 <DefaultTask+0x170>)
 8001b28:	f004 fd55 	bl	80065d6 <HAL_UART_Transmit>
		HAL_Delay(50);
 8001b2c:	2032      	movs	r0, #50	; 0x32
 8001b2e:	f000 fd2b 	bl	8002588 <HAL_Delay>
    }
 8001b32:	e77c      	b.n	8001a2e <DefaultTask+0x4e>
 8001b34:	0800c014 	.word	0x0800c014
 8001b38:	0800c020 	.word	0x0800c020
 8001b3c:	2000020c 	.word	0x2000020c
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000008 	.word	0x20000008
 8001b48:	0800bfe8 	.word	0x0800bfe8
 8001b4c:	2000018c 	.word	0x2000018c
 8001b50:	20000300 	.word	0x20000300
 8001b54:	0800c010 	.word	0x0800c010

08001b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b5c:	f000 fcd2 	bl	8002504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b60:	f000 f810 	bl	8001b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b64:	f000 f934 	bl	8001dd0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001b68:	f000 f8de 	bl	8001d28 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001b6c:	f000 f876 	bl	8001c5c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001b70:	f000 f904 	bl	8001d7c <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 8001b74:	f008 fc7e 	bl	800a474 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001b78:	f000 f89e 	bl	8001cb8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  extern void DefaultTask();
  DefaultTask();
 8001b7c:	f7ff ff30 	bl	80019e0 <DefaultTask>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <main+0x28>
	...

08001b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b094      	sub	sp, #80	; 0x50
 8001b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	2234      	movs	r2, #52	; 0x34
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f009 fe00 	bl	800b798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b98:	f107 0308 	add.w	r3, r7, #8
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <SystemClock_Config+0xd0>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4a28      	ldr	r2, [pc, #160]	; (8001c54 <SystemClock_Config+0xd0>)
 8001bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb8:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <SystemClock_Config+0xd0>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <SystemClock_Config+0xd4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <SystemClock_Config+0xd4>)
 8001bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <SystemClock_Config+0xd4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001be0:	2301      	movs	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001be4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001be8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bea:	2302      	movs	r3, #2
 8001bec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8001bf8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bfc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001c02:	2308      	movs	r3, #8
 8001c04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c06:	2302      	movs	r3, #2
 8001c08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 feda 	bl	80059c8 <HAL_RCC_OscConfig>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c1a:	f000 f9dd 	bl	8001fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1e:	230f      	movs	r3, #15
 8001c20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c22:	2302      	movs	r3, #2
 8001c24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c34:	f107 0308 	add.w	r3, r7, #8
 8001c38:	2103      	movs	r1, #3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 f9e6 	bl	800500c <HAL_RCC_ClockConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c46:	f000 f9c7 	bl	8001fd8 <Error_Handler>
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3750      	adds	r7, #80	; 0x50
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40007000 	.word	0x40007000

08001c5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c62:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <MX_I2C1_Init+0x54>)
 8001c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c68:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <MX_I2C1_Init+0x58>)
 8001c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c98:	4804      	ldr	r0, [pc, #16]	; (8001cac <MX_I2C1_Init+0x50>)
 8001c9a:	f000 ff4d 	bl	8002b38 <HAL_I2C_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ca4:	f000 f998 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000210 	.word	0x20000210
 8001cb0:	40005400 	.word	0x40005400
 8001cb4:	000186a0 	.word	0x000186a0

08001cb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <MX_SPI1_Init+0x68>)
 8001cbe:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <MX_SPI1_Init+0x6c>)
 8001cc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <MX_SPI1_Init+0x68>)
 8001cc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <MX_SPI1_Init+0x68>)
 8001ccc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cd0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <MX_SPI1_Init+0x68>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_SPI1_Init+0x68>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <MX_SPI1_Init+0x68>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_SPI1_Init+0x68>)
 8001ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_SPI1_Init+0x68>)
 8001cee:	2230      	movs	r2, #48	; 0x30
 8001cf0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <MX_SPI1_Init+0x68>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_SPI1_Init+0x68>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <MX_SPI1_Init+0x68>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_SPI1_Init+0x68>)
 8001d06:	220a      	movs	r2, #10
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_SPI1_Init+0x68>)
 8001d0c:	f004 f8e0 	bl	8005ed0 <HAL_SPI_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001d16:	f000 f95f 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000264 	.word	0x20000264
 8001d24:	40013000 	.word	0x40013000

08001d28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <MX_USART3_UART_Init+0x4c>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <MX_USART3_UART_Init+0x50>)
 8001d30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <MX_USART3_UART_Init+0x4c>)
 8001d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <MX_USART3_UART_Init+0x4c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <MX_USART3_UART_Init+0x4c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <MX_USART3_UART_Init+0x4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <MX_USART3_UART_Init+0x4c>)
 8001d4e:	220c      	movs	r2, #12
 8001d50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <MX_USART3_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <MX_USART3_UART_Init+0x4c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_USART3_UART_Init+0x4c>)
 8001d60:	f004 fbec 	bl	800653c <HAL_UART_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d6a:	f000 f935 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200002bc 	.word	0x200002bc
 8001d78:	40004800 	.word	0x40004800

08001d7c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_USART6_UART_Init+0x4c>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <MX_USART6_UART_Init+0x50>)
 8001d84:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <MX_USART6_UART_Init+0x4c>)
 8001d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d8c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <MX_USART6_UART_Init+0x4c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_USART6_UART_Init+0x4c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <MX_USART6_UART_Init+0x4c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_USART6_UART_Init+0x4c>)
 8001da2:	220c      	movs	r2, #12
 8001da4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <MX_USART6_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <MX_USART6_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001db2:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_USART6_UART_Init+0x4c>)
 8001db4:	f004 fbc2 	bl	800653c <HAL_UART_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001dbe:	f000 f90b 	bl	8001fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000300 	.word	0x20000300
 8001dcc:	40011400 	.word	0x40011400

08001dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08c      	sub	sp, #48	; 0x30
 8001dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	4b6c      	ldr	r3, [pc, #432]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a6b      	ldr	r2, [pc, #428]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b69      	ldr	r3, [pc, #420]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	4b65      	ldr	r3, [pc, #404]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a64      	ldr	r2, [pc, #400]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b62      	ldr	r3, [pc, #392]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a5d      	ldr	r2, [pc, #372]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b5b      	ldr	r3, [pc, #364]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b57      	ldr	r3, [pc, #348]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a56      	ldr	r2, [pc, #344]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b54      	ldr	r3, [pc, #336]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a4f      	ldr	r2, [pc, #316]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e60:	f043 0320 	orr.w	r3, r3, #32
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b4d      	ldr	r3, [pc, #308]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	4b49      	ldr	r3, [pc, #292]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a48      	ldr	r2, [pc, #288]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e7c:	f043 0308 	orr.w	r3, r3, #8
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a41      	ldr	r2, [pc, #260]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <MX_GPIO_Init+0x1cc>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f244 0181 	movw	r1, #16513	; 0x4081
 8001eb0:	483b      	ldr	r0, [pc, #236]	; (8001fa0 <MX_GPIO_Init+0x1d0>)
 8001eb2:	f000 fe03 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ebc:	4839      	ldr	r0, [pc, #228]	; (8001fa4 <MX_GPIO_Init+0x1d4>)
 8001ebe:	f000 fdfd 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001ec8:	4837      	ldr	r0, [pc, #220]	; (8001fa8 <MX_GPIO_Init+0x1d8>)
 8001eca:	f000 fdf7 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2140      	movs	r1, #64	; 0x40
 8001ed2:	4836      	ldr	r0, [pc, #216]	; (8001fac <MX_GPIO_Init+0x1dc>)
 8001ed4:	f000 fdf2 	bl	8002abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ede:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	4830      	ldr	r0, [pc, #192]	; (8001fb0 <MX_GPIO_Init+0x1e0>)
 8001ef0:	f000 fc50 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001ef4:	f244 0381 	movw	r3, #16513	; 0x4081
 8001ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4824      	ldr	r0, [pc, #144]	; (8001fa0 <MX_GPIO_Init+0x1d0>)
 8001f0e:	f000 fc41 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	4619      	mov	r1, r3
 8001f2a:	481e      	ldr	r0, [pc, #120]	; (8001fa4 <MX_GPIO_Init+0x1d4>)
 8001f2c:	f000 fc32 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001f30:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	4817      	ldr	r0, [pc, #92]	; (8001fa8 <MX_GPIO_Init+0x1d8>)
 8001f4a:	f000 fc23 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001f4e:	2340      	movs	r3, #64	; 0x40
 8001f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4619      	mov	r1, r3
 8001f64:	4811      	ldr	r0, [pc, #68]	; (8001fac <MX_GPIO_Init+0x1dc>)
 8001f66:	f000 fc15 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480b      	ldr	r0, [pc, #44]	; (8001fac <MX_GPIO_Init+0x1dc>)
 8001f7e:	f000 fc09 	bl	8002794 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	2028      	movs	r0, #40	; 0x28
 8001f88:	f000 fbda 	bl	8002740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f8c:	2028      	movs	r0, #40	; 0x28
 8001f8e:	f000 fbf3 	bl	8002778 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f92:	bf00      	nop
 8001f94:	3730      	adds	r7, #48	; 0x30
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40021400 	.word	0x40021400
 8001fa8:	40020c00 	.word	0x40020c00
 8001fac:	40021800 	.word	0x40021800
 8001fb0:	40020800 	.word	0x40020800

08001fb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fc6:	f000 fabf 	bl	8002548 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40001000 	.word	0x40001000

08001fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fdc:	b672      	cpsid	i
}
 8001fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <Error_Handler+0x8>
	...

08001fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_MspInit+0x4c>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <HAL_MspInit+0x4c>)
 8001ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_MspInit+0x4c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_MspInit+0x4c>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a08      	ldr	r2, [pc, #32]	; (8002030 <HAL_MspInit+0x4c>)
 8002010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_MspInit+0x4c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800

08002034 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a19      	ldr	r2, [pc, #100]	; (80020b8 <HAL_I2C_MspInit+0x84>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d12c      	bne.n	80020b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_I2C_MspInit+0x88>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a17      	ldr	r2, [pc, #92]	; (80020bc <HAL_I2C_MspInit+0x88>)
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <HAL_I2C_MspInit+0x88>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|GPIO_PIN_9;
 8002072:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002078:	2312      	movs	r3, #18
 800207a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002084:	2304      	movs	r3, #4
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	4619      	mov	r1, r3
 800208e:	480c      	ldr	r0, [pc, #48]	; (80020c0 <HAL_I2C_MspInit+0x8c>)
 8002090:	f000 fb80 	bl	8002794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_I2C_MspInit+0x88>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	4a07      	ldr	r2, [pc, #28]	; (80020bc <HAL_I2C_MspInit+0x88>)
 800209e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020a2:	6413      	str	r3, [r2, #64]	; 0x40
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_I2C_MspInit+0x88>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	; 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40005400 	.word	0x40005400
 80020bc:	40023800 	.word	0x40023800
 80020c0:	40020400 	.word	0x40020400

080020c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08a      	sub	sp, #40	; 0x28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a19      	ldr	r2, [pc, #100]	; (8002148 <HAL_SPI_MspInit+0x84>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d12b      	bne.n	800213e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	4b18      	ldr	r3, [pc, #96]	; (800214c <HAL_SPI_MspInit+0x88>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a17      	ldr	r2, [pc, #92]	; (800214c <HAL_SPI_MspInit+0x88>)
 80020f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <HAL_SPI_MspInit+0x88>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_SPI_MspInit+0x88>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a10      	ldr	r2, [pc, #64]	; (800214c <HAL_SPI_MspInit+0x88>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <HAL_SPI_MspInit+0x88>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800211e:	23a0      	movs	r3, #160	; 0xa0
 8002120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212a:	2303      	movs	r3, #3
 800212c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800212e:	2305      	movs	r3, #5
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4619      	mov	r1, r3
 8002138:	4805      	ldr	r0, [pc, #20]	; (8002150 <HAL_SPI_MspInit+0x8c>)
 800213a:	f000 fb2b 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800213e:	bf00      	nop
 8002140:	3728      	adds	r7, #40	; 0x28
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40013000 	.word	0x40013000
 800214c:	40023800 	.word	0x40023800
 8002150:	40020000 	.word	0x40020000

08002154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08c      	sub	sp, #48	; 0x30
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a33      	ldr	r2, [pc, #204]	; (8002240 <HAL_UART_MspInit+0xec>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d12d      	bne.n	80021d2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	4b32      	ldr	r3, [pc, #200]	; (8002244 <HAL_UART_MspInit+0xf0>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a31      	ldr	r2, [pc, #196]	; (8002244 <HAL_UART_MspInit+0xf0>)
 8002180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <HAL_UART_MspInit+0xf0>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_UART_MspInit+0xf0>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a2a      	ldr	r2, [pc, #168]	; (8002244 <HAL_UART_MspInit+0xf0>)
 800219c:	f043 0308 	orr.w	r3, r3, #8
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b28      	ldr	r3, [pc, #160]	; (8002244 <HAL_UART_MspInit+0xf0>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021c0:	2307      	movs	r3, #7
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	4619      	mov	r1, r3
 80021ca:	481f      	ldr	r0, [pc, #124]	; (8002248 <HAL_UART_MspInit+0xf4>)
 80021cc:	f000 fae2 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80021d0:	e031      	b.n	8002236 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1d      	ldr	r2, [pc, #116]	; (800224c <HAL_UART_MspInit+0xf8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d12c      	bne.n	8002236 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80021dc:	2300      	movs	r3, #0
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	4b18      	ldr	r3, [pc, #96]	; (8002244 <HAL_UART_MspInit+0xf0>)
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	4a17      	ldr	r2, [pc, #92]	; (8002244 <HAL_UART_MspInit+0xf0>)
 80021e6:	f043 0320 	orr.w	r3, r3, #32
 80021ea:	6453      	str	r3, [r2, #68]	; 0x44
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_UART_MspInit+0xf0>)
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <HAL_UART_MspInit+0xf0>)
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	4a10      	ldr	r2, [pc, #64]	; (8002244 <HAL_UART_MspInit+0xf0>)
 8002202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002206:	6313      	str	r3, [r2, #48]	; 0x30
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <HAL_UART_MspInit+0xf0>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8002214:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002226:	2308      	movs	r3, #8
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	4807      	ldr	r0, [pc, #28]	; (8002250 <HAL_UART_MspInit+0xfc>)
 8002232:	f000 faaf 	bl	8002794 <HAL_GPIO_Init>
}
 8002236:	bf00      	nop
 8002238:	3730      	adds	r7, #48	; 0x30
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40004800 	.word	0x40004800
 8002244:	40023800 	.word	0x40023800
 8002248:	40020c00 	.word	0x40020c00
 800224c:	40011400 	.word	0x40011400
 8002250:	40021800 	.word	0x40021800

08002254 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08e      	sub	sp, #56	; 0x38
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	4b33      	ldr	r3, [pc, #204]	; (8002338 <HAL_InitTick+0xe4>)
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	4a32      	ldr	r2, [pc, #200]	; (8002338 <HAL_InitTick+0xe4>)
 800226e:	f043 0310 	orr.w	r3, r3, #16
 8002272:	6413      	str	r3, [r2, #64]	; 0x40
 8002274:	4b30      	ldr	r3, [pc, #192]	; (8002338 <HAL_InitTick+0xe4>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002280:	f107 0210 	add.w	r2, r7, #16
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f003 f8de 	bl	800544c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	2b00      	cmp	r3, #0
 8002298:	d103      	bne.n	80022a2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800229a:	f003 f8af 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 800229e:	6378      	str	r0, [r7, #52]	; 0x34
 80022a0:	e004      	b.n	80022ac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80022a2:	f003 f8ab 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 80022a6:	4603      	mov	r3, r0
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ae:	4a23      	ldr	r2, [pc, #140]	; (800233c <HAL_InitTick+0xe8>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	0c9b      	lsrs	r3, r3, #18
 80022b6:	3b01      	subs	r3, #1
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <HAL_InitTick+0xec>)
 80022bc:	4a21      	ldr	r2, [pc, #132]	; (8002344 <HAL_InitTick+0xf0>)
 80022be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80022c0:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <HAL_InitTick+0xec>)
 80022c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80022c8:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <HAL_InitTick+0xec>)
 80022ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <HAL_InitTick+0xec>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <HAL_InitTick+0xec>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_InitTick+0xec>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80022e0:	4817      	ldr	r0, [pc, #92]	; (8002340 <HAL_InitTick+0xec>)
 80022e2:	f003 fe7e 	bl	8005fe2 <HAL_TIM_Base_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80022ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d11b      	bne.n	800232c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80022f4:	4812      	ldr	r0, [pc, #72]	; (8002340 <HAL_InitTick+0xec>)
 80022f6:	f003 fecd 	bl	8006094 <HAL_TIM_Base_Start_IT>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002300:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002304:	2b00      	cmp	r3, #0
 8002306:	d111      	bne.n	800232c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002308:	2036      	movs	r0, #54	; 0x36
 800230a:	f000 fa35 	bl	8002778 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b0f      	cmp	r3, #15
 8002312:	d808      	bhi.n	8002326 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002314:	2200      	movs	r2, #0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	2036      	movs	r0, #54	; 0x36
 800231a:	f000 fa11 	bl	8002740 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <HAL_InitTick+0xf4>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e002      	b.n	800232c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800232c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002330:	4618      	mov	r0, r3
 8002332:	3738      	adds	r7, #56	; 0x38
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	431bde83 	.word	0x431bde83
 8002340:	20000344 	.word	0x20000344
 8002344:	40001000 	.word	0x40001000
 8002348:	20000014 	.word	0x20000014

0800234c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <NMI_Handler+0x4>

08002352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002356:	e7fe      	b.n	8002356 <HardFault_Handler+0x4>

08002358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800235c:	e7fe      	b.n	800235c <MemManage_Handler+0x4>

0800235e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002362:	e7fe      	b.n	8002362 <BusFault_Handler+0x4>

08002364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <UsageFault_Handler+0x4>

0800236a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80023a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023aa:	f000 fba1 	bl	8002af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <TIM6_DAC_IRQHandler+0x10>)
 80023ba:	f003 fedb 	bl	8006174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000344 	.word	0x20000344

080023c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <OTG_FS_IRQHandler+0x10>)
 80023ce:	f001 fc9f 	bl	8003d10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20001874 	.word	0x20001874

080023dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return 1;
 80023e0:	2301      	movs	r3, #1
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_kill>:

int _kill(int pid, int sig)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023f6:	f009 fa2b 	bl	800b850 <__errno>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2216      	movs	r2, #22
 80023fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002400:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_exit>:

void _exit (int status)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ffe7 	bl	80023ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800241e:	e7fe      	b.n	800241e <_exit+0x12>

08002420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002428:	4a14      	ldr	r2, [pc, #80]	; (800247c <_sbrk+0x5c>)
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <_sbrk+0x60>)
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <_sbrk+0x64>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <_sbrk+0x64>)
 800243e:	4a12      	ldr	r2, [pc, #72]	; (8002488 <_sbrk+0x68>)
 8002440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <_sbrk+0x64>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	429a      	cmp	r2, r3
 800244e:	d207      	bcs.n	8002460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002450:	f009 f9fe 	bl	800b850 <__errno>
 8002454:	4603      	mov	r3, r0
 8002456:	220c      	movs	r2, #12
 8002458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800245a:	f04f 33ff 	mov.w	r3, #4294967295
 800245e:	e009      	b.n	8002474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <_sbrk+0x64>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <_sbrk+0x64>)
 8002470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002472:	68fb      	ldr	r3, [r7, #12]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20050000 	.word	0x20050000
 8002480:	00000400 	.word	0x00000400
 8002484:	2000038c 	.word	0x2000038c
 8002488:	200020f0 	.word	0x200020f0

0800248c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <SystemInit+0x20>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	4a05      	ldr	r2, [pc, #20]	; (80024ac <SystemInit+0x20>)
 8002498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800249c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack       /* set stack pointer */
 80024b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b4:	480d      	ldr	r0, [pc, #52]	; (80024ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024b6:	490e      	ldr	r1, [pc, #56]	; (80024f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024b8:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024bc:	e002      	b.n	80024c4 <LoopCopyDataInit>

080024be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c2:	3304      	adds	r3, #4

080024c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c8:	d3f9      	bcc.n	80024be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ca:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024cc:	4c0b      	ldr	r4, [pc, #44]	; (80024fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d0:	e001      	b.n	80024d6 <LoopFillZerobss>

080024d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d4:	3204      	adds	r2, #4

080024d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d8:	d3fb      	bcc.n	80024d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024da:	f7ff ffd7 	bl	800248c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024de:	f009 f9bd 	bl	800b85c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024e2:	f7ff fb39 	bl	8001b58 <main>
  bx  lr    
 80024e6:	4770      	bx	lr
   ldr   sp, =_estack       /* set stack pointer */
 80024e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80024ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f0:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80024f4:	0800c13c 	.word	0x0800c13c
  ldr r2, =_sbss
 80024f8:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80024fc:	200020ec 	.word	0x200020ec

08002500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002500:	e7fe      	b.n	8002500 <ADC_IRQHandler>
	...

08002504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002508:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <HAL_Init+0x40>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0d      	ldr	r2, [pc, #52]	; (8002544 <HAL_Init+0x40>)
 800250e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_Init+0x40>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <HAL_Init+0x40>)
 800251a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800251e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002520:	4b08      	ldr	r3, [pc, #32]	; (8002544 <HAL_Init+0x40>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a07      	ldr	r2, [pc, #28]	; (8002544 <HAL_Init+0x40>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800252c:	2003      	movs	r0, #3
 800252e:	f000 f8fc 	bl	800272a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002532:	200f      	movs	r0, #15
 8002534:	f7ff fe8e 	bl	8002254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002538:	f7ff fd54 	bl	8001fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023c00 	.word	0x40023c00

08002548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_IncTick+0x20>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_IncTick+0x24>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4413      	add	r3, r2
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <HAL_IncTick+0x24>)
 800255a:	6013      	str	r3, [r2, #0]
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000018 	.word	0x20000018
 800256c:	20000390 	.word	0x20000390

08002570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return uwTick;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_GetTick+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000390 	.word	0x20000390

08002588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff ffee 	bl	8002570 <HAL_GetTick>
 8002594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d005      	beq.n	80025ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_Delay+0x44>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ae:	bf00      	nop
 80025b0:	f7ff ffde 	bl	8002570 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d8f7      	bhi.n	80025b0 <HAL_Delay+0x28>
  {
  }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000018 	.word	0x20000018

080025d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002602:	4a04      	ldr	r2, [pc, #16]	; (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	60d3      	str	r3, [r2, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <__NVIC_GetPriorityGrouping+0x18>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	db0b      	blt.n	800265e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4907      	ldr	r1, [pc, #28]	; (800266c <__NVIC_EnableIRQ+0x38>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	; (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	; (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	; 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ff4c 	bl	80025d0 <__NVIC_SetPriorityGrouping>
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002752:	f7ff ff61 	bl	8002618 <__NVIC_GetPriorityGrouping>
 8002756:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	6978      	ldr	r0, [r7, #20]
 800275e:	f7ff ffb1 	bl	80026c4 <NVIC_EncodePriority>
 8002762:	4602      	mov	r2, r0
 8002764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff ff80 	bl	8002670 <__NVIC_SetPriority>
}
 8002770:	bf00      	nop
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff ff54 	bl	8002634 <__NVIC_EnableIRQ>
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	e165      	b.n	8002a7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027b0:	2201      	movs	r2, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	f040 8154 	bne.w	8002a76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d005      	beq.n	80027e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d130      	bne.n	8002848 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800281c:	2201      	movs	r2, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 0201 	and.w	r2, r3, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b03      	cmp	r3, #3
 8002852:	d017      	beq.n	8002884 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d123      	bne.n	80028d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	08da      	lsrs	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3208      	adds	r2, #8
 8002898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	220f      	movs	r2, #15
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	08da      	lsrs	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3208      	adds	r2, #8
 80028d2:	69b9      	ldr	r1, [r7, #24]
 80028d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0203 	and.w	r2, r3, #3
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80ae 	beq.w	8002a76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	4b5d      	ldr	r3, [pc, #372]	; (8002a94 <HAL_GPIO_Init+0x300>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	4a5c      	ldr	r2, [pc, #368]	; (8002a94 <HAL_GPIO_Init+0x300>)
 8002924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002928:	6453      	str	r3, [r2, #68]	; 0x44
 800292a:	4b5a      	ldr	r3, [pc, #360]	; (8002a94 <HAL_GPIO_Init+0x300>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002936:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <HAL_GPIO_Init+0x304>)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	220f      	movs	r2, #15
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a4f      	ldr	r2, [pc, #316]	; (8002a9c <HAL_GPIO_Init+0x308>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d025      	beq.n	80029ae <HAL_GPIO_Init+0x21a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4e      	ldr	r2, [pc, #312]	; (8002aa0 <HAL_GPIO_Init+0x30c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01f      	beq.n	80029aa <HAL_GPIO_Init+0x216>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4d      	ldr	r2, [pc, #308]	; (8002aa4 <HAL_GPIO_Init+0x310>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d019      	beq.n	80029a6 <HAL_GPIO_Init+0x212>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4c      	ldr	r2, [pc, #304]	; (8002aa8 <HAL_GPIO_Init+0x314>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0x20e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4b      	ldr	r2, [pc, #300]	; (8002aac <HAL_GPIO_Init+0x318>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00d      	beq.n	800299e <HAL_GPIO_Init+0x20a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4a      	ldr	r2, [pc, #296]	; (8002ab0 <HAL_GPIO_Init+0x31c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d007      	beq.n	800299a <HAL_GPIO_Init+0x206>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a49      	ldr	r2, [pc, #292]	; (8002ab4 <HAL_GPIO_Init+0x320>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_GPIO_Init+0x202>
 8002992:	2306      	movs	r3, #6
 8002994:	e00c      	b.n	80029b0 <HAL_GPIO_Init+0x21c>
 8002996:	2307      	movs	r3, #7
 8002998:	e00a      	b.n	80029b0 <HAL_GPIO_Init+0x21c>
 800299a:	2305      	movs	r3, #5
 800299c:	e008      	b.n	80029b0 <HAL_GPIO_Init+0x21c>
 800299e:	2304      	movs	r3, #4
 80029a0:	e006      	b.n	80029b0 <HAL_GPIO_Init+0x21c>
 80029a2:	2303      	movs	r3, #3
 80029a4:	e004      	b.n	80029b0 <HAL_GPIO_Init+0x21c>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e002      	b.n	80029b0 <HAL_GPIO_Init+0x21c>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_GPIO_Init+0x21c>
 80029ae:	2300      	movs	r3, #0
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	f002 0203 	and.w	r2, r2, #3
 80029b6:	0092      	lsls	r2, r2, #2
 80029b8:	4093      	lsls	r3, r2
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029c0:	4935      	ldr	r1, [pc, #212]	; (8002a98 <HAL_GPIO_Init+0x304>)
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	089b      	lsrs	r3, r3, #2
 80029c6:	3302      	adds	r3, #2
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ce:	4b3a      	ldr	r3, [pc, #232]	; (8002ab8 <HAL_GPIO_Init+0x324>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029f2:	4a31      	ldr	r2, [pc, #196]	; (8002ab8 <HAL_GPIO_Init+0x324>)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f8:	4b2f      	ldr	r3, [pc, #188]	; (8002ab8 <HAL_GPIO_Init+0x324>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a1c:	4a26      	ldr	r2, [pc, #152]	; (8002ab8 <HAL_GPIO_Init+0x324>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a22:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <HAL_GPIO_Init+0x324>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a46:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <HAL_GPIO_Init+0x324>)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a4c:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <HAL_GPIO_Init+0x324>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a70:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <HAL_GPIO_Init+0x324>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	61fb      	str	r3, [r7, #28]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	2b0f      	cmp	r3, #15
 8002a80:	f67f ae96 	bls.w	80027b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
 8002a88:	3724      	adds	r7, #36	; 0x24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40013800 	.word	0x40013800
 8002a9c:	40020000 	.word	0x40020000
 8002aa0:	40020400 	.word	0x40020400
 8002aa4:	40020800 	.word	0x40020800
 8002aa8:	40020c00 	.word	0x40020c00
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40021400 	.word	0x40021400
 8002ab4:	40021800 	.word	0x40021800
 8002ab8:	40013c00 	.word	0x40013c00

08002abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	807b      	strh	r3, [r7, #2]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002acc:	787b      	ldrb	r3, [r7, #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ad2:	887a      	ldrh	r2, [r7, #2]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ad8:	e003      	b.n	8002ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	041a      	lsls	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	619a      	str	r2, [r3, #24]
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b06:	4a05      	ldr	r2, [pc, #20]	; (8002b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f806 	bl	8002b20 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40013c00 	.word	0x40013c00

08002b20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e12b      	b.n	8002da2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff fa68 	bl	8002034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2224      	movs	r2, #36	; 0x24
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0201 	bic.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b9c:	f002 fc2e 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8002ba0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4a81      	ldr	r2, [pc, #516]	; (8002dac <HAL_I2C_Init+0x274>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d807      	bhi.n	8002bbc <HAL_I2C_Init+0x84>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4a80      	ldr	r2, [pc, #512]	; (8002db0 <HAL_I2C_Init+0x278>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	bf94      	ite	ls
 8002bb4:	2301      	movls	r3, #1
 8002bb6:	2300      	movhi	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	e006      	b.n	8002bca <HAL_I2C_Init+0x92>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4a7d      	ldr	r2, [pc, #500]	; (8002db4 <HAL_I2C_Init+0x27c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	bf94      	ite	ls
 8002bc4:	2301      	movls	r3, #1
 8002bc6:	2300      	movhi	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e0e7      	b.n	8002da2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a78      	ldr	r2, [pc, #480]	; (8002db8 <HAL_I2C_Init+0x280>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	0c9b      	lsrs	r3, r3, #18
 8002bdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a6a      	ldr	r2, [pc, #424]	; (8002dac <HAL_I2C_Init+0x274>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d802      	bhi.n	8002c0c <HAL_I2C_Init+0xd4>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	e009      	b.n	8002c20 <HAL_I2C_Init+0xe8>
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c12:	fb02 f303 	mul.w	r3, r2, r3
 8002c16:	4a69      	ldr	r2, [pc, #420]	; (8002dbc <HAL_I2C_Init+0x284>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	099b      	lsrs	r3, r3, #6
 8002c1e:	3301      	adds	r3, #1
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	430b      	orrs	r3, r1
 8002c26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	495c      	ldr	r1, [pc, #368]	; (8002dac <HAL_I2C_Init+0x274>)
 8002c3c:	428b      	cmp	r3, r1
 8002c3e:	d819      	bhi.n	8002c74 <HAL_I2C_Init+0x13c>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1e59      	subs	r1, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c4e:	1c59      	adds	r1, r3, #1
 8002c50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c54:	400b      	ands	r3, r1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_I2C_Init+0x138>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1e59      	subs	r1, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c68:	3301      	adds	r3, #1
 8002c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6e:	e051      	b.n	8002d14 <HAL_I2C_Init+0x1dc>
 8002c70:	2304      	movs	r3, #4
 8002c72:	e04f      	b.n	8002d14 <HAL_I2C_Init+0x1dc>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d111      	bne.n	8002ca0 <HAL_I2C_Init+0x168>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1e58      	subs	r0, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6859      	ldr	r1, [r3, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	440b      	add	r3, r1
 8002c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	e012      	b.n	8002cc6 <HAL_I2C_Init+0x18e>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1e58      	subs	r0, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	0099      	lsls	r1, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Init+0x196>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e022      	b.n	8002d14 <HAL_I2C_Init+0x1dc>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_I2C_Init+0x1bc>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1e58      	subs	r0, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6859      	ldr	r1, [r3, #4]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	440b      	add	r3, r1
 8002ce4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf2:	e00f      	b.n	8002d14 <HAL_I2C_Init+0x1dc>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1e58      	subs	r0, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	0099      	lsls	r1, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	6809      	ldr	r1, [r1, #0]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69da      	ldr	r2, [r3, #28]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6911      	ldr	r1, [r2, #16]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68d2      	ldr	r2, [r2, #12]
 8002d4e:	4311      	orrs	r1, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	430b      	orrs	r3, r1
 8002d56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	000186a0 	.word	0x000186a0
 8002db0:	001e847f 	.word	0x001e847f
 8002db4:	003d08ff 	.word	0x003d08ff
 8002db8:	431bde83 	.word	0x431bde83
 8002dbc:	10624dd3 	.word	0x10624dd3

08002dc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	460b      	mov	r3, r1
 8002dce:	817b      	strh	r3, [r7, #10]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dd4:	f7ff fbcc 	bl	8002570 <HAL_GetTick>
 8002dd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	f040 80e0 	bne.w	8002fa8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	2319      	movs	r3, #25
 8002dee:	2201      	movs	r2, #1
 8002df0:	4970      	ldr	r1, [pc, #448]	; (8002fb4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fc58 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e0d3      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_I2C_Master_Transmit+0x50>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e0cc      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1ea>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d007      	beq.n	8002e36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2221      	movs	r2, #33	; 0x21
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2210      	movs	r2, #16
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	893a      	ldrh	r2, [r7, #8]
 8002e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4a50      	ldr	r2, [pc, #320]	; (8002fb8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e78:	8979      	ldrh	r1, [r7, #10]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	6a3a      	ldr	r2, [r7, #32]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 fac2 	bl	8003408 <I2C_MasterRequestWrite>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e08d      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ea4:	e066      	b.n	8002f74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	6a39      	ldr	r1, [r7, #32]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fcd2 	bl	8003854 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00d      	beq.n	8002ed2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d107      	bne.n	8002ece <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ecc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e06b      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d11b      	bne.n	8002f48 <HAL_I2C_Master_Transmit+0x188>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d017      	beq.n	8002f48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	781a      	ldrb	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	6a39      	ldr	r1, [r7, #32]
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fcc2 	bl	80038d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00d      	beq.n	8002f74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d107      	bne.n	8002f70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e01a      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d194      	bne.n	8002ea6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e000      	b.n	8002faa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
  }
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	00100002 	.word	0x00100002
 8002fb8:	ffff0000 	.word	0xffff0000

08002fbc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08c      	sub	sp, #48	; 0x30
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	460b      	mov	r3, r1
 8002fca:	817b      	strh	r3, [r7, #10]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd0:	f7ff face 	bl	8002570 <HAL_GetTick>
 8002fd4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	f040 820b 	bne.w	80033fa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2319      	movs	r3, #25
 8002fea:	2201      	movs	r2, #1
 8002fec:	497c      	ldr	r1, [pc, #496]	; (80031e0 <HAL_I2C_Master_Receive+0x224>)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fb5a 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e1fe      	b.n	80033fc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_I2C_Master_Receive+0x50>
 8003008:	2302      	movs	r3, #2
 800300a:	e1f7      	b.n	80033fc <HAL_I2C_Master_Receive+0x440>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b01      	cmp	r3, #1
 8003020:	d007      	beq.n	8003032 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003040:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2222      	movs	r2, #34	; 0x22
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2210      	movs	r2, #16
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	893a      	ldrh	r2, [r7, #8]
 8003062:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4a5c      	ldr	r2, [pc, #368]	; (80031e4 <HAL_I2C_Master_Receive+0x228>)
 8003072:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003074:	8979      	ldrh	r1, [r7, #10]
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 fa46 	bl	800350c <I2C_MasterRequestRead>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e1b8      	b.n	80033fc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308e:	2b00      	cmp	r3, #0
 8003090:	d113      	bne.n	80030ba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	623b      	str	r3, [r7, #32]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	623b      	str	r3, [r7, #32]
 80030a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	e18c      	b.n	80033d4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d11b      	bne.n	80030fa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	e16c      	b.n	80033d4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d11b      	bne.n	800313a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003110:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003120:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003122:	2300      	movs	r3, #0
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	e14c      	b.n	80033d4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003148:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003160:	e138      	b.n	80033d4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	2b03      	cmp	r3, #3
 8003168:	f200 80f1 	bhi.w	800334e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003170:	2b01      	cmp	r3, #1
 8003172:	d123      	bne.n	80031bc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003176:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fbed 	bl	8003958 <I2C_WaitOnRXNEFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e139      	b.n	80033fc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031ba:	e10b      	b.n	80033d4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d14e      	bne.n	8003262 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	2200      	movs	r2, #0
 80031cc:	4906      	ldr	r1, [pc, #24]	; (80031e8 <HAL_I2C_Master_Receive+0x22c>)
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fa6a 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e10e      	b.n	80033fc <HAL_I2C_Master_Receive+0x440>
 80031de:	bf00      	nop
 80031e0:	00100002 	.word	0x00100002
 80031e4:	ffff0000 	.word	0xffff0000
 80031e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691a      	ldr	r2, [r3, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003260:	e0b8      	b.n	80033d4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	2200      	movs	r2, #0
 800326a:	4966      	ldr	r1, [pc, #408]	; (8003404 <HAL_I2C_Master_Receive+0x448>)
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fa1b 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0bf      	b.n	80033fc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c4:	2200      	movs	r2, #0
 80032c6:	494f      	ldr	r1, [pc, #316]	; (8003404 <HAL_I2C_Master_Receive+0x448>)
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 f9ed 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e091      	b.n	80033fc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800334c:	e042      	b.n	80033d4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003350:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 fb00 	bl	8003958 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e04c      	b.n	80033fc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d118      	bne.n	80033d4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033be:	3b01      	subs	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f47f aec2 	bne.w	8003162 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3728      	adds	r7, #40	; 0x28
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	00010004 	.word	0x00010004

08003408 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	460b      	mov	r3, r1
 8003416:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2b08      	cmp	r3, #8
 8003422:	d006      	beq.n	8003432 <I2C_MasterRequestWrite+0x2a>
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d003      	beq.n	8003432 <I2C_MasterRequestWrite+0x2a>
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003430:	d108      	bne.n	8003444 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e00b      	b.n	800345c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	2b12      	cmp	r3, #18
 800344a:	d107      	bne.n	800345c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800345a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f91d 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003482:	d103      	bne.n	800348c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e035      	b.n	80034fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003498:	d108      	bne.n	80034ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800349a:	897b      	ldrh	r3, [r7, #10]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034a8:	611a      	str	r2, [r3, #16]
 80034aa:	e01b      	b.n	80034e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034ac:	897b      	ldrh	r3, [r7, #10]
 80034ae:	11db      	asrs	r3, r3, #7
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f003 0306 	and.w	r3, r3, #6
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f063 030f 	orn	r3, r3, #15
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	490e      	ldr	r1, [pc, #56]	; (8003504 <I2C_MasterRequestWrite+0xfc>)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f943 	bl	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e010      	b.n	80034fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034da:	897b      	ldrh	r3, [r7, #10]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	4907      	ldr	r1, [pc, #28]	; (8003508 <I2C_MasterRequestWrite+0x100>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f933 	bl	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	00010008 	.word	0x00010008
 8003508:	00010002 	.word	0x00010002

0800350c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af02      	add	r7, sp, #8
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	460b      	mov	r3, r1
 800351a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003530:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d006      	beq.n	8003546 <I2C_MasterRequestRead+0x3a>
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d003      	beq.n	8003546 <I2C_MasterRequestRead+0x3a>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003544:	d108      	bne.n	8003558 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e00b      	b.n	8003570 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	2b11      	cmp	r3, #17
 800355e:	d107      	bne.n	8003570 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800356e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f893 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00d      	beq.n	80035a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003596:	d103      	bne.n	80035a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e079      	b.n	8003698 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ac:	d108      	bne.n	80035c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	611a      	str	r2, [r3, #16]
 80035be:	e05f      	b.n	8003680 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035c0:	897b      	ldrh	r3, [r7, #10]
 80035c2:	11db      	asrs	r3, r3, #7
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f003 0306 	and.w	r3, r3, #6
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f063 030f 	orn	r3, r3, #15
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4930      	ldr	r1, [pc, #192]	; (80036a0 <I2C_MasterRequestRead+0x194>)
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f8b9 	bl	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e054      	b.n	8003698 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035ee:	897b      	ldrh	r3, [r7, #10]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4929      	ldr	r1, [pc, #164]	; (80036a4 <I2C_MasterRequestRead+0x198>)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f8a9 	bl	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e044      	b.n	8003698 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003632:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f831 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365a:	d103      	bne.n	8003664 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003662:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e017      	b.n	8003698 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003668:	897b      	ldrh	r3, [r7, #10]
 800366a:	11db      	asrs	r3, r3, #7
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f003 0306 	and.w	r3, r3, #6
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f063 030e 	orn	r3, r3, #14
 8003678:	b2da      	uxtb	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	4907      	ldr	r1, [pc, #28]	; (80036a4 <I2C_MasterRequestRead+0x198>)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f865 	bl	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	00010008 	.word	0x00010008
 80036a4:	00010002 	.word	0x00010002

080036a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	4613      	mov	r3, r2
 80036b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b8:	e025      	b.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d021      	beq.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c2:	f7fe ff55 	bl	8002570 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d302      	bcc.n	80036d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d116      	bne.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e023      	b.n	800374e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	0c1b      	lsrs	r3, r3, #16
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10d      	bne.n	800372c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	43da      	mvns	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4013      	ands	r3, r2
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	bf0c      	ite	eq
 8003722:	2301      	moveq	r3, #1
 8003724:	2300      	movne	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	e00c      	b.n	8003746 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	43da      	mvns	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4013      	ands	r3, r2
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	429a      	cmp	r2, r3
 800374a:	d0b6      	beq.n	80036ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003764:	e051      	b.n	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003774:	d123      	bne.n	80037be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003784:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800378e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f043 0204 	orr.w	r2, r3, #4
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e046      	b.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d021      	beq.n	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7fe fed3 	bl	8002570 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d116      	bne.n	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e020      	b.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d10c      	bne.n	800382e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4013      	ands	r3, r2
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf14      	ite	ne
 8003826:	2301      	movne	r3, #1
 8003828:	2300      	moveq	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	e00b      	b.n	8003846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	43da      	mvns	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4013      	ands	r3, r2
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d18d      	bne.n	8003766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003860:	e02d      	b.n	80038be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f8ce 	bl	8003a04 <I2C_IsAcknowledgeFailed>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e02d      	b.n	80038ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d021      	beq.n	80038be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387a:	f7fe fe79 	bl	8002570 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d116      	bne.n	80038be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f043 0220 	orr.w	r2, r3, #32
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e007      	b.n	80038ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	2b80      	cmp	r3, #128	; 0x80
 80038ca:	d1ca      	bne.n	8003862 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038e2:	e02d      	b.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f88d 	bl	8003a04 <I2C_IsAcknowledgeFailed>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e02d      	b.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d021      	beq.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fc:	f7fe fe38 	bl	8002570 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	429a      	cmp	r2, r3
 800390a:	d302      	bcc.n	8003912 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d116      	bne.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e007      	b.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b04      	cmp	r3, #4
 800394c:	d1ca      	bne.n	80038e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003964:	e042      	b.n	80039ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b10      	cmp	r3, #16
 8003972:	d119      	bne.n	80039a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0210 	mvn.w	r2, #16
 800397c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e029      	b.n	80039fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a8:	f7fe fde2 	bl	8002570 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d302      	bcc.n	80039be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d116      	bne.n	80039ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f043 0220 	orr.w	r2, r3, #32
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e007      	b.n	80039fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	d1b5      	bne.n	8003966 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1a:	d11b      	bne.n	8003a54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	f043 0204 	orr.w	r2, r3, #4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a64:	b08f      	sub	sp, #60	; 0x3c
 8003a66:	af0a      	add	r7, sp, #40	; 0x28
 8003a68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e116      	b.n	8003ca2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f006 fed0 	bl	800a834 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2203      	movs	r2, #3
 8003a98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f003 fa29 	bl	8006f0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	687e      	ldr	r6, [r7, #4]
 8003ac0:	466d      	mov	r5, sp
 8003ac2:	f106 0410 	add.w	r4, r6, #16
 8003ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ace:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ad2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ad6:	1d33      	adds	r3, r6, #4
 8003ad8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ada:	6838      	ldr	r0, [r7, #0]
 8003adc:	f003 f900 	bl	8006ce0 <USB_CoreInit>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0d7      	b.n	8003ca2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2100      	movs	r1, #0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f003 fa17 	bl	8006f2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003afe:	2300      	movs	r3, #0
 8003b00:	73fb      	strb	r3, [r7, #15]
 8003b02:	e04a      	b.n	8003b9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	333d      	adds	r3, #61	; 0x3d
 8003b14:	2201      	movs	r2, #1
 8003b16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	333c      	adds	r3, #60	; 0x3c
 8003b28:	7bfa      	ldrb	r2, [r7, #15]
 8003b2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	b298      	uxth	r0, r3
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	3344      	adds	r3, #68	; 0x44
 8003b40:	4602      	mov	r2, r0
 8003b42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	3340      	adds	r3, #64	; 0x40
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b58:	7bfa      	ldrb	r2, [r7, #15]
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	3348      	adds	r3, #72	; 0x48
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b6c:	7bfa      	ldrb	r2, [r7, #15]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	334c      	adds	r3, #76	; 0x4c
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b80:	7bfa      	ldrb	r2, [r7, #15]
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	3354      	adds	r3, #84	; 0x54
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	3301      	adds	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d3af      	bcc.n	8003b04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	e044      	b.n	8003c34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003baa:	7bfa      	ldrb	r2, [r7, #15]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bc0:	7bfa      	ldrb	r2, [r7, #15]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003bd2:	7bfa      	ldrb	r2, [r7, #15]
 8003bd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bd6:	7bfa      	ldrb	r2, [r7, #15]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c02:	7bfa      	ldrb	r2, [r7, #15]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	3301      	adds	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
 8003c34:	7bfa      	ldrb	r2, [r7, #15]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d3b5      	bcc.n	8003baa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	687e      	ldr	r6, [r7, #4]
 8003c46:	466d      	mov	r5, sp
 8003c48:	f106 0410 	add.w	r4, r6, #16
 8003c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c58:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c5c:	1d33      	adds	r3, r6, #4
 8003c5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c60:	6838      	ldr	r0, [r7, #0]
 8003c62:	f003 f9af 	bl	8006fc4 <USB_DevInit>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e014      	b.n	8003ca2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d102      	bne.n	8003c96 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f001 f98b 	bl	8004fac <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f004 faf1 	bl	8008282 <USB_DevDisconnect>

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003caa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_PCD_Start+0x1c>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e020      	b.n	8003d08 <HAL_PCD_Start+0x5e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d109      	bne.n	8003cea <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d005      	beq.n	8003cea <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f003 f8fa 	bl	8006ee8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f004 faa1 	bl	8008240 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b08d      	sub	sp, #52	; 0x34
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f004 fb5f 	bl	80083ea <USB_GetMode>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f040 84b7 	bne.w	80046a2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f004 fac3 	bl	80082c4 <USB_ReadInterrupts>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 84ad 	beq.w	80046a0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	0a1b      	lsrs	r3, r3, #8
 8003d50:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f004 fab0 	bl	80082c4 <USB_ReadInterrupts>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d107      	bne.n	8003d7e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f002 0202 	and.w	r2, r2, #2
 8003d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f004 fa9e 	bl	80082c4 <USB_ReadInterrupts>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b10      	cmp	r3, #16
 8003d90:	d161      	bne.n	8003e56 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699a      	ldr	r2, [r3, #24]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0210 	bic.w	r2, r2, #16
 8003da0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f003 020f 	and.w	r2, r3, #15
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	0c5b      	lsrs	r3, r3, #17
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d124      	bne.n	8003e18 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d035      	beq.n	8003e46 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	091b      	lsrs	r3, r3, #4
 8003de2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003de4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	6a38      	ldr	r0, [r7, #32]
 8003dee:	f004 f8d5 	bl	8007f9c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dfe:	441a      	add	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	6a1a      	ldr	r2, [r3, #32]
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	091b      	lsrs	r3, r3, #4
 8003e0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e10:	441a      	add	r2, r3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	621a      	str	r2, [r3, #32]
 8003e16:	e016      	b.n	8003e46 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	0c5b      	lsrs	r3, r3, #17
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	2b06      	cmp	r3, #6
 8003e22:	d110      	bne.n	8003e46 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6a38      	ldr	r0, [r7, #32]
 8003e30:	f004 f8b4 	bl	8007f9c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	6a1a      	ldr	r2, [r3, #32]
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	091b      	lsrs	r3, r3, #4
 8003e3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e40:	441a      	add	r2, r3
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699a      	ldr	r2, [r3, #24]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0210 	orr.w	r2, r2, #16
 8003e54:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f004 fa32 	bl	80082c4 <USB_ReadInterrupts>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e6a:	f040 80a7 	bne.w	8003fbc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f004 fa37 	bl	80082ea <USB_ReadDevAllOutEpInterrupt>
 8003e7c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003e7e:	e099      	b.n	8003fb4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 808e 	beq.w	8003fa8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	4611      	mov	r1, r2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f004 fa5b 	bl	8008352 <USB_ReadDevOutEPInterrupt>
 8003e9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00c      	beq.n	8003ec2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003eba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 feef 	bl	8004ca0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00c      	beq.n	8003ee6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2308      	movs	r3, #8
 8003edc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 ffc5 	bl	8004e70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efc:	461a      	mov	r2, r3
 8003efe:	2310      	movs	r3, #16
 8003f00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d030      	beq.n	8003f6e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f14:	2b80      	cmp	r3, #128	; 0x80
 8003f16:	d109      	bne.n	8003f2c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f2a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2e:	4613      	mov	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3304      	adds	r3, #4
 8003f40:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	78db      	ldrb	r3, [r3, #3]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d108      	bne.n	8003f5c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	4619      	mov	r1, r3
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f006 fd8a 	bl	800aa70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f84:	461a      	mov	r2, r3
 8003f86:	2320      	movs	r3, #32
 8003f88:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fa6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	3301      	adds	r3, #1
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f47f af62 	bne.w	8003e80 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f004 f97f 	bl	80082c4 <USB_ReadInterrupts>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fd0:	f040 80db 	bne.w	800418a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f004 f9a0 	bl	800831e <USB_ReadDevAllInEpInterrupt>
 8003fde:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003fe4:	e0cd      	b.n	8004182 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f000 80c2 	beq.w	8004176 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f004 f9c6 	bl	800838e <USB_ReadDevInEPInterrupt>
 8004002:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d057      	beq.n	80040be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	2201      	movs	r2, #1
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	43db      	mvns	r3, r3
 8004028:	69f9      	ldr	r1, [r7, #28]
 800402a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800402e:	4013      	ands	r3, r2
 8004030:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403e:	461a      	mov	r2, r3
 8004040:	2301      	movs	r3, #1
 8004042:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d132      	bne.n	80040b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004050:	4613      	mov	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	334c      	adds	r3, #76	; 0x4c
 800405c:	6819      	ldr	r1, [r3, #0]
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4403      	add	r3, r0
 800406c:	3348      	adds	r3, #72	; 0x48
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4419      	add	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004076:	4613      	mov	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4403      	add	r3, r0
 8004080:	334c      	adds	r3, #76	; 0x4c
 8004082:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	2b00      	cmp	r3, #0
 8004088:	d113      	bne.n	80040b2 <HAL_PCD_IRQHandler+0x3a2>
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408e:	4613      	mov	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	3354      	adds	r3, #84	; 0x54
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d108      	bne.n	80040b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6818      	ldr	r0, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040aa:	461a      	mov	r2, r3
 80040ac:	2101      	movs	r1, #1
 80040ae:	f004 f9cd 	bl	800844c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f006 fc5e 	bl	800a97a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d4:	461a      	mov	r2, r3
 80040d6:	2308      	movs	r3, #8
 80040d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f0:	461a      	mov	r2, r3
 80040f2:	2310      	movs	r3, #16
 80040f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410c:	461a      	mov	r2, r3
 800410e:	2340      	movs	r3, #64	; 0x40
 8004110:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d023      	beq.n	8004164 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800411c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800411e:	6a38      	ldr	r0, [r7, #32]
 8004120:	f003 f8ae 	bl	8007280 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	3338      	adds	r3, #56	; 0x38
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	4413      	add	r3, r2
 8004134:	3304      	adds	r3, #4
 8004136:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	78db      	ldrb	r3, [r3, #3]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d108      	bne.n	8004152 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2200      	movs	r2, #0
 8004144:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	b2db      	uxtb	r3, r3
 800414a:	4619      	mov	r1, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f006 fca1 	bl	800aa94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415e:	461a      	mov	r2, r3
 8004160:	2302      	movs	r3, #2
 8004162:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800416e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fd08 	bl	8004b86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	3301      	adds	r3, #1
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	f47f af2e 	bne.w	8003fe6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f004 f898 	bl	80082c4 <USB_ReadInterrupts>
 8004194:	4603      	mov	r3, r0
 8004196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800419a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800419e:	d122      	bne.n	80041e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ae:	f023 0301 	bic.w	r3, r3, #1
 80041b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d108      	bne.n	80041d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80041c6:	2100      	movs	r1, #0
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 ff13 	bl	8004ff4 <HAL_PCDEx_LPM_Callback>
 80041ce:	e002      	b.n	80041d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f006 fc3f 	bl	800aa54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695a      	ldr	r2, [r3, #20]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80041e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f004 f86a 	bl	80082c4 <USB_ReadInterrupts>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041fa:	d112      	bne.n	8004222 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b01      	cmp	r3, #1
 800420a:	d102      	bne.n	8004212 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f006 fbfb 	bl	800aa08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004220:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f004 f84c 	bl	80082c4 <USB_ReadInterrupts>
 800422c:	4603      	mov	r3, r0
 800422e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004236:	d121      	bne.n	800427c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004246:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d111      	bne.n	8004276 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	089b      	lsrs	r3, r3, #2
 8004262:	f003 020f 	and.w	r2, r3, #15
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800426c:	2101      	movs	r1, #1
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fec0 	bl	8004ff4 <HAL_PCDEx_LPM_Callback>
 8004274:	e002      	b.n	800427c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f006 fbc6 	bl	800aa08 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f004 f81f 	bl	80082c4 <USB_ReadInterrupts>
 8004286:	4603      	mov	r3, r0
 8004288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800428c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004290:	f040 80b7 	bne.w	8004402 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2110      	movs	r1, #16
 80042ae:	4618      	mov	r0, r3
 80042b0:	f002 ffe6 	bl	8007280 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b4:	2300      	movs	r3, #0
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b8:	e046      	b.n	8004348 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c6:	461a      	mov	r2, r3
 80042c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042de:	0151      	lsls	r1, r2, #5
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	440a      	add	r2, r1
 80042e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fa:	461a      	mov	r2, r3
 80042fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004300:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	4413      	add	r3, r2
 800430a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004312:	0151      	lsls	r1, r2, #5
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	440a      	add	r2, r1
 8004318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800431c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004320:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4413      	add	r3, r2
 800432a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004332:	0151      	lsls	r1, r2, #5
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	440a      	add	r2, r1
 8004338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800433c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004340:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	3301      	adds	r3, #1
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800434e:	429a      	cmp	r2, r3
 8004350:	d3b3      	bcc.n	80042ba <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004360:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004364:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	2b00      	cmp	r3, #0
 800436c:	d016      	beq.n	800439c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437e:	f043 030b 	orr.w	r3, r3, #11
 8004382:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004394:	f043 030b 	orr.w	r3, r3, #11
 8004398:	6453      	str	r3, [r2, #68]	; 0x44
 800439a:	e015      	b.n	80043c8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80043b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043c2:	f043 030b 	orr.w	r3, r3, #11
 80043c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80043da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043ec:	461a      	mov	r2, r3
 80043ee:	f004 f82d 	bl	800844c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004400:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f003 ff5c 	bl	80082c4 <USB_ReadInterrupts>
 800440c:	4603      	mov	r3, r0
 800440e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004416:	d124      	bne.n	8004462 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f003 fff2 	bl	8008406 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f002 ffa7 	bl	800737a <USB_GetDevSpeed>
 800442c:	4603      	mov	r3, r0
 800442e:	461a      	mov	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681c      	ldr	r4, [r3, #0]
 8004438:	f000 ffd4 	bl	80053e4 <HAL_RCC_GetHCLKFreq>
 800443c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004442:	b2db      	uxtb	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	4620      	mov	r0, r4
 8004448:	f002 fcac 	bl	8006da4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f006 fabc 	bl	800a9ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004460:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f003 ff2c 	bl	80082c4 <USB_ReadInterrupts>
 800446c:	4603      	mov	r3, r0
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b08      	cmp	r3, #8
 8004474:	d10a      	bne.n	800448c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f006 fa99 	bl	800a9ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f002 0208 	and.w	r2, r2, #8
 800448a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f003 ff17 	bl	80082c4 <USB_ReadInterrupts>
 8004496:	4603      	mov	r3, r0
 8004498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449c:	2b80      	cmp	r3, #128	; 0x80
 800449e:	d122      	bne.n	80044e6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044ac:	2301      	movs	r3, #1
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
 80044b0:	e014      	b.n	80044dc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b6:	4613      	mov	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d105      	bne.n	80044d6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	4619      	mov	r1, r3
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fb27 	bl	8004b24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	3301      	adds	r3, #1
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d3e5      	bcc.n	80044b2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f003 feea 	bl	80082c4 <USB_ReadInterrupts>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fa:	d13b      	bne.n	8004574 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044fc:	2301      	movs	r3, #1
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004500:	e02b      	b.n	800455a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004516:	4613      	mov	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	3340      	adds	r3, #64	; 0x40
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d115      	bne.n	8004554 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004528:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800452a:	2b00      	cmp	r3, #0
 800452c:	da12      	bge.n	8004554 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004532:	4613      	mov	r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	333f      	adds	r3, #63	; 0x3f
 800453e:	2201      	movs	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	b2db      	uxtb	r3, r3
 8004546:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800454a:	b2db      	uxtb	r3, r3
 800454c:	4619      	mov	r1, r3
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fae8 	bl	8004b24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	3301      	adds	r3, #1
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004560:	429a      	cmp	r2, r3
 8004562:	d3ce      	bcc.n	8004502 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695a      	ldr	r2, [r3, #20]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004572:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f003 fea3 	bl	80082c4 <USB_ReadInterrupts>
 800457e:	4603      	mov	r3, r0
 8004580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004588:	d155      	bne.n	8004636 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800458a:	2301      	movs	r3, #1
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
 800458e:	e045      	b.n	800461c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a4:	4613      	mov	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d12e      	bne.n	8004616 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	da2b      	bge.n	8004616 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80045ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d121      	bne.n	8004616 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800460e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004612:	6053      	str	r3, [r2, #4]
            break;
 8004614:	e007      	b.n	8004626 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	3301      	adds	r3, #1
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004622:	429a      	cmp	r2, r3
 8004624:	d3b4      	bcc.n	8004590 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695a      	ldr	r2, [r3, #20]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f003 fe42 	bl	80082c4 <USB_ReadInterrupts>
 8004640:	4603      	mov	r3, r0
 8004642:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464a:	d10a      	bne.n	8004662 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f006 fa33 	bl	800aab8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695a      	ldr	r2, [r3, #20]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004660:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f003 fe2c 	bl	80082c4 <USB_ReadInterrupts>
 800466c:	4603      	mov	r3, r0
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b04      	cmp	r3, #4
 8004674:	d115      	bne.n	80046a2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f006 fa23 	bl	800aad4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6859      	ldr	r1, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
 800469e:	e000      	b.n	80046a2 <HAL_PCD_IRQHandler+0x992>
      return;
 80046a0:	bf00      	nop
    }
  }
}
 80046a2:	3734      	adds	r7, #52	; 0x34
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd90      	pop	{r4, r7, pc}

080046a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_PCD_SetAddress+0x1a>
 80046be:	2302      	movs	r3, #2
 80046c0:	e013      	b.n	80046ea <HAL_PCD_SetAddress+0x42>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	78fa      	ldrb	r2, [r7, #3]
 80046ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	4611      	mov	r1, r2
 80046da:	4618      	mov	r0, r3
 80046dc:	f003 fd8a 	bl	80081f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	4608      	mov	r0, r1
 80046fc:	4611      	mov	r1, r2
 80046fe:	461a      	mov	r2, r3
 8004700:	4603      	mov	r3, r0
 8004702:	70fb      	strb	r3, [r7, #3]
 8004704:	460b      	mov	r3, r1
 8004706:	803b      	strh	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004714:	2b00      	cmp	r3, #0
 8004716:	da0f      	bge.n	8004738 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	f003 020f 	and.w	r2, r3, #15
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	3338      	adds	r3, #56	; 0x38
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	4413      	add	r3, r2
 800472c:	3304      	adds	r3, #4
 800472e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	705a      	strb	r2, [r3, #1]
 8004736:	e00f      	b.n	8004758 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	f003 020f 	and.w	r2, r3, #15
 800473e:	4613      	mov	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	4413      	add	r3, r2
 800474e:	3304      	adds	r3, #4
 8004750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004764:	883a      	ldrh	r2, [r7, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	78ba      	ldrb	r2, [r7, #2]
 800476e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	785b      	ldrb	r3, [r3, #1]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d004      	beq.n	8004782 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004782:	78bb      	ldrb	r3, [r7, #2]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d102      	bne.n	800478e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_PCD_EP_Open+0xaa>
 8004798:	2302      	movs	r3, #2
 800479a:	e00e      	b.n	80047ba <HAL_PCD_EP_Open+0xc8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68f9      	ldr	r1, [r7, #12]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f002 fe0a 	bl	80073c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80047b8:	7afb      	ldrb	r3, [r7, #11]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	460b      	mov	r3, r1
 80047cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	da0f      	bge.n	80047f6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047d6:	78fb      	ldrb	r3, [r7, #3]
 80047d8:	f003 020f 	and.w	r2, r3, #15
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	3338      	adds	r3, #56	; 0x38
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	4413      	add	r3, r2
 80047ea:	3304      	adds	r3, #4
 80047ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	705a      	strb	r2, [r3, #1]
 80047f4:	e00f      	b.n	8004816 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047f6:	78fb      	ldrb	r3, [r7, #3]
 80047f8:	f003 020f 	and.w	r2, r3, #15
 80047fc:	4613      	mov	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	4413      	add	r3, r2
 800480c:	3304      	adds	r3, #4
 800480e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004816:	78fb      	ldrb	r3, [r7, #3]
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	b2da      	uxtb	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_PCD_EP_Close+0x6e>
 800482c:	2302      	movs	r3, #2
 800482e:	e00e      	b.n	800484e <HAL_PCD_EP_Close+0x8c>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68f9      	ldr	r1, [r7, #12]
 800483e:	4618      	mov	r0, r3
 8004840:	f002 fe48 	bl	80074d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b086      	sub	sp, #24
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
 8004862:	460b      	mov	r3, r1
 8004864:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004866:	7afb      	ldrb	r3, [r7, #11]
 8004868:	f003 020f 	and.w	r2, r3, #15
 800486c:	4613      	mov	r3, r2
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	3304      	adds	r3, #4
 800487e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2200      	movs	r2, #0
 8004890:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2200      	movs	r2, #0
 8004896:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004898:	7afb      	ldrb	r3, [r7, #11]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d102      	bne.n	80048b2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048b2:	7afb      	ldrb	r3, [r7, #11]
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d109      	bne.n	80048d0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	461a      	mov	r2, r3
 80048c8:	6979      	ldr	r1, [r7, #20]
 80048ca:	f003 f927 	bl	8007b1c <USB_EP0StartXfer>
 80048ce:	e008      	b.n	80048e2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	6979      	ldr	r1, [r7, #20]
 80048de:	f002 fed5 	bl	800768c <USB_EPStartXfer>
  }

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	f003 020f 	and.w	r2, r3, #15
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800490e:	681b      	ldr	r3, [r3, #0]
}
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	607a      	str	r2, [r7, #4]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	460b      	mov	r3, r1
 800492a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800492c:	7afb      	ldrb	r3, [r7, #11]
 800492e:	f003 020f 	and.w	r2, r3, #15
 8004932:	4613      	mov	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	3338      	adds	r3, #56	; 0x38
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	3304      	adds	r3, #4
 8004942:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2200      	movs	r2, #0
 8004954:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2201      	movs	r2, #1
 800495a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800495c:	7afb      	ldrb	r3, [r7, #11]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	b2da      	uxtb	r2, r3
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d102      	bne.n	8004976 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004976:	7afb      	ldrb	r3, [r7, #11]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	2b00      	cmp	r3, #0
 800497e:	d109      	bne.n	8004994 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	461a      	mov	r2, r3
 800498c:	6979      	ldr	r1, [r7, #20]
 800498e:	f003 f8c5 	bl	8007b1c <USB_EP0StartXfer>
 8004992:	e008      	b.n	80049a6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	461a      	mov	r2, r3
 80049a0:	6979      	ldr	r1, [r7, #20]
 80049a2:	f002 fe73 	bl	800768c <USB_EPStartXfer>
  }

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	f003 020f 	and.w	r2, r3, #15
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d901      	bls.n	80049ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e050      	b.n	8004a70 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	da0f      	bge.n	80049f6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	f003 020f 	and.w	r2, r3, #15
 80049dc:	4613      	mov	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	3338      	adds	r3, #56	; 0x38
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	4413      	add	r3, r2
 80049ea:	3304      	adds	r3, #4
 80049ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	705a      	strb	r2, [r3, #1]
 80049f4:	e00d      	b.n	8004a12 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	4613      	mov	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	4413      	add	r3, r2
 8004a08:	3304      	adds	r3, #4
 8004a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_PCD_EP_SetStall+0x82>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e01e      	b.n	8004a70 <HAL_PCD_EP_SetStall+0xc0>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68f9      	ldr	r1, [r7, #12]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f003 fb03 	bl	800804c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	b2d9      	uxtb	r1, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a60:	461a      	mov	r2, r3
 8004a62:	f003 fcf3 	bl	800844c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	f003 020f 	and.w	r2, r3, #15
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d901      	bls.n	8004a96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e042      	b.n	8004b1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	da0f      	bge.n	8004abe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	f003 020f 	and.w	r2, r3, #15
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	3338      	adds	r3, #56	; 0x38
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	705a      	strb	r2, [r3, #1]
 8004abc:	e00f      	b.n	8004ade <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	f003 020f 	and.w	r2, r3, #15
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_PCD_EP_ClrStall+0x86>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e00e      	b.n	8004b1c <HAL_PCD_EP_ClrStall+0xa4>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68f9      	ldr	r1, [r7, #12]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f003 fb0b 	bl	8008128 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	da0c      	bge.n	8004b52 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	f003 020f 	and.w	r2, r3, #15
 8004b3e:	4613      	mov	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	3338      	adds	r3, #56	; 0x38
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	e00c      	b.n	8004b6c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	f003 020f 	and.w	r2, r3, #15
 8004b58:	4613      	mov	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	4413      	add	r3, r2
 8004b68:	3304      	adds	r3, #4
 8004b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68f9      	ldr	r1, [r7, #12]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f003 f92a 	bl	8007dcc <USB_EPStopXfer>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b7c:	7afb      	ldrb	r3, [r7, #11]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b08a      	sub	sp, #40	; 0x28
 8004b8a:	af02      	add	r7, sp, #8
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	3338      	adds	r3, #56	; 0x38
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	3304      	adds	r3, #4
 8004bac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a1a      	ldr	r2, [r3, #32]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d901      	bls.n	8004bbe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e06c      	b.n	8004c98 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d902      	bls.n	8004bda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3303      	adds	r3, #3
 8004bde:	089b      	lsrs	r3, r3, #2
 8004be0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004be2:	e02b      	b.n	8004c3c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	699a      	ldr	r2, [r3, #24]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d902      	bls.n	8004c00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	3303      	adds	r3, #3
 8004c04:	089b      	lsrs	r3, r3, #2
 8004c06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6919      	ldr	r1, [r3, #16]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	6978      	ldr	r0, [r7, #20]
 8004c20:	f003 f97e 	bl	8007f20 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	441a      	add	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a1a      	ldr	r2, [r3, #32]
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	441a      	add	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d809      	bhi.n	8004c66 <PCD_WriteEmptyTxFifo+0xe0>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a1a      	ldr	r2, [r3, #32]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d203      	bcs.n	8004c66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1be      	bne.n	8004be4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	699a      	ldr	r2, [r3, #24]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d811      	bhi.n	8004c96 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	2201      	movs	r2, #1
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	6939      	ldr	r1, [r7, #16]
 8004c8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c92:	4013      	ands	r3, r2
 8004c94:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3720      	adds	r7, #32
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	333c      	adds	r3, #60	; 0x3c
 8004cb8:	3304      	adds	r3, #4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d17b      	bne.n	8004dce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d015      	beq.n	8004d0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	4a61      	ldr	r2, [pc, #388]	; (8004e68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	f240 80b9 	bls.w	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80b3 	beq.w	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d02:	461a      	mov	r2, r3
 8004d04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d08:	6093      	str	r3, [r2, #8]
 8004d0a:	e0a7      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d009      	beq.n	8004d2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	461a      	mov	r2, r3
 8004d24:	2320      	movs	r3, #32
 8004d26:	6093      	str	r3, [r2, #8]
 8004d28:	e098      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f040 8093 	bne.w	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	4a4b      	ldr	r2, [pc, #300]	; (8004e68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d90f      	bls.n	8004d5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d54:	461a      	mov	r2, r3
 8004d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5a:	6093      	str	r3, [r2, #8]
 8004d5c:	e07e      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	4413      	add	r3, r2
 8004d70:	3304      	adds	r3, #4
 8004d72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	69da      	ldr	r2, [r3, #28]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	0159      	lsls	r1, r3, #5
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	440b      	add	r3, r1
 8004d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d8a:	1ad2      	subs	r2, r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d114      	bne.n	8004dc0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004da8:	461a      	mov	r2, r3
 8004daa:	2101      	movs	r1, #1
 8004dac:	f003 fb4e 	bl	800844c <USB_EP0_OutStart>
 8004db0:	e006      	b.n	8004dc0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	441a      	add	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f005 fdbc 	bl	800a944 <HAL_PCD_DataOutStageCallback>
 8004dcc:	e046      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d124      	bne.n	8004e20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dec:	461a      	mov	r2, r3
 8004dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004df2:	6093      	str	r3, [r2, #8]
 8004df4:	e032      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	2320      	movs	r3, #32
 8004e10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f005 fd93 	bl	800a944 <HAL_PCD_DataOutStageCallback>
 8004e1e:	e01d      	b.n	8004e5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d114      	bne.n	8004e50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d108      	bne.n	8004e50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	f003 fafe 	bl	800844c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f005 fd74 	bl	800a944 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	4f54300a 	.word	0x4f54300a
 8004e6c:	4f54310a 	.word	0x4f54310a

08004e70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	333c      	adds	r3, #60	; 0x3c
 8004e88:	3304      	adds	r3, #4
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a15      	ldr	r2, [pc, #84]	; (8004ef8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d90e      	bls.n	8004ec4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d009      	beq.n	8004ec4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ec2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f005 fd2b 	bl	800a920 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a0a      	ldr	r2, [pc, #40]	; (8004ef8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d90c      	bls.n	8004eec <PCD_EP_OutSetupPacket_int+0x7c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d108      	bne.n	8004eec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	f003 fab0 	bl	800844c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	4f54300a 	.word	0x4f54300a

08004efc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d107      	bne.n	8004f2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f1a:	883b      	ldrh	r3, [r7, #0]
 8004f1c:	0419      	lsls	r1, r3, #16
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	629a      	str	r2, [r3, #40]	; 0x28
 8004f28:	e028      	b.n	8004f7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	0c1b      	lsrs	r3, r3, #16
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	4413      	add	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73fb      	strb	r3, [r7, #15]
 8004f3c:	e00d      	b.n	8004f5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	3340      	adds	r3, #64	; 0x40
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	0c1b      	lsrs	r3, r3, #16
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	3301      	adds	r3, #1
 8004f58:	73fb      	strb	r3, [r7, #15]
 8004f5a:	7bfa      	ldrb	r2, [r7, #15]
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d3ec      	bcc.n	8004f3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f64:	883b      	ldrh	r3, [r7, #0]
 8004f66:	0418      	lsls	r0, r3, #16
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6819      	ldr	r1, [r3, #0]
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	4302      	orrs	r2, r0
 8004f74:	3340      	adds	r3, #64	; 0x40
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	460b      	mov	r3, r1
 8004f94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	887a      	ldrh	r2, [r7, #2]
 8004f9c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fde:	f043 0303 	orr.w	r3, r3, #3
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e0cc      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005020:	4b68      	ldr	r3, [pc, #416]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d90c      	bls.n	8005048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b65      	ldr	r3, [pc, #404]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005036:	4b63      	ldr	r3, [pc, #396]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d001      	beq.n	8005048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0b8      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d020      	beq.n	8005096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005060:	4b59      	ldr	r3, [pc, #356]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a58      	ldr	r2, [pc, #352]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800506a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005078:	4b53      	ldr	r3, [pc, #332]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4a52      	ldr	r2, [pc, #328]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005084:	4b50      	ldr	r3, [pc, #320]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	494d      	ldr	r1, [pc, #308]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d044      	beq.n	800512c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050aa:	4b47      	ldr	r3, [pc, #284]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d119      	bne.n	80050ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e07f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d003      	beq.n	80050ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d107      	bne.n	80050da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ca:	4b3f      	ldr	r3, [pc, #252]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e06f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050da:	4b3b      	ldr	r3, [pc, #236]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e067      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ea:	4b37      	ldr	r3, [pc, #220]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f023 0203 	bic.w	r2, r3, #3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	4934      	ldr	r1, [pc, #208]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050fc:	f7fd fa38 	bl	8002570 <HAL_GetTick>
 8005100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005102:	e00a      	b.n	800511a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005104:	f7fd fa34 	bl	8002570 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e04f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511a:	4b2b      	ldr	r3, [pc, #172]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 020c 	and.w	r2, r3, #12
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	429a      	cmp	r2, r3
 800512a:	d1eb      	bne.n	8005104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800512c:	4b25      	ldr	r3, [pc, #148]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d20c      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513a:	4b22      	ldr	r3, [pc, #136]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b20      	ldr	r3, [pc, #128]	; (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e032      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d008      	beq.n	8005172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005160:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4916      	ldr	r1, [pc, #88]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800517e:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	490e      	ldr	r1, [pc, #56]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	4313      	orrs	r3, r2
 8005190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005192:	f000 f821 	bl	80051d8 <HAL_RCC_GetSysClockFreq>
 8005196:	4602      	mov	r2, r0
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	490a      	ldr	r1, [pc, #40]	; (80051cc <HAL_RCC_ClockConfig+0x1c0>)
 80051a4:	5ccb      	ldrb	r3, [r1, r3]
 80051a6:	fa22 f303 	lsr.w	r3, r2, r3
 80051aa:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 80051ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <HAL_RCC_ClockConfig+0x1c8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fd f84e 	bl	8002254 <HAL_InitTick>

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40023c00 	.word	0x40023c00
 80051c8:	40023800 	.word	0x40023800
 80051cc:	0800c070 	.word	0x0800c070
 80051d0:	20000010 	.word	0x20000010
 80051d4:	20000014 	.word	0x20000014

080051d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051dc:	b094      	sub	sp, #80	; 0x50
 80051de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	647b      	str	r3, [r7, #68]	; 0x44
 80051e4:	2300      	movs	r3, #0
 80051e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051e8:	2300      	movs	r3, #0
 80051ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051f0:	4b79      	ldr	r3, [pc, #484]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 030c 	and.w	r3, r3, #12
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d00d      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x40>
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	f200 80e1 	bhi.w	80053c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_RCC_GetSysClockFreq+0x34>
 8005206:	2b04      	cmp	r3, #4
 8005208:	d003      	beq.n	8005212 <HAL_RCC_GetSysClockFreq+0x3a>
 800520a:	e0db      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800520c:	4b73      	ldr	r3, [pc, #460]	; (80053dc <HAL_RCC_GetSysClockFreq+0x204>)
 800520e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005210:	e0db      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005212:	4b73      	ldr	r3, [pc, #460]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005214:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005216:	e0d8      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005218:	4b6f      	ldr	r3, [pc, #444]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005220:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005222:	4b6d      	ldr	r3, [pc, #436]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d063      	beq.n	80052f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522e:	4b6a      	ldr	r3, [pc, #424]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	099b      	lsrs	r3, r3, #6
 8005234:	2200      	movs	r2, #0
 8005236:	63bb      	str	r3, [r7, #56]	; 0x38
 8005238:	63fa      	str	r2, [r7, #60]	; 0x3c
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005240:	633b      	str	r3, [r7, #48]	; 0x30
 8005242:	2300      	movs	r3, #0
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
 8005246:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800524a:	4622      	mov	r2, r4
 800524c:	462b      	mov	r3, r5
 800524e:	f04f 0000 	mov.w	r0, #0
 8005252:	f04f 0100 	mov.w	r1, #0
 8005256:	0159      	lsls	r1, r3, #5
 8005258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800525c:	0150      	lsls	r0, r2, #5
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4621      	mov	r1, r4
 8005264:	1a51      	subs	r1, r2, r1
 8005266:	6139      	str	r1, [r7, #16]
 8005268:	4629      	mov	r1, r5
 800526a:	eb63 0301 	sbc.w	r3, r3, r1
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800527c:	4659      	mov	r1, fp
 800527e:	018b      	lsls	r3, r1, #6
 8005280:	4651      	mov	r1, sl
 8005282:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005286:	4651      	mov	r1, sl
 8005288:	018a      	lsls	r2, r1, #6
 800528a:	4651      	mov	r1, sl
 800528c:	ebb2 0801 	subs.w	r8, r2, r1
 8005290:	4659      	mov	r1, fp
 8005292:	eb63 0901 	sbc.w	r9, r3, r1
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052aa:	4690      	mov	r8, r2
 80052ac:	4699      	mov	r9, r3
 80052ae:	4623      	mov	r3, r4
 80052b0:	eb18 0303 	adds.w	r3, r8, r3
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	462b      	mov	r3, r5
 80052b8:	eb49 0303 	adc.w	r3, r9, r3
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052ca:	4629      	mov	r1, r5
 80052cc:	024b      	lsls	r3, r1, #9
 80052ce:	4621      	mov	r1, r4
 80052d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052d4:	4621      	mov	r1, r4
 80052d6:	024a      	lsls	r2, r1, #9
 80052d8:	4610      	mov	r0, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052de:	2200      	movs	r2, #0
 80052e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052e8:	f7fb fca6 	bl	8000c38 <__aeabi_uldivmod>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4613      	mov	r3, r2
 80052f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f4:	e058      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f6:	4b38      	ldr	r3, [pc, #224]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	099b      	lsrs	r3, r3, #6
 80052fc:	2200      	movs	r2, #0
 80052fe:	4618      	mov	r0, r3
 8005300:	4611      	mov	r1, r2
 8005302:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005306:	623b      	str	r3, [r7, #32]
 8005308:	2300      	movs	r3, #0
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
 800530c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005310:	4642      	mov	r2, r8
 8005312:	464b      	mov	r3, r9
 8005314:	f04f 0000 	mov.w	r0, #0
 8005318:	f04f 0100 	mov.w	r1, #0
 800531c:	0159      	lsls	r1, r3, #5
 800531e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005322:	0150      	lsls	r0, r2, #5
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4641      	mov	r1, r8
 800532a:	ebb2 0a01 	subs.w	sl, r2, r1
 800532e:	4649      	mov	r1, r9
 8005330:	eb63 0b01 	sbc.w	fp, r3, r1
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005340:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005344:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005348:	ebb2 040a 	subs.w	r4, r2, sl
 800534c:	eb63 050b 	sbc.w	r5, r3, fp
 8005350:	f04f 0200 	mov.w	r2, #0
 8005354:	f04f 0300 	mov.w	r3, #0
 8005358:	00eb      	lsls	r3, r5, #3
 800535a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800535e:	00e2      	lsls	r2, r4, #3
 8005360:	4614      	mov	r4, r2
 8005362:	461d      	mov	r5, r3
 8005364:	4643      	mov	r3, r8
 8005366:	18e3      	adds	r3, r4, r3
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	464b      	mov	r3, r9
 800536c:	eb45 0303 	adc.w	r3, r5, r3
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800537e:	4629      	mov	r1, r5
 8005380:	028b      	lsls	r3, r1, #10
 8005382:	4621      	mov	r1, r4
 8005384:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005388:	4621      	mov	r1, r4
 800538a:	028a      	lsls	r2, r1, #10
 800538c:	4610      	mov	r0, r2
 800538e:	4619      	mov	r1, r3
 8005390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005392:	2200      	movs	r2, #0
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	61fa      	str	r2, [r7, #28]
 8005398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800539c:	f7fb fc4c 	bl	8000c38 <__aeabi_uldivmod>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4613      	mov	r3, r2
 80053a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053a8:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	0c1b      	lsrs	r3, r3, #16
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	3301      	adds	r3, #1
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80053b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053c2:	e002      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <HAL_RCC_GetSysClockFreq+0x204>)
 80053c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3750      	adds	r7, #80	; 0x50
 80053d0:	46bd      	mov	sp, r7
 80053d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053d6:	bf00      	nop
 80053d8:	40023800 	.word	0x40023800
 80053dc:	00f42400 	.word	0x00f42400
 80053e0:	007a1200 	.word	0x007a1200

080053e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e8:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053ea:	681b      	ldr	r3, [r3, #0]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20000010 	.word	0x20000010

080053fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005400:	f7ff fff0 	bl	80053e4 <HAL_RCC_GetHCLKFreq>
 8005404:	4602      	mov	r2, r0
 8005406:	4b05      	ldr	r3, [pc, #20]	; (800541c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	0a9b      	lsrs	r3, r3, #10
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	4903      	ldr	r1, [pc, #12]	; (8005420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005412:	5ccb      	ldrb	r3, [r1, r3]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40023800 	.word	0x40023800
 8005420:	0800c080 	.word	0x0800c080

08005424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005428:	f7ff ffdc 	bl	80053e4 <HAL_RCC_GetHCLKFreq>
 800542c:	4602      	mov	r2, r0
 800542e:	4b05      	ldr	r3, [pc, #20]	; (8005444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	0b5b      	lsrs	r3, r3, #13
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	4903      	ldr	r1, [pc, #12]	; (8005448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800543a:	5ccb      	ldrb	r3, [r1, r3]
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40023800 	.word	0x40023800
 8005448:	0800c080 	.word	0x0800c080

0800544c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	220f      	movs	r2, #15
 800545a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800545c:	4b12      	ldr	r3, [pc, #72]	; (80054a8 <HAL_RCC_GetClockConfig+0x5c>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0203 	and.w	r2, r3, #3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005468:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <HAL_RCC_GetClockConfig+0x5c>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005474:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005480:	4b09      	ldr	r3, [pc, #36]	; (80054a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	08db      	lsrs	r3, r3, #3
 8005486:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800548e:	4b07      	ldr	r3, [pc, #28]	; (80054ac <HAL_RCC_GetClockConfig+0x60>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0207 	and.w	r2, r3, #7
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	601a      	str	r2, [r3, #0]
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40023800 	.word	0x40023800
 80054ac:	40023c00 	.word	0x40023c00

080054b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d010      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80054d4:	4b7a      	ldr	r3, [pc, #488]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054da:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	4977      	ldr	r1, [pc, #476]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80054f2:	2301      	movs	r3, #1
 80054f4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d010      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005502:	4b6f      	ldr	r3, [pc, #444]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005508:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	496b      	ldr	r1, [pc, #428]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8005520:	2301      	movs	r3, #1
 8005522:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d022      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8005530:	4b63      	ldr	r3, [pc, #396]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005536:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800553e:	4960      	ldr	r1, [pc, #384]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800554e:	2301      	movs	r3, #1
 8005550:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005556:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800555a:	d10c      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800555c:	4b58      	ldr	r3, [pc, #352]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800555e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005562:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	3b01      	subs	r3, #1
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	4954      	ldr	r1, [pc, #336]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d022      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8005582:	4b4f      	ldr	r3, [pc, #316]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005588:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005590:	494b      	ldr	r1, [pc, #300]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80055a0:	2301      	movs	r3, #1
 80055a2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80055ae:	4b44      	ldr	r3, [pc, #272]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	3b01      	subs	r3, #1
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	493f      	ldr	r1, [pc, #252]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 808a 	beq.w	80056ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	4b39      	ldr	r3, [pc, #228]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	4a38      	ldr	r2, [pc, #224]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e4:	6413      	str	r3, [r2, #64]	; 0x40
 80055e6:	4b36      	ldr	r3, [pc, #216]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80055f2:	4b34      	ldr	r3, [pc, #208]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a33      	ldr	r2, [pc, #204]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80055f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055fe:	f7fc ffb7 	bl	8002570 <HAL_GetTick>
 8005602:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005604:	e008      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005606:	f7fc ffb3 	bl	8002570 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e1d1      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005618:	4b2a      	ldr	r3, [pc, #168]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005624:	4b26      	ldr	r3, [pc, #152]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005628:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800562c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d02f      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	429a      	cmp	r2, r3
 8005640:	d028      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005642:	4b1f      	ldr	r3, [pc, #124]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800564a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800564c:	4b1e      	ldr	r3, [pc, #120]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005652:	4b1d      	ldr	r3, [pc, #116]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005658:	4a19      	ldr	r2, [pc, #100]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800565e:	4b18      	ldr	r3, [pc, #96]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b01      	cmp	r3, #1
 8005668:	d114      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800566a:	f7fc ff81 	bl	8002570 <HAL_GetTick>
 800566e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005670:	e00a      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005672:	f7fc ff7d 	bl	8002570 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005680:	4293      	cmp	r3, r2
 8005682:	d901      	bls.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e199      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005688:	4b0d      	ldr	r3, [pc, #52]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800568a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0ee      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056a0:	d114      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80056a2:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80056b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b6:	4902      	ldr	r1, [pc, #8]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	608b      	str	r3, [r1, #8]
 80056bc:	e00c      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80056be:	bf00      	nop
 80056c0:	40023800 	.word	0x40023800
 80056c4:	40007000 	.word	0x40007000
 80056c8:	42470e40 	.word	0x42470e40
 80056cc:	4b89      	ldr	r3, [pc, #548]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	4a88      	ldr	r2, [pc, #544]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80056d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80056d6:	6093      	str	r3, [r2, #8]
 80056d8:	4b86      	ldr	r3, [pc, #536]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80056da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056e4:	4983      	ldr	r1, [pc, #524]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d004      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80056fc:	4b7e      	ldr	r3, [pc, #504]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80056fe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800570c:	4b79      	ldr	r3, [pc, #484]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800570e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005712:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571a:	4976      	ldr	r1, [pc, #472]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b00      	cmp	r3, #0
 800572c:	d011      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800572e:	4b71      	ldr	r3, [pc, #452]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005734:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	496d      	ldr	r1, [pc, #436]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800574c:	d101      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 800574e:	2301      	movs	r3, #1
 8005750:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800575e:	4b65      	ldr	r3, [pc, #404]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005764:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576c:	4961      	ldr	r1, [pc, #388]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d004      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	f040 80c6 	bne.w	8005910 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005784:	4b5d      	ldr	r3, [pc, #372]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800578a:	f7fc fef1 	bl	8002570 <HAL_GetTick>
 800578e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005790:	e008      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005792:	f7fc feed 	bl	8002570 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e10b      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057a4:	4b53      	ldr	r3, [pc, #332]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1f0      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80057b0:	4a53      	ldr	r2, [pc, #332]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d023      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d019      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d004      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057f4:	d00e      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d019      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	2b00      	cmp	r3, #0
 8005808:	d115      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005812:	d110      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	019b      	lsls	r3, r3, #6
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	061b      	lsls	r3, r3, #24
 8005826:	431a      	orrs	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	071b      	lsls	r3, r3, #28
 800582e:	4931      	ldr	r1, [pc, #196]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8005852:	2b00      	cmp	r3, #0
 8005854:	d026      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d122      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800585e:	4b25      	ldr	r3, [pc, #148]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005864:	0e1b      	lsrs	r3, r3, #24
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	019b      	lsls	r3, r3, #6
 8005876:	431a      	orrs	r2, r3
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	061b      	lsls	r3, r3, #24
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	071b      	lsls	r3, r3, #28
 8005884:	491b      	ldr	r1, [pc, #108]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 800588c:	4b19      	ldr	r3, [pc, #100]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800588e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005892:	f023 021f 	bic.w	r2, r3, #31
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	3b01      	subs	r3, #1
 800589c:	4915      	ldr	r1, [pc, #84]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d010      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	019b      	lsls	r3, r3, #6
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	061b      	lsls	r3, r3, #24
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	071b      	lsls	r3, r3, #28
 80058ca:	490a      	ldr	r1, [pc, #40]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80058d2:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058d8:	f7fc fe4a 	bl	8002570 <HAL_GetTick>
 80058dc:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058de:	e011      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058e0:	f7fc fe46 	bl	8002570 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d90a      	bls.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e064      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80058f2:	bf00      	nop
 80058f4:	40023800 	.word	0x40023800
 80058f8:	424711e0 	.word	0x424711e0
 80058fc:	42470068 	.word	0x42470068
 8005900:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005904:	4b2f      	ldr	r3, [pc, #188]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0e7      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800591c:	4b29      	ldr	r3, [pc, #164]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800591e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005922:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592a:	4926      	ldr	r1, [pc, #152]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800593e:	4b21      	ldr	r3, [pc, #132]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005944:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	491d      	ldr	r1, [pc, #116]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005960:	4b18      	ldr	r3, [pc, #96]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005966:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	4915      	ldr	r1, [pc, #84]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8005982:	4b10      	ldr	r3, [pc, #64]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005988:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	490c      	ldr	r1, [pc, #48]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059a4:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80059a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059aa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b2:	4904      	ldr	r1, [pc, #16]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3720      	adds	r7, #32
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40023800 	.word	0x40023800

080059c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e273      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d075      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80059e6:	4b88      	ldr	r3, [pc, #544]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 030c 	and.w	r3, r3, #12
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d00c      	beq.n	8005a0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059f2:	4b85      	ldr	r3, [pc, #532]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	d112      	bne.n	8005a24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059fe:	4b82      	ldr	r3, [pc, #520]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a0a:	d10b      	bne.n	8005a24 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a0c:	4b7e      	ldr	r3, [pc, #504]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d05b      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x108>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d157      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e24e      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a2c:	d106      	bne.n	8005a3c <HAL_RCC_OscConfig+0x74>
 8005a2e:	4b76      	ldr	r3, [pc, #472]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a75      	ldr	r2, [pc, #468]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	e01d      	b.n	8005a78 <HAL_RCC_OscConfig+0xb0>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a44:	d10c      	bne.n	8005a60 <HAL_RCC_OscConfig+0x98>
 8005a46:	4b70      	ldr	r3, [pc, #448]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a6f      	ldr	r2, [pc, #444]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	4b6d      	ldr	r3, [pc, #436]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a6c      	ldr	r2, [pc, #432]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	e00b      	b.n	8005a78 <HAL_RCC_OscConfig+0xb0>
 8005a60:	4b69      	ldr	r3, [pc, #420]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a68      	ldr	r2, [pc, #416]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	4b66      	ldr	r3, [pc, #408]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a65      	ldr	r2, [pc, #404]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d013      	beq.n	8005aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a80:	f7fc fd76 	bl	8002570 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a88:	f7fc fd72 	bl	8002570 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b64      	cmp	r3, #100	; 0x64
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e213      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a9a:	4b5b      	ldr	r3, [pc, #364]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0f0      	beq.n	8005a88 <HAL_RCC_OscConfig+0xc0>
 8005aa6:	e014      	b.n	8005ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa8:	f7fc fd62 	bl	8002570 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ab0:	f7fc fd5e 	bl	8002570 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b64      	cmp	r3, #100	; 0x64
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e1ff      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ac2:	4b51      	ldr	r3, [pc, #324]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f0      	bne.n	8005ab0 <HAL_RCC_OscConfig+0xe8>
 8005ace:	e000      	b.n	8005ad2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d063      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ade:	4b4a      	ldr	r3, [pc, #296]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 030c 	and.w	r3, r3, #12
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00b      	beq.n	8005b02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aea:	4b47      	ldr	r3, [pc, #284]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d11c      	bne.n	8005b30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005af6:	4b44      	ldr	r3, [pc, #272]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d116      	bne.n	8005b30 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b02:	4b41      	ldr	r3, [pc, #260]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d005      	beq.n	8005b1a <HAL_RCC_OscConfig+0x152>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d001      	beq.n	8005b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e1d3      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b1a:	4b3b      	ldr	r3, [pc, #236]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	4937      	ldr	r1, [pc, #220]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b2e:	e03a      	b.n	8005ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d020      	beq.n	8005b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b38:	4b34      	ldr	r3, [pc, #208]	; (8005c0c <HAL_RCC_OscConfig+0x244>)
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3e:	f7fc fd17 	bl	8002570 <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b44:	e008      	b.n	8005b58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b46:	f7fc fd13 	bl	8002570 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e1b4      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b58:	4b2b      	ldr	r3, [pc, #172]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0f0      	beq.n	8005b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b64:	4b28      	ldr	r3, [pc, #160]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	4925      	ldr	r1, [pc, #148]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	600b      	str	r3, [r1, #0]
 8005b78:	e015      	b.n	8005ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b7a:	4b24      	ldr	r3, [pc, #144]	; (8005c0c <HAL_RCC_OscConfig+0x244>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b80:	f7fc fcf6 	bl	8002570 <HAL_GetTick>
 8005b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b88:	f7fc fcf2 	bl	8002570 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e193      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b9a:	4b1b      	ldr	r3, [pc, #108]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1f0      	bne.n	8005b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d036      	beq.n	8005c20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d016      	beq.n	8005be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bba:	4b15      	ldr	r3, [pc, #84]	; (8005c10 <HAL_RCC_OscConfig+0x248>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc0:	f7fc fcd6 	bl	8002570 <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bc8:	f7fc fcd2 	bl	8002570 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e173      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bda:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0f0      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x200>
 8005be6:	e01b      	b.n	8005c20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005be8:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <HAL_RCC_OscConfig+0x248>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bee:	f7fc fcbf 	bl	8002570 <HAL_GetTick>
 8005bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bf4:	e00e      	b.n	8005c14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bf6:	f7fc fcbb 	bl	8002570 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d907      	bls.n	8005c14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e15c      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
 8005c08:	40023800 	.word	0x40023800
 8005c0c:	42470000 	.word	0x42470000
 8005c10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c14:	4b8a      	ldr	r3, [pc, #552]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1ea      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 8097 	beq.w	8005d5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c32:	4b83      	ldr	r3, [pc, #524]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10f      	bne.n	8005c5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60bb      	str	r3, [r7, #8]
 8005c42:	4b7f      	ldr	r3, [pc, #508]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	4a7e      	ldr	r2, [pc, #504]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c4e:	4b7c      	ldr	r3, [pc, #496]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c56:	60bb      	str	r3, [r7, #8]
 8005c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c5e:	4b79      	ldr	r3, [pc, #484]	; (8005e44 <HAL_RCC_OscConfig+0x47c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d118      	bne.n	8005c9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c6a:	4b76      	ldr	r3, [pc, #472]	; (8005e44 <HAL_RCC_OscConfig+0x47c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a75      	ldr	r2, [pc, #468]	; (8005e44 <HAL_RCC_OscConfig+0x47c>)
 8005c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c76:	f7fc fc7b 	bl	8002570 <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c7c:	e008      	b.n	8005c90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c7e:	f7fc fc77 	bl	8002570 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e118      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c90:	4b6c      	ldr	r3, [pc, #432]	; (8005e44 <HAL_RCC_OscConfig+0x47c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0f0      	beq.n	8005c7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d106      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x2ea>
 8005ca4:	4b66      	ldr	r3, [pc, #408]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca8:	4a65      	ldr	r2, [pc, #404]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	6713      	str	r3, [r2, #112]	; 0x70
 8005cb0:	e01c      	b.n	8005cec <HAL_RCC_OscConfig+0x324>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b05      	cmp	r3, #5
 8005cb8:	d10c      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x30c>
 8005cba:	4b61      	ldr	r3, [pc, #388]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbe:	4a60      	ldr	r2, [pc, #384]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005cc0:	f043 0304 	orr.w	r3, r3, #4
 8005cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8005cc6:	4b5e      	ldr	r3, [pc, #376]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cca:	4a5d      	ldr	r2, [pc, #372]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005ccc:	f043 0301 	orr.w	r3, r3, #1
 8005cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005cd2:	e00b      	b.n	8005cec <HAL_RCC_OscConfig+0x324>
 8005cd4:	4b5a      	ldr	r3, [pc, #360]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd8:	4a59      	ldr	r2, [pc, #356]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce0:	4b57      	ldr	r3, [pc, #348]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce4:	4a56      	ldr	r2, [pc, #344]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005ce6:	f023 0304 	bic.w	r3, r3, #4
 8005cea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d015      	beq.n	8005d20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf4:	f7fc fc3c 	bl	8002570 <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cfa:	e00a      	b.n	8005d12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cfc:	f7fc fc38 	bl	8002570 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e0d7      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d12:	4b4b      	ldr	r3, [pc, #300]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0ee      	beq.n	8005cfc <HAL_RCC_OscConfig+0x334>
 8005d1e:	e014      	b.n	8005d4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d20:	f7fc fc26 	bl	8002570 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d26:	e00a      	b.n	8005d3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d28:	f7fc fc22 	bl	8002570 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e0c1      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d3e:	4b40      	ldr	r3, [pc, #256]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1ee      	bne.n	8005d28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d105      	bne.n	8005d5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d50:	4b3b      	ldr	r3, [pc, #236]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	4a3a      	ldr	r2, [pc, #232]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 80ad 	beq.w	8005ec0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d66:	4b36      	ldr	r3, [pc, #216]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 030c 	and.w	r3, r3, #12
 8005d6e:	2b08      	cmp	r3, #8
 8005d70:	d060      	beq.n	8005e34 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d145      	bne.n	8005e06 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d7a:	4b33      	ldr	r3, [pc, #204]	; (8005e48 <HAL_RCC_OscConfig+0x480>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d80:	f7fc fbf6 	bl	8002570 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d88:	f7fc fbf2 	bl	8002570 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e093      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d9a:	4b29      	ldr	r3, [pc, #164]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f0      	bne.n	8005d88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69da      	ldr	r2, [r3, #28]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	019b      	lsls	r3, r3, #6
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	085b      	lsrs	r3, r3, #1
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	041b      	lsls	r3, r3, #16
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	061b      	lsls	r3, r3, #24
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	071b      	lsls	r3, r3, #28
 8005dd2:	491b      	ldr	r1, [pc, #108]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dd8:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <HAL_RCC_OscConfig+0x480>)
 8005dda:	2201      	movs	r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dde:	f7fc fbc7 	bl	8002570 <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005de6:	f7fc fbc3 	bl	8002570 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e064      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005df8:	4b11      	ldr	r3, [pc, #68]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f0      	beq.n	8005de6 <HAL_RCC_OscConfig+0x41e>
 8005e04:	e05c      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e06:	4b10      	ldr	r3, [pc, #64]	; (8005e48 <HAL_RCC_OscConfig+0x480>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0c:	f7fc fbb0 	bl	8002570 <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e14:	f7fc fbac 	bl	8002570 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e04d      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e26:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <HAL_RCC_OscConfig+0x478>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f0      	bne.n	8005e14 <HAL_RCC_OscConfig+0x44c>
 8005e32:	e045      	b.n	8005ec0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d107      	bne.n	8005e4c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e040      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
 8005e40:	40023800 	.word	0x40023800
 8005e44:	40007000 	.word	0x40007000
 8005e48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e4c:	4b1f      	ldr	r3, [pc, #124]	; (8005ecc <HAL_RCC_OscConfig+0x504>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d030      	beq.n	8005ebc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d129      	bne.n	8005ebc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d122      	bne.n	8005ebc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d119      	bne.n	8005ebc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	3b01      	subs	r3, #1
 8005e96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d10f      	bne.n	8005ebc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d107      	bne.n	8005ebc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d001      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e000      	b.n	8005ec2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3718      	adds	r7, #24
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	40023800 	.word	0x40023800

08005ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e07b      	b.n	8005fda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d108      	bne.n	8005efc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ef2:	d009      	beq.n	8005f08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	61da      	str	r2, [r3, #28]
 8005efa:	e005      	b.n	8005f08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fc f8ce 	bl	80020c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f50:	431a      	orrs	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	431a      	orrs	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8c:	ea42 0103 	orr.w	r1, r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	0c1b      	lsrs	r3, r3, #16
 8005fa6:	f003 0104 	and.w	r1, r3, #4
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	f003 0210 	and.w	r2, r3, #16
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e041      	b.n	8006078 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f839 	bl	8006080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	3304      	adds	r3, #4
 800601e:	4619      	mov	r1, r3
 8006020:	4610      	mov	r0, r2
 8006022:	f000 f9d7 	bl	80063d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d001      	beq.n	80060ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e04e      	b.n	800614a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a23      	ldr	r2, [pc, #140]	; (8006158 <HAL_TIM_Base_Start_IT+0xc4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d022      	beq.n	8006114 <HAL_TIM_Base_Start_IT+0x80>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d6:	d01d      	beq.n	8006114 <HAL_TIM_Base_Start_IT+0x80>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a1f      	ldr	r2, [pc, #124]	; (800615c <HAL_TIM_Base_Start_IT+0xc8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d018      	beq.n	8006114 <HAL_TIM_Base_Start_IT+0x80>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1e      	ldr	r2, [pc, #120]	; (8006160 <HAL_TIM_Base_Start_IT+0xcc>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d013      	beq.n	8006114 <HAL_TIM_Base_Start_IT+0x80>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1c      	ldr	r2, [pc, #112]	; (8006164 <HAL_TIM_Base_Start_IT+0xd0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00e      	beq.n	8006114 <HAL_TIM_Base_Start_IT+0x80>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1b      	ldr	r2, [pc, #108]	; (8006168 <HAL_TIM_Base_Start_IT+0xd4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d009      	beq.n	8006114 <HAL_TIM_Base_Start_IT+0x80>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a19      	ldr	r2, [pc, #100]	; (800616c <HAL_TIM_Base_Start_IT+0xd8>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d004      	beq.n	8006114 <HAL_TIM_Base_Start_IT+0x80>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a18      	ldr	r2, [pc, #96]	; (8006170 <HAL_TIM_Base_Start_IT+0xdc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d111      	bne.n	8006138 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b06      	cmp	r3, #6
 8006124:	d010      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f042 0201 	orr.w	r2, r2, #1
 8006134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006136:	e007      	b.n	8006148 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0201 	orr.w	r2, r2, #1
 8006146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40010000 	.word	0x40010000
 800615c:	40000400 	.word	0x40000400
 8006160:	40000800 	.word	0x40000800
 8006164:	40000c00 	.word	0x40000c00
 8006168:	40010400 	.word	0x40010400
 800616c:	40014000 	.word	0x40014000
 8006170:	40001800 	.word	0x40001800

08006174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b02      	cmp	r3, #2
 8006188:	d122      	bne.n	80061d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b02      	cmp	r3, #2
 8006196:	d11b      	bne.n	80061d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0202 	mvn.w	r2, #2
 80061a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f8ee 	bl	8006398 <HAL_TIM_IC_CaptureCallback>
 80061bc:	e005      	b.n	80061ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f8e0 	bl	8006384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f8f1 	bl	80063ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d122      	bne.n	8006224 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d11b      	bne.n	8006224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f06f 0204 	mvn.w	r2, #4
 80061f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2202      	movs	r2, #2
 80061fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f8c4 	bl	8006398 <HAL_TIM_IC_CaptureCallback>
 8006210:	e005      	b.n	800621e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f8b6 	bl	8006384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f8c7 	bl	80063ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	f003 0308 	and.w	r3, r3, #8
 800622e:	2b08      	cmp	r3, #8
 8006230:	d122      	bne.n	8006278 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b08      	cmp	r3, #8
 800623e:	d11b      	bne.n	8006278 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f06f 0208 	mvn.w	r2, #8
 8006248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2204      	movs	r2, #4
 800624e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f89a 	bl	8006398 <HAL_TIM_IC_CaptureCallback>
 8006264:	e005      	b.n	8006272 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f88c 	bl	8006384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f89d 	bl	80063ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 0310 	and.w	r3, r3, #16
 8006282:	2b10      	cmp	r3, #16
 8006284:	d122      	bne.n	80062cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b10      	cmp	r3, #16
 8006292:	d11b      	bne.n	80062cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0210 	mvn.w	r2, #16
 800629c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2208      	movs	r2, #8
 80062a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f870 	bl	8006398 <HAL_TIM_IC_CaptureCallback>
 80062b8:	e005      	b.n	80062c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f862 	bl	8006384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f873 	bl	80063ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d10e      	bne.n	80062f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d107      	bne.n	80062f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f06f 0201 	mvn.w	r2, #1
 80062f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fb fe5e 	bl	8001fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006302:	2b80      	cmp	r3, #128	; 0x80
 8006304:	d10e      	bne.n	8006324 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006310:	2b80      	cmp	r3, #128	; 0x80
 8006312:	d107      	bne.n	8006324 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800631c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f902 	bl	8006528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b40      	cmp	r3, #64	; 0x40
 8006330:	d10e      	bne.n	8006350 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633c:	2b40      	cmp	r3, #64	; 0x40
 800633e:	d107      	bne.n	8006350 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f838 	bl	80063c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b20      	cmp	r3, #32
 800635c:	d10e      	bne.n	800637c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b20      	cmp	r3, #32
 800636a:	d107      	bne.n	800637c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f06f 0220 	mvn.w	r2, #32
 8006374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f8cc 	bl	8006514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800637c:	bf00      	nop
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a40      	ldr	r2, [pc, #256]	; (80064e8 <TIM_Base_SetConfig+0x114>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d013      	beq.n	8006414 <TIM_Base_SetConfig+0x40>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f2:	d00f      	beq.n	8006414 <TIM_Base_SetConfig+0x40>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a3d      	ldr	r2, [pc, #244]	; (80064ec <TIM_Base_SetConfig+0x118>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00b      	beq.n	8006414 <TIM_Base_SetConfig+0x40>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a3c      	ldr	r2, [pc, #240]	; (80064f0 <TIM_Base_SetConfig+0x11c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d007      	beq.n	8006414 <TIM_Base_SetConfig+0x40>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a3b      	ldr	r2, [pc, #236]	; (80064f4 <TIM_Base_SetConfig+0x120>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d003      	beq.n	8006414 <TIM_Base_SetConfig+0x40>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a3a      	ldr	r2, [pc, #232]	; (80064f8 <TIM_Base_SetConfig+0x124>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d108      	bne.n	8006426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a2f      	ldr	r2, [pc, #188]	; (80064e8 <TIM_Base_SetConfig+0x114>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d02b      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006434:	d027      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a2c      	ldr	r2, [pc, #176]	; (80064ec <TIM_Base_SetConfig+0x118>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d023      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a2b      	ldr	r2, [pc, #172]	; (80064f0 <TIM_Base_SetConfig+0x11c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d01f      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a2a      	ldr	r2, [pc, #168]	; (80064f4 <TIM_Base_SetConfig+0x120>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d01b      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a29      	ldr	r2, [pc, #164]	; (80064f8 <TIM_Base_SetConfig+0x124>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d017      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a28      	ldr	r2, [pc, #160]	; (80064fc <TIM_Base_SetConfig+0x128>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a27      	ldr	r2, [pc, #156]	; (8006500 <TIM_Base_SetConfig+0x12c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00f      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a26      	ldr	r2, [pc, #152]	; (8006504 <TIM_Base_SetConfig+0x130>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00b      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a25      	ldr	r2, [pc, #148]	; (8006508 <TIM_Base_SetConfig+0x134>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d007      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a24      	ldr	r2, [pc, #144]	; (800650c <TIM_Base_SetConfig+0x138>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d003      	beq.n	8006486 <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a23      	ldr	r2, [pc, #140]	; (8006510 <TIM_Base_SetConfig+0x13c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d108      	bne.n	8006498 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800648c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a0a      	ldr	r2, [pc, #40]	; (80064e8 <TIM_Base_SetConfig+0x114>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_Base_SetConfig+0xf8>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a0c      	ldr	r2, [pc, #48]	; (80064f8 <TIM_Base_SetConfig+0x124>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d103      	bne.n	80064d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	691a      	ldr	r2, [r3, #16]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	615a      	str	r2, [r3, #20]
}
 80064da:	bf00      	nop
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40010000 	.word	0x40010000
 80064ec:	40000400 	.word	0x40000400
 80064f0:	40000800 	.word	0x40000800
 80064f4:	40000c00 	.word	0x40000c00
 80064f8:	40010400 	.word	0x40010400
 80064fc:	40014000 	.word	0x40014000
 8006500:	40014400 	.word	0x40014400
 8006504:	40014800 	.word	0x40014800
 8006508:	40001800 	.word	0x40001800
 800650c:	40001c00 	.word	0x40001c00
 8006510:	40002000 	.word	0x40002000

08006514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e03f      	b.n	80065ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fb fdf6 	bl	8002154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2224      	movs	r2, #36	; 0x24
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800657e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f929 	bl	80067d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695a      	ldr	r2, [r3, #20]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b08a      	sub	sp, #40	; 0x28
 80065da:	af02      	add	r7, sp, #8
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	603b      	str	r3, [r7, #0]
 80065e2:	4613      	mov	r3, r2
 80065e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b20      	cmp	r3, #32
 80065f4:	d17c      	bne.n	80066f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <HAL_UART_Transmit+0x2c>
 80065fc:	88fb      	ldrh	r3, [r7, #6]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e075      	b.n	80066f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_UART_Transmit+0x3e>
 8006610:	2302      	movs	r3, #2
 8006612:	e06e      	b.n	80066f2 <HAL_UART_Transmit+0x11c>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2221      	movs	r2, #33	; 0x21
 8006626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800662a:	f7fb ffa1 	bl	8002570 <HAL_GetTick>
 800662e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	88fa      	ldrh	r2, [r7, #6]
 8006634:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	88fa      	ldrh	r2, [r7, #6]
 800663a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006644:	d108      	bne.n	8006658 <HAL_UART_Transmit+0x82>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d104      	bne.n	8006658 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800664e:	2300      	movs	r3, #0
 8006650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	e003      	b.n	8006660 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800665c:	2300      	movs	r3, #0
 800665e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006668:	e02a      	b.n	80066c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2200      	movs	r2, #0
 8006672:	2180      	movs	r1, #128	; 0x80
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 f840 	bl	80066fa <UART_WaitOnFlagUntilTimeout>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e036      	b.n	80066f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006698:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	3302      	adds	r3, #2
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	e007      	b.n	80066b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	781a      	ldrb	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	3301      	adds	r3, #1
 80066b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1cf      	bne.n	800666a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2200      	movs	r2, #0
 80066d2:	2140      	movs	r1, #64	; 0x40
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 f810 	bl	80066fa <UART_WaitOnFlagUntilTimeout>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e006      	b.n	80066f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	e000      	b.n	80066f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066f0:	2302      	movs	r3, #2
  }
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b090      	sub	sp, #64	; 0x40
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	603b      	str	r3, [r7, #0]
 8006706:	4613      	mov	r3, r2
 8006708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800670a:	e050      	b.n	80067ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800670c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	d04c      	beq.n	80067ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006716:	2b00      	cmp	r3, #0
 8006718:	d007      	beq.n	800672a <UART_WaitOnFlagUntilTimeout+0x30>
 800671a:	f7fb ff29 	bl	8002570 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006726:	429a      	cmp	r2, r3
 8006728:	d241      	bcs.n	80067ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	330c      	adds	r3, #12
 8006730:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	330c      	adds	r3, #12
 8006748:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800674a:	637a      	str	r2, [r7, #52]	; 0x34
 800674c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e5      	bne.n	800672a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3314      	adds	r3, #20
 8006764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	613b      	str	r3, [r7, #16]
   return(result);
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f023 0301 	bic.w	r3, r3, #1
 8006774:	63bb      	str	r3, [r7, #56]	; 0x38
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3314      	adds	r3, #20
 800677c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800677e:	623a      	str	r2, [r7, #32]
 8006780:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	69f9      	ldr	r1, [r7, #28]
 8006784:	6a3a      	ldr	r2, [r7, #32]
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	61bb      	str	r3, [r7, #24]
   return(result);
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e5      	bne.n	800675e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2220      	movs	r2, #32
 8006796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e00f      	b.n	80067ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4013      	ands	r3, r2
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	bf0c      	ite	eq
 80067be:	2301      	moveq	r3, #1
 80067c0:	2300      	movne	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d09f      	beq.n	800670c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3740      	adds	r7, #64	; 0x40
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
	...

080067d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067dc:	b0c0      	sub	sp, #256	; 0x100
 80067de:	af00      	add	r7, sp, #0
 80067e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f4:	68d9      	ldr	r1, [r3, #12]
 80067f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	ea40 0301 	orr.w	r3, r0, r1
 8006800:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	431a      	orrs	r2, r3
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	431a      	orrs	r2, r3
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	4313      	orrs	r3, r2
 8006820:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006830:	f021 010c 	bic.w	r1, r1, #12
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800683e:	430b      	orrs	r3, r1
 8006840:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800684e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006852:	6999      	ldr	r1, [r3, #24]
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	ea40 0301 	orr.w	r3, r0, r1
 800685e:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	4b95      	ldr	r3, [pc, #596]	; (8006abc <UART_SetConfig+0x2e4>)
 8006868:	429a      	cmp	r2, r3
 800686a:	d011      	beq.n	8006890 <UART_SetConfig+0xb8>
 800686c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	4b93      	ldr	r3, [pc, #588]	; (8006ac0 <UART_SetConfig+0x2e8>)
 8006874:	429a      	cmp	r2, r3
 8006876:	d00b      	beq.n	8006890 <UART_SetConfig+0xb8>
 8006878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	4b91      	ldr	r3, [pc, #580]	; (8006ac4 <UART_SetConfig+0x2ec>)
 8006880:	429a      	cmp	r2, r3
 8006882:	d005      	beq.n	8006890 <UART_SetConfig+0xb8>
 8006884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	4b8f      	ldr	r3, [pc, #572]	; (8006ac8 <UART_SetConfig+0x2f0>)
 800688c:	429a      	cmp	r2, r3
 800688e:	d104      	bne.n	800689a <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006890:	f7fe fdc8 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 8006894:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006898:	e003      	b.n	80068a2 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800689a:	f7fe fdaf 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 800689e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ac:	f040 8110 	bne.w	8006ad0 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068b4:	2200      	movs	r2, #0
 80068b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80068be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068c2:	4622      	mov	r2, r4
 80068c4:	462b      	mov	r3, r5
 80068c6:	1891      	adds	r1, r2, r2
 80068c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80068ca:	415b      	adcs	r3, r3
 80068cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068d2:	4621      	mov	r1, r4
 80068d4:	eb12 0801 	adds.w	r8, r2, r1
 80068d8:	4629      	mov	r1, r5
 80068da:	eb43 0901 	adc.w	r9, r3, r1
 80068de:	f04f 0200 	mov.w	r2, #0
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068f2:	4690      	mov	r8, r2
 80068f4:	4699      	mov	r9, r3
 80068f6:	4623      	mov	r3, r4
 80068f8:	eb18 0303 	adds.w	r3, r8, r3
 80068fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006900:	462b      	mov	r3, r5
 8006902:	eb49 0303 	adc.w	r3, r9, r3
 8006906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800690a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006916:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800691a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800691e:	460b      	mov	r3, r1
 8006920:	18db      	adds	r3, r3, r3
 8006922:	653b      	str	r3, [r7, #80]	; 0x50
 8006924:	4613      	mov	r3, r2
 8006926:	eb42 0303 	adc.w	r3, r2, r3
 800692a:	657b      	str	r3, [r7, #84]	; 0x54
 800692c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006930:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006934:	f7fa f980 	bl	8000c38 <__aeabi_uldivmod>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	4b63      	ldr	r3, [pc, #396]	; (8006acc <UART_SetConfig+0x2f4>)
 800693e:	fba3 2302 	umull	r2, r3, r3, r2
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	011c      	lsls	r4, r3, #4
 8006946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800694a:	2200      	movs	r2, #0
 800694c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006950:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006954:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006958:	4642      	mov	r2, r8
 800695a:	464b      	mov	r3, r9
 800695c:	1891      	adds	r1, r2, r2
 800695e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006960:	415b      	adcs	r3, r3
 8006962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006964:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006968:	4641      	mov	r1, r8
 800696a:	eb12 0a01 	adds.w	sl, r2, r1
 800696e:	4649      	mov	r1, r9
 8006970:	eb43 0b01 	adc.w	fp, r3, r1
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006980:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006984:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006988:	4692      	mov	sl, r2
 800698a:	469b      	mov	fp, r3
 800698c:	4643      	mov	r3, r8
 800698e:	eb1a 0303 	adds.w	r3, sl, r3
 8006992:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006996:	464b      	mov	r3, r9
 8006998:	eb4b 0303 	adc.w	r3, fp, r3
 800699c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069b4:	460b      	mov	r3, r1
 80069b6:	18db      	adds	r3, r3, r3
 80069b8:	643b      	str	r3, [r7, #64]	; 0x40
 80069ba:	4613      	mov	r3, r2
 80069bc:	eb42 0303 	adc.w	r3, r2, r3
 80069c0:	647b      	str	r3, [r7, #68]	; 0x44
 80069c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069ca:	f7fa f935 	bl	8000c38 <__aeabi_uldivmod>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
 80069d2:	4611      	mov	r1, r2
 80069d4:	4b3d      	ldr	r3, [pc, #244]	; (8006acc <UART_SetConfig+0x2f4>)
 80069d6:	fba3 2301 	umull	r2, r3, r3, r1
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	2264      	movs	r2, #100	; 0x64
 80069de:	fb02 f303 	mul.w	r3, r2, r3
 80069e2:	1acb      	subs	r3, r1, r3
 80069e4:	00db      	lsls	r3, r3, #3
 80069e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069ea:	4b38      	ldr	r3, [pc, #224]	; (8006acc <UART_SetConfig+0x2f4>)
 80069ec:	fba3 2302 	umull	r2, r3, r3, r2
 80069f0:	095b      	lsrs	r3, r3, #5
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069f8:	441c      	add	r4, r3
 80069fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069fe:	2200      	movs	r2, #0
 8006a00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a0c:	4642      	mov	r2, r8
 8006a0e:	464b      	mov	r3, r9
 8006a10:	1891      	adds	r1, r2, r2
 8006a12:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a14:	415b      	adcs	r3, r3
 8006a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a1c:	4641      	mov	r1, r8
 8006a1e:	1851      	adds	r1, r2, r1
 8006a20:	6339      	str	r1, [r7, #48]	; 0x30
 8006a22:	4649      	mov	r1, r9
 8006a24:	414b      	adcs	r3, r1
 8006a26:	637b      	str	r3, [r7, #52]	; 0x34
 8006a28:	f04f 0200 	mov.w	r2, #0
 8006a2c:	f04f 0300 	mov.w	r3, #0
 8006a30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a34:	4659      	mov	r1, fp
 8006a36:	00cb      	lsls	r3, r1, #3
 8006a38:	4651      	mov	r1, sl
 8006a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a3e:	4651      	mov	r1, sl
 8006a40:	00ca      	lsls	r2, r1, #3
 8006a42:	4610      	mov	r0, r2
 8006a44:	4619      	mov	r1, r3
 8006a46:	4603      	mov	r3, r0
 8006a48:	4642      	mov	r2, r8
 8006a4a:	189b      	adds	r3, r3, r2
 8006a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a50:	464b      	mov	r3, r9
 8006a52:	460a      	mov	r2, r1
 8006a54:	eb42 0303 	adc.w	r3, r2, r3
 8006a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a70:	460b      	mov	r3, r1
 8006a72:	18db      	adds	r3, r3, r3
 8006a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a76:	4613      	mov	r3, r2
 8006a78:	eb42 0303 	adc.w	r3, r2, r3
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a86:	f7fa f8d7 	bl	8000c38 <__aeabi_uldivmod>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <UART_SetConfig+0x2f4>)
 8006a90:	fba3 1302 	umull	r1, r3, r3, r2
 8006a94:	095b      	lsrs	r3, r3, #5
 8006a96:	2164      	movs	r1, #100	; 0x64
 8006a98:	fb01 f303 	mul.w	r3, r1, r3
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	3332      	adds	r3, #50	; 0x32
 8006aa2:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <UART_SetConfig+0x2f4>)
 8006aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	f003 0207 	and.w	r2, r3, #7
 8006aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4422      	add	r2, r4
 8006ab6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ab8:	e10a      	b.n	8006cd0 <UART_SetConfig+0x4f8>
 8006aba:	bf00      	nop
 8006abc:	40011000 	.word	0x40011000
 8006ac0:	40011400 	.word	0x40011400
 8006ac4:	40011800 	.word	0x40011800
 8006ac8:	40011c00 	.word	0x40011c00
 8006acc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ada:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ade:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ae2:	4642      	mov	r2, r8
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	1891      	adds	r1, r2, r2
 8006ae8:	6239      	str	r1, [r7, #32]
 8006aea:	415b      	adcs	r3, r3
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
 8006aee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006af2:	4641      	mov	r1, r8
 8006af4:	1854      	adds	r4, r2, r1
 8006af6:	4649      	mov	r1, r9
 8006af8:	eb43 0501 	adc.w	r5, r3, r1
 8006afc:	f04f 0200 	mov.w	r2, #0
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	00eb      	lsls	r3, r5, #3
 8006b06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b0a:	00e2      	lsls	r2, r4, #3
 8006b0c:	4614      	mov	r4, r2
 8006b0e:	461d      	mov	r5, r3
 8006b10:	4643      	mov	r3, r8
 8006b12:	18e3      	adds	r3, r4, r3
 8006b14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b18:	464b      	mov	r3, r9
 8006b1a:	eb45 0303 	adc.w	r3, r5, r3
 8006b1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b3e:	4629      	mov	r1, r5
 8006b40:	008b      	lsls	r3, r1, #2
 8006b42:	4621      	mov	r1, r4
 8006b44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b48:	4621      	mov	r1, r4
 8006b4a:	008a      	lsls	r2, r1, #2
 8006b4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b50:	f7fa f872 	bl	8000c38 <__aeabi_uldivmod>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4b60      	ldr	r3, [pc, #384]	; (8006cdc <UART_SetConfig+0x504>)
 8006b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b5e:	095b      	lsrs	r3, r3, #5
 8006b60:	011c      	lsls	r4, r3, #4
 8006b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b74:	4642      	mov	r2, r8
 8006b76:	464b      	mov	r3, r9
 8006b78:	1891      	adds	r1, r2, r2
 8006b7a:	61b9      	str	r1, [r7, #24]
 8006b7c:	415b      	adcs	r3, r3
 8006b7e:	61fb      	str	r3, [r7, #28]
 8006b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b84:	4641      	mov	r1, r8
 8006b86:	1851      	adds	r1, r2, r1
 8006b88:	6139      	str	r1, [r7, #16]
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	414b      	adcs	r3, r1
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b9c:	4659      	mov	r1, fp
 8006b9e:	00cb      	lsls	r3, r1, #3
 8006ba0:	4651      	mov	r1, sl
 8006ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ba6:	4651      	mov	r1, sl
 8006ba8:	00ca      	lsls	r2, r1, #3
 8006baa:	4610      	mov	r0, r2
 8006bac:	4619      	mov	r1, r3
 8006bae:	4603      	mov	r3, r0
 8006bb0:	4642      	mov	r2, r8
 8006bb2:	189b      	adds	r3, r3, r2
 8006bb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bb8:	464b      	mov	r3, r9
 8006bba:	460a      	mov	r2, r1
 8006bbc:	eb42 0303 	adc.w	r3, r2, r3
 8006bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006bd0:	f04f 0200 	mov.w	r2, #0
 8006bd4:	f04f 0300 	mov.w	r3, #0
 8006bd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bdc:	4649      	mov	r1, r9
 8006bde:	008b      	lsls	r3, r1, #2
 8006be0:	4641      	mov	r1, r8
 8006be2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006be6:	4641      	mov	r1, r8
 8006be8:	008a      	lsls	r2, r1, #2
 8006bea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006bee:	f7fa f823 	bl	8000c38 <__aeabi_uldivmod>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	4b38      	ldr	r3, [pc, #224]	; (8006cdc <UART_SetConfig+0x504>)
 8006bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	2264      	movs	r2, #100	; 0x64
 8006c02:	fb02 f303 	mul.w	r3, r2, r3
 8006c06:	1acb      	subs	r3, r1, r3
 8006c08:	011b      	lsls	r3, r3, #4
 8006c0a:	3332      	adds	r3, #50	; 0x32
 8006c0c:	4a33      	ldr	r2, [pc, #204]	; (8006cdc <UART_SetConfig+0x504>)
 8006c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c18:	441c      	add	r4, r3
 8006c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c1e:	2200      	movs	r2, #0
 8006c20:	673b      	str	r3, [r7, #112]	; 0x70
 8006c22:	677a      	str	r2, [r7, #116]	; 0x74
 8006c24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c28:	4642      	mov	r2, r8
 8006c2a:	464b      	mov	r3, r9
 8006c2c:	1891      	adds	r1, r2, r2
 8006c2e:	60b9      	str	r1, [r7, #8]
 8006c30:	415b      	adcs	r3, r3
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c38:	4641      	mov	r1, r8
 8006c3a:	1851      	adds	r1, r2, r1
 8006c3c:	6039      	str	r1, [r7, #0]
 8006c3e:	4649      	mov	r1, r9
 8006c40:	414b      	adcs	r3, r1
 8006c42:	607b      	str	r3, [r7, #4]
 8006c44:	f04f 0200 	mov.w	r2, #0
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c50:	4659      	mov	r1, fp
 8006c52:	00cb      	lsls	r3, r1, #3
 8006c54:	4651      	mov	r1, sl
 8006c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c5a:	4651      	mov	r1, sl
 8006c5c:	00ca      	lsls	r2, r1, #3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	4619      	mov	r1, r3
 8006c62:	4603      	mov	r3, r0
 8006c64:	4642      	mov	r2, r8
 8006c66:	189b      	adds	r3, r3, r2
 8006c68:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c6a:	464b      	mov	r3, r9
 8006c6c:	460a      	mov	r2, r1
 8006c6e:	eb42 0303 	adc.w	r3, r2, r3
 8006c72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c7e:	667a      	str	r2, [r7, #100]	; 0x64
 8006c80:	f04f 0200 	mov.w	r2, #0
 8006c84:	f04f 0300 	mov.w	r3, #0
 8006c88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	008b      	lsls	r3, r1, #2
 8006c90:	4641      	mov	r1, r8
 8006c92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c96:	4641      	mov	r1, r8
 8006c98:	008a      	lsls	r2, r1, #2
 8006c9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c9e:	f7f9 ffcb 	bl	8000c38 <__aeabi_uldivmod>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4b0d      	ldr	r3, [pc, #52]	; (8006cdc <UART_SetConfig+0x504>)
 8006ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8006cac:	095b      	lsrs	r3, r3, #5
 8006cae:	2164      	movs	r1, #100	; 0x64
 8006cb0:	fb01 f303 	mul.w	r3, r1, r3
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	3332      	adds	r3, #50	; 0x32
 8006cba:	4a08      	ldr	r2, [pc, #32]	; (8006cdc <UART_SetConfig+0x504>)
 8006cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc0:	095b      	lsrs	r3, r3, #5
 8006cc2:	f003 020f 	and.w	r2, r3, #15
 8006cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4422      	add	r2, r4
 8006cce:	609a      	str	r2, [r3, #8]
}
 8006cd0:	bf00      	nop
 8006cd2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cdc:	51eb851f 	.word	0x51eb851f

08006ce0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	f107 001c 	add.w	r0, r7, #28
 8006cee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d122      	bne.n	8006d3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d105      	bne.n	8006d32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 fbe8 	bl	8008508 <USB_CoreReset>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	73fb      	strb	r3, [r7, #15]
 8006d3c:	e01a      	b.n	8006d74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 fbdc 	bl	8008508 <USB_CoreReset>
 8006d50:	4603      	mov	r3, r0
 8006d52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	639a      	str	r2, [r3, #56]	; 0x38
 8006d66:	e005      	b.n	8006d74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d10b      	bne.n	8006d92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f043 0206 	orr.w	r2, r3, #6
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f043 0220 	orr.w	r2, r3, #32
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d9e:	b004      	add	sp, #16
 8006da0:	4770      	bx	lr
	...

08006da4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	4613      	mov	r3, r2
 8006db0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006db2:	79fb      	ldrb	r3, [r7, #7]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d165      	bne.n	8006e84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4a41      	ldr	r2, [pc, #260]	; (8006ec0 <USB_SetTurnaroundTime+0x11c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d906      	bls.n	8006dce <USB_SetTurnaroundTime+0x2a>
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4a40      	ldr	r2, [pc, #256]	; (8006ec4 <USB_SetTurnaroundTime+0x120>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d202      	bcs.n	8006dce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006dc8:	230f      	movs	r3, #15
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	e062      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	4a3c      	ldr	r2, [pc, #240]	; (8006ec4 <USB_SetTurnaroundTime+0x120>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d306      	bcc.n	8006de4 <USB_SetTurnaroundTime+0x40>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	4a3b      	ldr	r2, [pc, #236]	; (8006ec8 <USB_SetTurnaroundTime+0x124>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d202      	bcs.n	8006de4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006dde:	230e      	movs	r3, #14
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	e057      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4a38      	ldr	r2, [pc, #224]	; (8006ec8 <USB_SetTurnaroundTime+0x124>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d306      	bcc.n	8006dfa <USB_SetTurnaroundTime+0x56>
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4a37      	ldr	r2, [pc, #220]	; (8006ecc <USB_SetTurnaroundTime+0x128>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d202      	bcs.n	8006dfa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006df4:	230d      	movs	r3, #13
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	e04c      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	4a33      	ldr	r2, [pc, #204]	; (8006ecc <USB_SetTurnaroundTime+0x128>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d306      	bcc.n	8006e10 <USB_SetTurnaroundTime+0x6c>
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	4a32      	ldr	r2, [pc, #200]	; (8006ed0 <USB_SetTurnaroundTime+0x12c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d802      	bhi.n	8006e10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006e0a:	230c      	movs	r3, #12
 8006e0c:	617b      	str	r3, [r7, #20]
 8006e0e:	e041      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	4a2f      	ldr	r2, [pc, #188]	; (8006ed0 <USB_SetTurnaroundTime+0x12c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d906      	bls.n	8006e26 <USB_SetTurnaroundTime+0x82>
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4a2e      	ldr	r2, [pc, #184]	; (8006ed4 <USB_SetTurnaroundTime+0x130>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d802      	bhi.n	8006e26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006e20:	230b      	movs	r3, #11
 8006e22:	617b      	str	r3, [r7, #20]
 8006e24:	e036      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	4a2a      	ldr	r2, [pc, #168]	; (8006ed4 <USB_SetTurnaroundTime+0x130>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d906      	bls.n	8006e3c <USB_SetTurnaroundTime+0x98>
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	4a29      	ldr	r2, [pc, #164]	; (8006ed8 <USB_SetTurnaroundTime+0x134>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d802      	bhi.n	8006e3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006e36:	230a      	movs	r3, #10
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	e02b      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	4a26      	ldr	r2, [pc, #152]	; (8006ed8 <USB_SetTurnaroundTime+0x134>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d906      	bls.n	8006e52 <USB_SetTurnaroundTime+0xae>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	4a25      	ldr	r2, [pc, #148]	; (8006edc <USB_SetTurnaroundTime+0x138>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d202      	bcs.n	8006e52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006e4c:	2309      	movs	r3, #9
 8006e4e:	617b      	str	r3, [r7, #20]
 8006e50:	e020      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	4a21      	ldr	r2, [pc, #132]	; (8006edc <USB_SetTurnaroundTime+0x138>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d306      	bcc.n	8006e68 <USB_SetTurnaroundTime+0xc4>
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	4a20      	ldr	r2, [pc, #128]	; (8006ee0 <USB_SetTurnaroundTime+0x13c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d802      	bhi.n	8006e68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006e62:	2308      	movs	r3, #8
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	e015      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4a1d      	ldr	r2, [pc, #116]	; (8006ee0 <USB_SetTurnaroundTime+0x13c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d906      	bls.n	8006e7e <USB_SetTurnaroundTime+0xda>
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	4a1c      	ldr	r2, [pc, #112]	; (8006ee4 <USB_SetTurnaroundTime+0x140>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d202      	bcs.n	8006e7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006e78:	2307      	movs	r3, #7
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	e00a      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006e7e:	2306      	movs	r3, #6
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	e007      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006e84:	79fb      	ldrb	r3, [r7, #7]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d102      	bne.n	8006e90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006e8a:	2309      	movs	r3, #9
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	e001      	b.n	8006e94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006e90:	2309      	movs	r3, #9
 8006e92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	029b      	lsls	r3, r3, #10
 8006ea8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006eac:	431a      	orrs	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	371c      	adds	r7, #28
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	00d8acbf 	.word	0x00d8acbf
 8006ec4:	00e4e1c0 	.word	0x00e4e1c0
 8006ec8:	00f42400 	.word	0x00f42400
 8006ecc:	01067380 	.word	0x01067380
 8006ed0:	011a499f 	.word	0x011a499f
 8006ed4:	01312cff 	.word	0x01312cff
 8006ed8:	014ca43f 	.word	0x014ca43f
 8006edc:	016e3600 	.word	0x016e3600
 8006ee0:	01a6ab1f 	.word	0x01a6ab1f
 8006ee4:	01e84800 	.word	0x01e84800

08006ee8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f043 0201 	orr.w	r2, r3, #1
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f023 0201 	bic.w	r2, r3, #1
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d115      	bne.n	8006f7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f5a:	2001      	movs	r0, #1
 8006f5c:	f7fb fb14 	bl	8002588 <HAL_Delay>
      ms++;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3301      	adds	r3, #1
 8006f64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 fa3f 	bl	80083ea <USB_GetMode>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d01e      	beq.n	8006fb0 <USB_SetCurrentMode+0x84>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2b31      	cmp	r3, #49	; 0x31
 8006f76:	d9f0      	bls.n	8006f5a <USB_SetCurrentMode+0x2e>
 8006f78:	e01a      	b.n	8006fb0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f7a:	78fb      	ldrb	r3, [r7, #3]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d115      	bne.n	8006fac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	f7fb fafb 	bl	8002588 <HAL_Delay>
      ms++;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3301      	adds	r3, #1
 8006f96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f001 fa26 	bl	80083ea <USB_GetMode>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <USB_SetCurrentMode+0x84>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b31      	cmp	r3, #49	; 0x31
 8006fa8:	d9f0      	bls.n	8006f8c <USB_SetCurrentMode+0x60>
 8006faa:	e001      	b.n	8006fb0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e005      	b.n	8006fbc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b32      	cmp	r3, #50	; 0x32
 8006fb4:	d101      	bne.n	8006fba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e000      	b.n	8006fbc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b086      	sub	sp, #24
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006fd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006fde:	2300      	movs	r3, #0
 8006fe0:	613b      	str	r3, [r7, #16]
 8006fe2:	e009      	b.n	8006ff8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	3340      	adds	r3, #64	; 0x40
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	4413      	add	r3, r2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	613b      	str	r3, [r7, #16]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	2b0e      	cmp	r3, #14
 8006ffc:	d9f2      	bls.n	8006fe4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007000:	2b00      	cmp	r3, #0
 8007002:	d11c      	bne.n	800703e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007012:	f043 0302 	orr.w	r3, r3, #2
 8007016:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	e005      	b.n	800704a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007042:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007050:	461a      	mov	r2, r3
 8007052:	2300      	movs	r3, #0
 8007054:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705c:	4619      	mov	r1, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007064:	461a      	mov	r2, r3
 8007066:	680b      	ldr	r3, [r1, #0]
 8007068:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	2b01      	cmp	r3, #1
 800706e:	d10c      	bne.n	800708a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	2b00      	cmp	r3, #0
 8007074:	d104      	bne.n	8007080 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007076:	2100      	movs	r1, #0
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f965 	bl	8007348 <USB_SetDevSpeed>
 800707e:	e008      	b.n	8007092 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007080:	2101      	movs	r1, #1
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f960 	bl	8007348 <USB_SetDevSpeed>
 8007088:	e003      	b.n	8007092 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800708a:	2103      	movs	r1, #3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f95b 	bl	8007348 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007092:	2110      	movs	r1, #16
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f8f3 	bl	8007280 <USB_FlushTxFifo>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f91f 	bl	80072e8 <USB_FlushRxFifo>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ba:	461a      	mov	r2, r3
 80070bc:	2300      	movs	r3, #0
 80070be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c6:	461a      	mov	r2, r3
 80070c8:	2300      	movs	r3, #0
 80070ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d2:	461a      	mov	r2, r3
 80070d4:	2300      	movs	r3, #0
 80070d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070d8:	2300      	movs	r3, #0
 80070da:	613b      	str	r3, [r7, #16]
 80070dc:	e043      	b.n	8007166 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070f4:	d118      	bne.n	8007128 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007108:	461a      	mov	r2, r3
 800710a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800710e:	6013      	str	r3, [r2, #0]
 8007110:	e013      	b.n	800713a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711e:	461a      	mov	r2, r3
 8007120:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	e008      	b.n	800713a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007134:	461a      	mov	r2, r3
 8007136:	2300      	movs	r3, #0
 8007138:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007146:	461a      	mov	r2, r3
 8007148:	2300      	movs	r3, #0
 800714a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007158:	461a      	mov	r2, r3
 800715a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800715e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	3301      	adds	r3, #1
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	429a      	cmp	r2, r3
 800716c:	d3b7      	bcc.n	80070de <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800716e:	2300      	movs	r3, #0
 8007170:	613b      	str	r3, [r7, #16]
 8007172:	e043      	b.n	80071fc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800718a:	d118      	bne.n	80071be <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719e:	461a      	mov	r2, r3
 80071a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	e013      	b.n	80071d0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b4:	461a      	mov	r2, r3
 80071b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071ba:	6013      	str	r3, [r2, #0]
 80071bc:	e008      	b.n	80071d0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ca:	461a      	mov	r2, r3
 80071cc:	2300      	movs	r3, #0
 80071ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071dc:	461a      	mov	r2, r3
 80071de:	2300      	movs	r3, #0
 80071e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	461a      	mov	r2, r3
 80071f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	3301      	adds	r3, #1
 80071fa:	613b      	str	r3, [r7, #16]
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	429a      	cmp	r2, r3
 8007202:	d3b7      	bcc.n	8007174 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007212:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007216:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007224:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	2b00      	cmp	r3, #0
 800722a:	d105      	bne.n	8007238 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	f043 0210 	orr.w	r2, r3, #16
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699a      	ldr	r2, [r3, #24]
 800723c:	4b0f      	ldr	r3, [pc, #60]	; (800727c <USB_DevInit+0x2b8>)
 800723e:	4313      	orrs	r3, r2
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007246:	2b00      	cmp	r3, #0
 8007248:	d005      	beq.n	8007256 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	f043 0208 	orr.w	r2, r3, #8
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007258:	2b01      	cmp	r3, #1
 800725a:	d107      	bne.n	800726c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007264:	f043 0304 	orr.w	r3, r3, #4
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800726c:	7dfb      	ldrb	r3, [r7, #23]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007278:	b004      	add	sp, #16
 800727a:	4770      	bx	lr
 800727c:	803c3800 	.word	0x803c3800

08007280 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3301      	adds	r3, #1
 8007292:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4a13      	ldr	r2, [pc, #76]	; (80072e4 <USB_FlushTxFifo+0x64>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d901      	bls.n	80072a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e01b      	b.n	80072d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	daf2      	bge.n	800728e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	019b      	lsls	r3, r3, #6
 80072b0:	f043 0220 	orr.w	r2, r3, #32
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3301      	adds	r3, #1
 80072bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4a08      	ldr	r2, [pc, #32]	; (80072e4 <USB_FlushTxFifo+0x64>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d901      	bls.n	80072ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e006      	b.n	80072d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f003 0320 	and.w	r3, r3, #32
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d0f0      	beq.n	80072b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	00030d40 	.word	0x00030d40

080072e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3301      	adds	r3, #1
 80072f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4a11      	ldr	r2, [pc, #68]	; (8007344 <USB_FlushRxFifo+0x5c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d901      	bls.n	8007306 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e018      	b.n	8007338 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	daf2      	bge.n	80072f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2210      	movs	r2, #16
 8007316:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3301      	adds	r3, #1
 800731c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4a08      	ldr	r2, [pc, #32]	; (8007344 <USB_FlushRxFifo+0x5c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d901      	bls.n	800732a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e006      	b.n	8007338 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f003 0310 	and.w	r3, r3, #16
 8007332:	2b10      	cmp	r3, #16
 8007334:	d0f0      	beq.n	8007318 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	00030d40 	.word	0x00030d40

08007348 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	460b      	mov	r3, r1
 8007352:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	78fb      	ldrb	r3, [r7, #3]
 8007362:	68f9      	ldr	r1, [r7, #12]
 8007364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007368:	4313      	orrs	r3, r2
 800736a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800737a:	b480      	push	{r7}
 800737c:	b087      	sub	sp, #28
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f003 0306 	and.w	r3, r3, #6
 8007392:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d102      	bne.n	80073a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800739a:	2300      	movs	r3, #0
 800739c:	75fb      	strb	r3, [r7, #23]
 800739e:	e00a      	b.n	80073b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d002      	beq.n	80073ac <USB_GetDevSpeed+0x32>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b06      	cmp	r3, #6
 80073aa:	d102      	bne.n	80073b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80073ac:	2302      	movs	r3, #2
 80073ae:	75fb      	strb	r3, [r7, #23]
 80073b0:	e001      	b.n	80073b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80073b2:	230f      	movs	r3, #15
 80073b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d13a      	bne.n	8007456 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e6:	69da      	ldr	r2, [r3, #28]
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	f003 030f 	and.w	r3, r3, #15
 80073f0:	2101      	movs	r1, #1
 80073f2:	fa01 f303 	lsl.w	r3, r1, r3
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	68f9      	ldr	r1, [r7, #12]
 80073fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073fe:	4313      	orrs	r3, r2
 8007400:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d155      	bne.n	80074c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4413      	add	r3, r2
 8007420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	791b      	ldrb	r3, [r3, #4]
 8007432:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007434:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	059b      	lsls	r3, r3, #22
 800743a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800743c:	4313      	orrs	r3, r2
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	0151      	lsls	r1, r2, #5
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	440a      	add	r2, r1
 8007446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800744a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800744e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007452:	6013      	str	r3, [r2, #0]
 8007454:	e036      	b.n	80074c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745c:	69da      	ldr	r2, [r3, #28]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	f003 030f 	and.w	r3, r3, #15
 8007466:	2101      	movs	r1, #1
 8007468:	fa01 f303 	lsl.w	r3, r1, r3
 800746c:	041b      	lsls	r3, r3, #16
 800746e:	68f9      	ldr	r1, [r7, #12]
 8007470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007474:	4313      	orrs	r3, r2
 8007476:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d11a      	bne.n	80074c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	4413      	add	r3, r2
 8007496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	791b      	ldrb	r3, [r3, #4]
 80074a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80074aa:	430b      	orrs	r3, r1
 80074ac:	4313      	orrs	r3, r2
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	0151      	lsls	r1, r2, #5
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	440a      	add	r2, r1
 80074b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
	...

080074d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	785b      	ldrb	r3, [r3, #1]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d161      	bne.n	80075b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	015a      	lsls	r2, r3, #5
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007506:	d11f      	bne.n	8007548 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	015a      	lsls	r2, r3, #5
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	0151      	lsls	r1, r2, #5
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	440a      	add	r2, r1
 800751e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007522:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007526:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	0151      	lsls	r1, r2, #5
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	440a      	add	r2, r1
 800753e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007542:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007546:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	f003 030f 	and.w	r3, r3, #15
 8007558:	2101      	movs	r1, #1
 800755a:	fa01 f303 	lsl.w	r3, r1, r3
 800755e:	b29b      	uxth	r3, r3
 8007560:	43db      	mvns	r3, r3
 8007562:	68f9      	ldr	r1, [r7, #12]
 8007564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007568:	4013      	ands	r3, r2
 800756a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007572:	69da      	ldr	r2, [r3, #28]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	f003 030f 	and.w	r3, r3, #15
 800757c:	2101      	movs	r1, #1
 800757e:	fa01 f303 	lsl.w	r3, r1, r3
 8007582:	b29b      	uxth	r3, r3
 8007584:	43db      	mvns	r3, r3
 8007586:	68f9      	ldr	r1, [r7, #12]
 8007588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800758c:	4013      	ands	r3, r2
 800758e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	0159      	lsls	r1, r3, #5
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	440b      	add	r3, r1
 80075a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075aa:	4619      	mov	r1, r3
 80075ac:	4b35      	ldr	r3, [pc, #212]	; (8007684 <USB_DeactivateEndpoint+0x1b0>)
 80075ae:	4013      	ands	r3, r2
 80075b0:	600b      	str	r3, [r1, #0]
 80075b2:	e060      	b.n	8007676 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075ca:	d11f      	bne.n	800760c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	0151      	lsls	r1, r2, #5
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	440a      	add	r2, r1
 80075e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	0151      	lsls	r1, r2, #5
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	440a      	add	r2, r1
 8007602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007606:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800760a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	f003 030f 	and.w	r3, r3, #15
 800761c:	2101      	movs	r1, #1
 800761e:	fa01 f303 	lsl.w	r3, r1, r3
 8007622:	041b      	lsls	r3, r3, #16
 8007624:	43db      	mvns	r3, r3
 8007626:	68f9      	ldr	r1, [r7, #12]
 8007628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800762c:	4013      	ands	r3, r2
 800762e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007636:	69da      	ldr	r2, [r3, #28]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	f003 030f 	and.w	r3, r3, #15
 8007640:	2101      	movs	r1, #1
 8007642:	fa01 f303 	lsl.w	r3, r1, r3
 8007646:	041b      	lsls	r3, r3, #16
 8007648:	43db      	mvns	r3, r3
 800764a:	68f9      	ldr	r1, [r7, #12]
 800764c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007650:	4013      	ands	r3, r2
 8007652:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	0159      	lsls	r1, r3, #5
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	440b      	add	r3, r1
 800766a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800766e:	4619      	mov	r1, r3
 8007670:	4b05      	ldr	r3, [pc, #20]	; (8007688 <USB_DeactivateEndpoint+0x1b4>)
 8007672:	4013      	ands	r3, r2
 8007674:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	ec337800 	.word	0xec337800
 8007688:	eff37800 	.word	0xeff37800

0800768c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08a      	sub	sp, #40	; 0x28
 8007690:	af02      	add	r7, sp, #8
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	4613      	mov	r3, r2
 8007698:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	f040 815c 	bne.w	8007966 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d132      	bne.n	800771c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	0151      	lsls	r1, r2, #5
 80076c8:	69fa      	ldr	r2, [r7, #28]
 80076ca:	440a      	add	r2, r1
 80076cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	0151      	lsls	r1, r2, #5
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	440a      	add	r2, r1
 80076f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	0151      	lsls	r1, r2, #5
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	440a      	add	r2, r1
 8007710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007714:	0cdb      	lsrs	r3, r3, #19
 8007716:	04db      	lsls	r3, r3, #19
 8007718:	6113      	str	r3, [r2, #16]
 800771a:	e074      	b.n	8007806 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	0151      	lsls	r1, r2, #5
 800772e:	69fa      	ldr	r2, [r7, #28]
 8007730:	440a      	add	r2, r1
 8007732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007736:	0cdb      	lsrs	r3, r3, #19
 8007738:	04db      	lsls	r3, r3, #19
 800773a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	0151      	lsls	r1, r2, #5
 800774e:	69fa      	ldr	r2, [r7, #28]
 8007750:	440a      	add	r2, r1
 8007752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007756:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800775a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800775e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	6999      	ldr	r1, [r3, #24]
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	440b      	add	r3, r1
 8007778:	1e59      	subs	r1, r3, #1
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007782:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007784:	4b9d      	ldr	r3, [pc, #628]	; (80079fc <USB_EPStartXfer+0x370>)
 8007786:	400b      	ands	r3, r1
 8007788:	69b9      	ldr	r1, [r7, #24]
 800778a:	0148      	lsls	r0, r1, #5
 800778c:	69f9      	ldr	r1, [r7, #28]
 800778e:	4401      	add	r1, r0
 8007790:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007794:	4313      	orrs	r3, r2
 8007796:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a4:	691a      	ldr	r2, [r3, #16]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077ae:	69b9      	ldr	r1, [r7, #24]
 80077b0:	0148      	lsls	r0, r1, #5
 80077b2:	69f9      	ldr	r1, [r7, #28]
 80077b4:	4401      	add	r1, r0
 80077b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80077ba:	4313      	orrs	r3, r2
 80077bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	791b      	ldrb	r3, [r3, #4]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d11f      	bne.n	8007806 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	0151      	lsls	r1, r2, #5
 80077d8:	69fa      	ldr	r2, [r7, #28]
 80077da:	440a      	add	r2, r1
 80077dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80077e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	0151      	lsls	r1, r2, #5
 80077f8:	69fa      	ldr	r2, [r7, #28]
 80077fa:	440a      	add	r2, r1
 80077fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007800:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007804:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007806:	79fb      	ldrb	r3, [r7, #7]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d14b      	bne.n	80078a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d009      	beq.n	8007828 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007820:	461a      	mov	r2, r3
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	791b      	ldrb	r3, [r3, #4]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d128      	bne.n	8007882 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783c:	2b00      	cmp	r3, #0
 800783e:	d110      	bne.n	8007862 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	0151      	lsls	r1, r2, #5
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	440a      	add	r2, r1
 8007856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800785a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800785e:	6013      	str	r3, [r2, #0]
 8007860:	e00f      	b.n	8007882 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	0151      	lsls	r1, r2, #5
 8007874:	69fa      	ldr	r2, [r7, #28]
 8007876:	440a      	add	r2, r1
 8007878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800787c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007880:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	4413      	add	r3, r2
 800788a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	0151      	lsls	r1, r2, #5
 8007894:	69fa      	ldr	r2, [r7, #28]
 8007896:	440a      	add	r2, r1
 8007898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800789c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	e133      	b.n	8007b0c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	0151      	lsls	r1, r2, #5
 80078b6:	69fa      	ldr	r2, [r7, #28]
 80078b8:	440a      	add	r2, r1
 80078ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	791b      	ldrb	r3, [r3, #4]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d015      	beq.n	80078f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 811b 	beq.w	8007b0c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	f003 030f 	and.w	r3, r3, #15
 80078e6:	2101      	movs	r1, #1
 80078e8:	fa01 f303 	lsl.w	r3, r1, r3
 80078ec:	69f9      	ldr	r1, [r7, #28]
 80078ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078f2:	4313      	orrs	r3, r2
 80078f4:	634b      	str	r3, [r1, #52]	; 0x34
 80078f6:	e109      	b.n	8007b0c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007904:	2b00      	cmp	r3, #0
 8007906:	d110      	bne.n	800792a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	0151      	lsls	r1, r2, #5
 800791a:	69fa      	ldr	r2, [r7, #28]
 800791c:	440a      	add	r2, r1
 800791e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007922:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	e00f      	b.n	800794a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	0151      	lsls	r1, r2, #5
 800793c:	69fa      	ldr	r2, [r7, #28]
 800793e:	440a      	add	r2, r1
 8007940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007948:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6919      	ldr	r1, [r3, #16]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	781a      	ldrb	r2, [r3, #0]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	b298      	uxth	r0, r3
 8007958:	79fb      	ldrb	r3, [r7, #7]
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	4603      	mov	r3, r0
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 fade 	bl	8007f20 <USB_WritePacket>
 8007964:	e0d2      	b.n	8007b0c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	015a      	lsls	r2, r3, #5
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	4413      	add	r3, r2
 800796e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	0151      	lsls	r1, r2, #5
 8007978:	69fa      	ldr	r2, [r7, #28]
 800797a:	440a      	add	r2, r1
 800797c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007980:	0cdb      	lsrs	r3, r3, #19
 8007982:	04db      	lsls	r3, r3, #19
 8007984:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	4413      	add	r3, r2
 800798e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	0151      	lsls	r1, r2, #5
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	440a      	add	r2, r1
 800799c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d126      	bne.n	8007a00 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079be:	691a      	ldr	r2, [r3, #16]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079c8:	69b9      	ldr	r1, [r7, #24]
 80079ca:	0148      	lsls	r0, r1, #5
 80079cc:	69f9      	ldr	r1, [r7, #28]
 80079ce:	4401      	add	r1, r0
 80079d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079d4:	4313      	orrs	r3, r2
 80079d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	0151      	lsls	r1, r2, #5
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	440a      	add	r2, r1
 80079ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079f6:	6113      	str	r3, [r2, #16]
 80079f8:	e03a      	b.n	8007a70 <USB_EPStartXfer+0x3e4>
 80079fa:	bf00      	nop
 80079fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	699a      	ldr	r2, [r3, #24]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	4413      	add	r3, r2
 8007a0a:	1e5a      	subs	r2, r3, #1
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a14:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	8afa      	ldrh	r2, [r7, #22]
 8007a1c:	fb03 f202 	mul.w	r2, r3, r2
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	8afb      	ldrh	r3, [r7, #22]
 8007a34:	04d9      	lsls	r1, r3, #19
 8007a36:	4b38      	ldr	r3, [pc, #224]	; (8007b18 <USB_EPStartXfer+0x48c>)
 8007a38:	400b      	ands	r3, r1
 8007a3a:	69b9      	ldr	r1, [r7, #24]
 8007a3c:	0148      	lsls	r0, r1, #5
 8007a3e:	69f9      	ldr	r1, [r7, #28]
 8007a40:	4401      	add	r1, r0
 8007a42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a46:	4313      	orrs	r3, r2
 8007a48:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a60:	69b9      	ldr	r1, [r7, #24]
 8007a62:	0148      	lsls	r0, r1, #5
 8007a64:	69f9      	ldr	r1, [r7, #28]
 8007a66:	4401      	add	r1, r0
 8007a68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d10d      	bne.n	8007a92 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d009      	beq.n	8007a92 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6919      	ldr	r1, [r3, #16]
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8e:	460a      	mov	r2, r1
 8007a90:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	791b      	ldrb	r3, [r3, #4]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d128      	bne.n	8007aec <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d110      	bne.n	8007acc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	0151      	lsls	r1, r2, #5
 8007abc:	69fa      	ldr	r2, [r7, #28]
 8007abe:	440a      	add	r2, r1
 8007ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ac8:	6013      	str	r3, [r2, #0]
 8007aca:	e00f      	b.n	8007aec <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	0151      	lsls	r1, r2, #5
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	440a      	add	r2, r1
 8007ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	0151      	lsls	r1, r2, #5
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	440a      	add	r2, r1
 8007b02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3720      	adds	r7, #32
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	1ff80000 	.word	0x1ff80000

08007b1c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	4613      	mov	r3, r2
 8007b28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	785b      	ldrb	r3, [r3, #1]
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	f040 80ce 	bne.w	8007cda <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d132      	bne.n	8007bac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	0151      	lsls	r1, r2, #5
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	440a      	add	r2, r1
 8007b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	015a      	lsls	r2, r3, #5
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	0151      	lsls	r1, r2, #5
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	440a      	add	r2, r1
 8007b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	0151      	lsls	r1, r2, #5
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	440a      	add	r2, r1
 8007ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ba4:	0cdb      	lsrs	r3, r3, #19
 8007ba6:	04db      	lsls	r3, r3, #19
 8007ba8:	6113      	str	r3, [r2, #16]
 8007baa:	e04e      	b.n	8007c4a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	0151      	lsls	r1, r2, #5
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	440a      	add	r2, r1
 8007bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bc6:	0cdb      	lsrs	r3, r3, #19
 8007bc8:	04db      	lsls	r3, r3, #19
 8007bca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	0151      	lsls	r1, r2, #5
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	440a      	add	r2, r1
 8007be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007bea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007bee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	699a      	ldr	r2, [r3, #24]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d903      	bls.n	8007c04 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	0151      	lsls	r1, r2, #5
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	440a      	add	r2, r1
 8007c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c30:	691a      	ldr	r2, [r3, #16]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c3a:	6939      	ldr	r1, [r7, #16]
 8007c3c:	0148      	lsls	r0, r1, #5
 8007c3e:	6979      	ldr	r1, [r7, #20]
 8007c40:	4401      	add	r1, r0
 8007c42:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c46:	4313      	orrs	r3, r2
 8007c48:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c4a:	79fb      	ldrb	r3, [r7, #7]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d11e      	bne.n	8007c8e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d009      	beq.n	8007c6c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c64:	461a      	mov	r2, r3
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	0151      	lsls	r1, r2, #5
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	440a      	add	r2, r1
 8007c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	e097      	b.n	8007dbe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	0151      	lsls	r1, r2, #5
 8007ca0:	697a      	ldr	r2, [r7, #20]
 8007ca2:	440a      	add	r2, r1
 8007ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ca8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f000 8083 	beq.w	8007dbe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	f003 030f 	and.w	r3, r3, #15
 8007cc8:	2101      	movs	r1, #1
 8007cca:	fa01 f303 	lsl.w	r3, r1, r3
 8007cce:	6979      	ldr	r1, [r7, #20]
 8007cd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	634b      	str	r3, [r1, #52]	; 0x34
 8007cd8:	e071      	b.n	8007dbe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	0151      	lsls	r1, r2, #5
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	440a      	add	r2, r1
 8007cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cf4:	0cdb      	lsrs	r3, r3, #19
 8007cf6:	04db      	lsls	r3, r3, #19
 8007cf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	0151      	lsls	r1, r2, #5
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	440a      	add	r2, r1
 8007d10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	68da      	ldr	r2, [r3, #12]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	0151      	lsls	r1, r2, #5
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	440a      	add	r2, r1
 8007d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	015a      	lsls	r2, r3, #5
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d62:	691a      	ldr	r2, [r3, #16]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d6c:	6939      	ldr	r1, [r7, #16]
 8007d6e:	0148      	lsls	r0, r1, #5
 8007d70:	6979      	ldr	r1, [r7, #20]
 8007d72:	4401      	add	r1, r0
 8007d74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007d7c:	79fb      	ldrb	r3, [r7, #7]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d10d      	bne.n	8007d9e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d009      	beq.n	8007d9e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	6919      	ldr	r1, [r3, #16]
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d9a:	460a      	mov	r2, r1
 8007d9c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	015a      	lsls	r2, r3, #5
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	0151      	lsls	r1, r2, #5
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	440a      	add	r2, r1
 8007db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007db8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	371c      	adds	r7, #28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	785b      	ldrb	r3, [r3, #1]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d14a      	bne.n	8007e80 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e02:	f040 8086 	bne.w	8007f12 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	7812      	ldrb	r2, [r2, #0]
 8007e1a:	0151      	lsls	r1, r2, #5
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	440a      	add	r2, r1
 8007e20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e28:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	7812      	ldrb	r2, [r2, #0]
 8007e3e:	0151      	lsls	r1, r2, #5
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	440a      	add	r2, r1
 8007e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3301      	adds	r3, #1
 8007e52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f242 7210 	movw	r2, #10000	; 0x2710
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d902      	bls.n	8007e64 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	75fb      	strb	r3, [r7, #23]
          break;
 8007e62:	e056      	b.n	8007f12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e7c:	d0e7      	beq.n	8007e4e <USB_EPStopXfer+0x82>
 8007e7e:	e048      	b.n	8007f12 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e98:	d13b      	bne.n	8007f12 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	7812      	ldrb	r2, [r2, #0]
 8007eae:	0151      	lsls	r1, r2, #5
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	440a      	add	r2, r1
 8007eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ebc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	7812      	ldrb	r2, [r2, #0]
 8007ed2:	0151      	lsls	r1, r2, #5
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	440a      	add	r2, r1
 8007ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ee0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f242 7210 	movw	r2, #10000	; 0x2710
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d902      	bls.n	8007ef8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ef6:	e00c      	b.n	8007f12 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f10:	d0e7      	beq.n	8007ee2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	371c      	adds	r7, #28
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b089      	sub	sp, #36	; 0x24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	460b      	mov	r3, r1
 8007f30:	71fb      	strb	r3, [r7, #7]
 8007f32:	4613      	mov	r3, r2
 8007f34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007f3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d123      	bne.n	8007f8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007f46:	88bb      	ldrh	r3, [r7, #4]
 8007f48:	3303      	adds	r3, #3
 8007f4a:	089b      	lsrs	r3, r3, #2
 8007f4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61bb      	str	r3, [r7, #24]
 8007f52:	e018      	b.n	8007f86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	031a      	lsls	r2, r3, #12
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f60:	461a      	mov	r2, r3
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	3301      	adds	r3, #1
 8007f72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	3301      	adds	r3, #1
 8007f78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	3301      	adds	r3, #1
 8007f84:	61bb      	str	r3, [r7, #24]
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d3e2      	bcc.n	8007f54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3724      	adds	r7, #36	; 0x24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b08b      	sub	sp, #44	; 0x2c
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007fb2:	88fb      	ldrh	r3, [r7, #6]
 8007fb4:	089b      	lsrs	r3, r3, #2
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007fba:	88fb      	ldrh	r3, [r7, #6]
 8007fbc:	f003 0303 	and.w	r3, r3, #3
 8007fc0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	623b      	str	r3, [r7, #32]
 8007fc6:	e014      	b.n	8007ff2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	3301      	adds	r3, #1
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	3301      	adds	r3, #1
 8007fea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	623b      	str	r3, [r7, #32]
 8007ff2:	6a3a      	ldr	r2, [r7, #32]
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d3e6      	bcc.n	8007fc8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007ffa:	8bfb      	ldrh	r3, [r7, #30]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01e      	beq.n	800803e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800800a:	461a      	mov	r2, r3
 800800c:	f107 0310 	add.w	r3, r7, #16
 8008010:	6812      	ldr	r2, [r2, #0]
 8008012:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	b2db      	uxtb	r3, r3
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	fa22 f303 	lsr.w	r3, r2, r3
 8008020:	b2da      	uxtb	r2, r3
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	701a      	strb	r2, [r3, #0]
      i++;
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	3301      	adds	r3, #1
 800802a:	623b      	str	r3, [r7, #32]
      pDest++;
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	3301      	adds	r3, #1
 8008030:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008032:	8bfb      	ldrh	r3, [r7, #30]
 8008034:	3b01      	subs	r3, #1
 8008036:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008038:	8bfb      	ldrh	r3, [r7, #30]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1ea      	bne.n	8008014 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008040:	4618      	mov	r0, r3
 8008042:	372c      	adds	r7, #44	; 0x2c
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	785b      	ldrb	r3, [r3, #1]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d12c      	bne.n	80080c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	015a      	lsls	r2, r3, #5
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	4413      	add	r3, r2
 8008070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	db12      	blt.n	80080a0 <USB_EPSetStall+0x54>
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00f      	beq.n	80080a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	0151      	lsls	r1, r2, #5
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	440a      	add	r2, r1
 8008096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800809a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800809e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	0151      	lsls	r1, r2, #5
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	440a      	add	r2, r1
 80080b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	e02b      	b.n	800811a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	db12      	blt.n	80080fa <USB_EPSetStall+0xae>
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00f      	beq.n	80080fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	0151      	lsls	r1, r2, #5
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	440a      	add	r2, r1
 80080f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80080f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	015a      	lsls	r2, r3, #5
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4413      	add	r3, r2
 8008102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	0151      	lsls	r1, r2, #5
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	440a      	add	r2, r1
 8008110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008118:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	785b      	ldrb	r3, [r3, #1]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d128      	bne.n	8008196 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4413      	add	r3, r2
 800814c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	0151      	lsls	r1, r2, #5
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	440a      	add	r2, r1
 800815a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800815e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008162:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	791b      	ldrb	r3, [r3, #4]
 8008168:	2b03      	cmp	r3, #3
 800816a:	d003      	beq.n	8008174 <USB_EPClearStall+0x4c>
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	791b      	ldrb	r3, [r3, #4]
 8008170:	2b02      	cmp	r3, #2
 8008172:	d138      	bne.n	80081e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	0151      	lsls	r1, r2, #5
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	440a      	add	r2, r1
 800818a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800818e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	e027      	b.n	80081e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	4413      	add	r3, r2
 800819e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	0151      	lsls	r1, r2, #5
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	440a      	add	r2, r1
 80081ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	791b      	ldrb	r3, [r3, #4]
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d003      	beq.n	80081c6 <USB_EPClearStall+0x9e>
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	791b      	ldrb	r3, [r3, #4]
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d10f      	bne.n	80081e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	0151      	lsls	r1, r2, #5
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	440a      	add	r2, r1
 80081dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008212:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008216:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008228:	68f9      	ldr	r1, [r7, #12]
 800822a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800822e:	4313      	orrs	r3, r2
 8008230:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800825a:	f023 0303 	bic.w	r3, r3, #3
 800825e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800826e:	f023 0302 	bic.w	r3, r3, #2
 8008272:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008282:	b480      	push	{r7}
 8008284:	b085      	sub	sp, #20
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800829c:	f023 0303 	bic.w	r3, r3, #3
 80082a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082b0:	f043 0302 	orr.w	r3, r3, #2
 80082b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	4013      	ands	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80082dc:	68fb      	ldr	r3, [r7, #12]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80082ea:	b480      	push	{r7}
 80082ec:	b085      	sub	sp, #20
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008306:	69db      	ldr	r3, [r3, #28]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	4013      	ands	r3, r2
 800830c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	0c1b      	lsrs	r3, r3, #16
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800831e:	b480      	push	{r7}
 8008320:	b085      	sub	sp, #20
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	4013      	ands	r3, r2
 8008340:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	b29b      	uxth	r3, r3
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008352:	b480      	push	{r7}
 8008354:	b085      	sub	sp, #20
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	460b      	mov	r3, r1
 800835c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008362:	78fb      	ldrb	r3, [r7, #3]
 8008364:	015a      	lsls	r2, r3, #5
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	4413      	add	r3, r2
 800836a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	4013      	ands	r3, r2
 800837e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008380:	68bb      	ldr	r3, [r7, #8]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800838e:	b480      	push	{r7}
 8008390:	b087      	sub	sp, #28
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	460b      	mov	r3, r1
 8008398:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80083b2:	78fb      	ldrb	r3, [r7, #3]
 80083b4:	f003 030f 	and.w	r3, r3, #15
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	fa22 f303 	lsr.w	r3, r2, r3
 80083be:	01db      	lsls	r3, r3, #7
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80083c8:	78fb      	ldrb	r3, [r7, #3]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	4013      	ands	r3, r2
 80083da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80083dc:	68bb      	ldr	r3, [r7, #8]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	371c      	adds	r7, #28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b083      	sub	sp, #12
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	f003 0301 	and.w	r3, r3, #1
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008420:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008424:	f023 0307 	bic.w	r3, r3, #7
 8008428:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800843c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	460b      	mov	r3, r1
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	333c      	adds	r3, #60	; 0x3c
 8008462:	3304      	adds	r3, #4
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	4a26      	ldr	r2, [pc, #152]	; (8008504 <USB_EP0_OutStart+0xb8>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d90a      	bls.n	8008486 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800847c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008480:	d101      	bne.n	8008486 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	e037      	b.n	80084f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800848c:	461a      	mov	r2, r3
 800848e:	2300      	movs	r3, #0
 8008490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084b4:	f043 0318 	orr.w	r3, r3, #24
 80084b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80084cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80084ce:	7afb      	ldrb	r3, [r7, #11]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d10f      	bne.n	80084f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084da:	461a      	mov	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80084f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	4f54300a 	.word	0x4f54300a

08008508 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008510:	2300      	movs	r3, #0
 8008512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	3301      	adds	r3, #1
 8008518:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	4a13      	ldr	r2, [pc, #76]	; (800856c <USB_CoreReset+0x64>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d901      	bls.n	8008526 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008522:	2303      	movs	r3, #3
 8008524:	e01b      	b.n	800855e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	691b      	ldr	r3, [r3, #16]
 800852a:	2b00      	cmp	r3, #0
 800852c:	daf2      	bge.n	8008514 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	f043 0201 	orr.w	r2, r3, #1
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3301      	adds	r3, #1
 8008542:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4a09      	ldr	r2, [pc, #36]	; (800856c <USB_CoreReset+0x64>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d901      	bls.n	8008550 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e006      	b.n	800855e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	2b01      	cmp	r3, #1
 800855a:	d0f0      	beq.n	800853e <USB_CoreReset+0x36>

  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	00030d40 	.word	0x00030d40

08008570 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800857c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008580:	f002 fc44 	bl	800ae0c <USBD_static_malloc>
 8008584:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d109      	bne.n	80085a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	32b0      	adds	r2, #176	; 0xb0
 8008596:	2100      	movs	r1, #0
 8008598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800859c:	2302      	movs	r3, #2
 800859e:	e0d4      	b.n	800874a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80085a0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80085a4:	2100      	movs	r1, #0
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f003 f8f6 	bl	800b798 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	32b0      	adds	r2, #176	; 0xb0
 80085b6:	68f9      	ldr	r1, [r7, #12]
 80085b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	32b0      	adds	r2, #176	; 0xb0
 80085c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	7c1b      	ldrb	r3, [r3, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d138      	bne.n	800864a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80085d8:	4b5e      	ldr	r3, [pc, #376]	; (8008754 <USBD_CDC_Init+0x1e4>)
 80085da:	7819      	ldrb	r1, [r3, #0]
 80085dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085e0:	2202      	movs	r2, #2
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f002 faef 	bl	800abc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80085e8:	4b5a      	ldr	r3, [pc, #360]	; (8008754 <USBD_CDC_Init+0x1e4>)
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	f003 020f 	and.w	r2, r3, #15
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	4613      	mov	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	440b      	add	r3, r1
 80085fc:	3324      	adds	r3, #36	; 0x24
 80085fe:	2201      	movs	r2, #1
 8008600:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008602:	4b55      	ldr	r3, [pc, #340]	; (8008758 <USBD_CDC_Init+0x1e8>)
 8008604:	7819      	ldrb	r1, [r3, #0]
 8008606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800860a:	2202      	movs	r2, #2
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f002 fada 	bl	800abc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008612:	4b51      	ldr	r3, [pc, #324]	; (8008758 <USBD_CDC_Init+0x1e8>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	f003 020f 	and.w	r2, r3, #15
 800861a:	6879      	ldr	r1, [r7, #4]
 800861c:	4613      	mov	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	440b      	add	r3, r1
 8008626:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800862a:	2201      	movs	r2, #1
 800862c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800862e:	4b4b      	ldr	r3, [pc, #300]	; (800875c <USBD_CDC_Init+0x1ec>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	f003 020f 	and.w	r2, r3, #15
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	4613      	mov	r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	440b      	add	r3, r1
 8008642:	3326      	adds	r3, #38	; 0x26
 8008644:	2210      	movs	r2, #16
 8008646:	801a      	strh	r2, [r3, #0]
 8008648:	e035      	b.n	80086b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800864a:	4b42      	ldr	r3, [pc, #264]	; (8008754 <USBD_CDC_Init+0x1e4>)
 800864c:	7819      	ldrb	r1, [r3, #0]
 800864e:	2340      	movs	r3, #64	; 0x40
 8008650:	2202      	movs	r2, #2
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f002 fab7 	bl	800abc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008658:	4b3e      	ldr	r3, [pc, #248]	; (8008754 <USBD_CDC_Init+0x1e4>)
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	f003 020f 	and.w	r2, r3, #15
 8008660:	6879      	ldr	r1, [r7, #4]
 8008662:	4613      	mov	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4413      	add	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	440b      	add	r3, r1
 800866c:	3324      	adds	r3, #36	; 0x24
 800866e:	2201      	movs	r2, #1
 8008670:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008672:	4b39      	ldr	r3, [pc, #228]	; (8008758 <USBD_CDC_Init+0x1e8>)
 8008674:	7819      	ldrb	r1, [r3, #0]
 8008676:	2340      	movs	r3, #64	; 0x40
 8008678:	2202      	movs	r2, #2
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f002 faa3 	bl	800abc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008680:	4b35      	ldr	r3, [pc, #212]	; (8008758 <USBD_CDC_Init+0x1e8>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	f003 020f 	and.w	r2, r3, #15
 8008688:	6879      	ldr	r1, [r7, #4]
 800868a:	4613      	mov	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	440b      	add	r3, r1
 8008694:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008698:	2201      	movs	r2, #1
 800869a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800869c:	4b2f      	ldr	r3, [pc, #188]	; (800875c <USBD_CDC_Init+0x1ec>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	f003 020f 	and.w	r2, r3, #15
 80086a4:	6879      	ldr	r1, [r7, #4]
 80086a6:	4613      	mov	r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	440b      	add	r3, r1
 80086b0:	3326      	adds	r3, #38	; 0x26
 80086b2:	2210      	movs	r2, #16
 80086b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80086b6:	4b29      	ldr	r3, [pc, #164]	; (800875c <USBD_CDC_Init+0x1ec>)
 80086b8:	7819      	ldrb	r1, [r3, #0]
 80086ba:	2308      	movs	r3, #8
 80086bc:	2203      	movs	r2, #3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f002 fa81 	bl	800abc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80086c4:	4b25      	ldr	r3, [pc, #148]	; (800875c <USBD_CDC_Init+0x1ec>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	f003 020f 	and.w	r2, r3, #15
 80086cc:	6879      	ldr	r1, [r7, #4]
 80086ce:	4613      	mov	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	440b      	add	r3, r1
 80086d8:	3324      	adds	r3, #36	; 0x24
 80086da:	2201      	movs	r2, #1
 80086dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	33b0      	adds	r3, #176	; 0xb0
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008714:	2302      	movs	r3, #2
 8008716:	e018      	b.n	800874a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	7c1b      	ldrb	r3, [r3, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10a      	bne.n	8008736 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008720:	4b0d      	ldr	r3, [pc, #52]	; (8008758 <USBD_CDC_Init+0x1e8>)
 8008722:	7819      	ldrb	r1, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800872a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f002 fb38 	bl	800ada4 <USBD_LL_PrepareReceive>
 8008734:	e008      	b.n	8008748 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008736:	4b08      	ldr	r3, [pc, #32]	; (8008758 <USBD_CDC_Init+0x1e8>)
 8008738:	7819      	ldrb	r1, [r3, #0]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008740:	2340      	movs	r3, #64	; 0x40
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f002 fb2e 	bl	800ada4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	200000a3 	.word	0x200000a3
 8008758:	200000a4 	.word	0x200000a4
 800875c:	200000a5 	.word	0x200000a5

08008760 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	460b      	mov	r3, r1
 800876a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800876c:	4b3a      	ldr	r3, [pc, #232]	; (8008858 <USBD_CDC_DeInit+0xf8>)
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f002 fa4d 	bl	800ac12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008778:	4b37      	ldr	r3, [pc, #220]	; (8008858 <USBD_CDC_DeInit+0xf8>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	f003 020f 	and.w	r2, r3, #15
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	440b      	add	r3, r1
 800878c:	3324      	adds	r3, #36	; 0x24
 800878e:	2200      	movs	r2, #0
 8008790:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008792:	4b32      	ldr	r3, [pc, #200]	; (800885c <USBD_CDC_DeInit+0xfc>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f002 fa3a 	bl	800ac12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800879e:	4b2f      	ldr	r3, [pc, #188]	; (800885c <USBD_CDC_DeInit+0xfc>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	f003 020f 	and.w	r2, r3, #15
 80087a6:	6879      	ldr	r1, [r7, #4]
 80087a8:	4613      	mov	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087b6:	2200      	movs	r2, #0
 80087b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80087ba:	4b29      	ldr	r3, [pc, #164]	; (8008860 <USBD_CDC_DeInit+0x100>)
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f002 fa26 	bl	800ac12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80087c6:	4b26      	ldr	r3, [pc, #152]	; (8008860 <USBD_CDC_DeInit+0x100>)
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	f003 020f 	and.w	r2, r3, #15
 80087ce:	6879      	ldr	r1, [r7, #4]
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	440b      	add	r3, r1
 80087da:	3324      	adds	r3, #36	; 0x24
 80087dc:	2200      	movs	r2, #0
 80087de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80087e0:	4b1f      	ldr	r3, [pc, #124]	; (8008860 <USBD_CDC_DeInit+0x100>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	f003 020f 	and.w	r2, r3, #15
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	440b      	add	r3, r1
 80087f4:	3326      	adds	r3, #38	; 0x26
 80087f6:	2200      	movs	r2, #0
 80087f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	32b0      	adds	r2, #176	; 0xb0
 8008804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d01f      	beq.n	800884c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	33b0      	adds	r3, #176	; 0xb0
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	32b0      	adds	r2, #176	; 0xb0
 800882a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800882e:	4618      	mov	r0, r3
 8008830:	f002 fafa 	bl	800ae28 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	32b0      	adds	r2, #176	; 0xb0
 800883e:	2100      	movs	r1, #0
 8008840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	200000a3 	.word	0x200000a3
 800885c:	200000a4 	.word	0x200000a4
 8008860:	200000a5 	.word	0x200000a5

08008864 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	32b0      	adds	r2, #176	; 0xb0
 8008878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008890:	2303      	movs	r3, #3
 8008892:	e0bf      	b.n	8008a14 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800889c:	2b00      	cmp	r3, #0
 800889e:	d050      	beq.n	8008942 <USBD_CDC_Setup+0xde>
 80088a0:	2b20      	cmp	r3, #32
 80088a2:	f040 80af 	bne.w	8008a04 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	88db      	ldrh	r3, [r3, #6]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d03a      	beq.n	8008924 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	b25b      	sxtb	r3, r3
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	da1b      	bge.n	80088f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	33b0      	adds	r3, #176	; 0xb0
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80088ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	88d2      	ldrh	r2, [r2, #6]
 80088d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	88db      	ldrh	r3, [r3, #6]
 80088da:	2b07      	cmp	r3, #7
 80088dc:	bf28      	it	cs
 80088de:	2307      	movcs	r3, #7
 80088e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	89fa      	ldrh	r2, [r7, #14]
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f001 fd43 	bl	800a374 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80088ee:	e090      	b.n	8008a12 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	785a      	ldrb	r2, [r3, #1]
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	88db      	ldrh	r3, [r3, #6]
 80088fe:	2b3f      	cmp	r3, #63	; 0x3f
 8008900:	d803      	bhi.n	800890a <USBD_CDC_Setup+0xa6>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	88db      	ldrh	r3, [r3, #6]
 8008906:	b2da      	uxtb	r2, r3
 8008908:	e000      	b.n	800890c <USBD_CDC_Setup+0xa8>
 800890a:	2240      	movs	r2, #64	; 0x40
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008912:	6939      	ldr	r1, [r7, #16]
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800891a:	461a      	mov	r2, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f001 fd55 	bl	800a3cc <USBD_CtlPrepareRx>
      break;
 8008922:	e076      	b.n	8008a12 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	33b0      	adds	r3, #176	; 0xb0
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	7850      	ldrb	r0, [r2, #1]
 800893a:	2200      	movs	r2, #0
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	4798      	blx	r3
      break;
 8008940:	e067      	b.n	8008a12 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	785b      	ldrb	r3, [r3, #1]
 8008946:	2b0b      	cmp	r3, #11
 8008948:	d851      	bhi.n	80089ee <USBD_CDC_Setup+0x18a>
 800894a:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <USBD_CDC_Setup+0xec>)
 800894c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008950:	08008981 	.word	0x08008981
 8008954:	080089fd 	.word	0x080089fd
 8008958:	080089ef 	.word	0x080089ef
 800895c:	080089ef 	.word	0x080089ef
 8008960:	080089ef 	.word	0x080089ef
 8008964:	080089ef 	.word	0x080089ef
 8008968:	080089ef 	.word	0x080089ef
 800896c:	080089ef 	.word	0x080089ef
 8008970:	080089ef 	.word	0x080089ef
 8008974:	080089ef 	.word	0x080089ef
 8008978:	080089ab 	.word	0x080089ab
 800897c:	080089d5 	.word	0x080089d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b03      	cmp	r3, #3
 800898a:	d107      	bne.n	800899c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800898c:	f107 030a 	add.w	r3, r7, #10
 8008990:	2202      	movs	r2, #2
 8008992:	4619      	mov	r1, r3
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f001 fced 	bl	800a374 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800899a:	e032      	b.n	8008a02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f001 fc77 	bl	800a292 <USBD_CtlError>
            ret = USBD_FAIL;
 80089a4:	2303      	movs	r3, #3
 80089a6:	75fb      	strb	r3, [r7, #23]
          break;
 80089a8:	e02b      	b.n	8008a02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	d107      	bne.n	80089c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80089b6:	f107 030d 	add.w	r3, r7, #13
 80089ba:	2201      	movs	r2, #1
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 fcd8 	bl	800a374 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089c4:	e01d      	b.n	8008a02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 fc62 	bl	800a292 <USBD_CtlError>
            ret = USBD_FAIL;
 80089ce:	2303      	movs	r3, #3
 80089d0:	75fb      	strb	r3, [r7, #23]
          break;
 80089d2:	e016      	b.n	8008a02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d00f      	beq.n	8008a00 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f001 fc55 	bl	800a292 <USBD_CtlError>
            ret = USBD_FAIL;
 80089e8:	2303      	movs	r3, #3
 80089ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80089ec:	e008      	b.n	8008a00 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 fc4e 	bl	800a292 <USBD_CtlError>
          ret = USBD_FAIL;
 80089f6:	2303      	movs	r3, #3
 80089f8:	75fb      	strb	r3, [r7, #23]
          break;
 80089fa:	e002      	b.n	8008a02 <USBD_CDC_Setup+0x19e>
          break;
 80089fc:	bf00      	nop
 80089fe:	e008      	b.n	8008a12 <USBD_CDC_Setup+0x1ae>
          break;
 8008a00:	bf00      	nop
      }
      break;
 8008a02:	e006      	b.n	8008a12 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f001 fc43 	bl	800a292 <USBD_CtlError>
      ret = USBD_FAIL;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a10:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3718      	adds	r7, #24
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	32b0      	adds	r2, #176	; 0xb0
 8008a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e065      	b.n	8008b12 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	32b0      	adds	r2, #176	; 0xb0
 8008a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a56:	78fb      	ldrb	r3, [r7, #3]
 8008a58:	f003 020f 	and.w	r2, r3, #15
 8008a5c:	6879      	ldr	r1, [r7, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	440b      	add	r3, r1
 8008a68:	3318      	adds	r3, #24
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d02f      	beq.n	8008ad0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008a70:	78fb      	ldrb	r3, [r7, #3]
 8008a72:	f003 020f 	and.w	r2, r3, #15
 8008a76:	6879      	ldr	r1, [r7, #4]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4413      	add	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	440b      	add	r3, r1
 8008a82:	3318      	adds	r3, #24
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	78fb      	ldrb	r3, [r7, #3]
 8008a88:	f003 010f 	and.w	r1, r3, #15
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	00db      	lsls	r3, r3, #3
 8008a92:	440b      	add	r3, r1
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4403      	add	r3, r0
 8008a98:	3348      	adds	r3, #72	; 0x48
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008aa0:	fb01 f303 	mul.w	r3, r1, r3
 8008aa4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d112      	bne.n	8008ad0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008aaa:	78fb      	ldrb	r3, [r7, #3]
 8008aac:	f003 020f 	and.w	r2, r3, #15
 8008ab0:	6879      	ldr	r1, [r7, #4]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	440b      	add	r3, r1
 8008abc:	3318      	adds	r3, #24
 8008abe:	2200      	movs	r2, #0
 8008ac0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ac2:	78f9      	ldrb	r1, [r7, #3]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f002 f94a 	bl	800ad62 <USBD_LL_Transmit>
 8008ace:	e01f      	b.n	8008b10 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	33b0      	adds	r3, #176	; 0xb0
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d010      	beq.n	8008b10 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	33b0      	adds	r3, #176	; 0xb0
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008b0c:	78fa      	ldrb	r2, [r7, #3]
 8008b0e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
 8008b22:	460b      	mov	r3, r1
 8008b24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	32b0      	adds	r2, #176	; 0xb0
 8008b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b34:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	32b0      	adds	r2, #176	; 0xb0
 8008b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e01a      	b.n	8008b82 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b4c:	78fb      	ldrb	r3, [r7, #3]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f002 f948 	bl	800ade6 <USBD_LL_GetRxDataSize>
 8008b56:	4602      	mov	r2, r0
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	33b0      	adds	r3, #176	; 0xb0
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b084      	sub	sp, #16
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	32b0      	adds	r2, #176	; 0xb0
 8008b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e025      	b.n	8008bf8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	33b0      	adds	r3, #176	; 0xb0
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4413      	add	r3, r2
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d01a      	beq.n	8008bf6 <USBD_CDC_EP0_RxReady+0x6c>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008bc6:	2bff      	cmp	r3, #255	; 0xff
 8008bc8:	d015      	beq.n	8008bf6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	33b0      	adds	r3, #176	; 0xb0
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008be2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008bea:	b292      	uxth	r2, r2
 8008bec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	22ff      	movs	r2, #255	; 0xff
 8008bf2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c08:	2182      	movs	r1, #130	; 0x82
 8008c0a:	4818      	ldr	r0, [pc, #96]	; (8008c6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c0c:	f000 fd09 	bl	8009622 <USBD_GetEpDesc>
 8008c10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c12:	2101      	movs	r1, #1
 8008c14:	4815      	ldr	r0, [pc, #84]	; (8008c6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c16:	f000 fd04 	bl	8009622 <USBD_GetEpDesc>
 8008c1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c1c:	2181      	movs	r1, #129	; 0x81
 8008c1e:	4813      	ldr	r0, [pc, #76]	; (8008c6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008c20:	f000 fcff 	bl	8009622 <USBD_GetEpDesc>
 8008c24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d002      	beq.n	8008c32 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2210      	movs	r2, #16
 8008c30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d006      	beq.n	8008c46 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c40:	711a      	strb	r2, [r3, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d006      	beq.n	8008c5a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c54:	711a      	strb	r2, [r3, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2243      	movs	r2, #67	; 0x43
 8008c5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c60:	4b02      	ldr	r3, [pc, #8]	; (8008c6c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20000060 	.word	0x20000060

08008c70 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c78:	2182      	movs	r1, #130	; 0x82
 8008c7a:	4818      	ldr	r0, [pc, #96]	; (8008cdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c7c:	f000 fcd1 	bl	8009622 <USBD_GetEpDesc>
 8008c80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c82:	2101      	movs	r1, #1
 8008c84:	4815      	ldr	r0, [pc, #84]	; (8008cdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c86:	f000 fccc 	bl	8009622 <USBD_GetEpDesc>
 8008c8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c8c:	2181      	movs	r1, #129	; 0x81
 8008c8e:	4813      	ldr	r0, [pc, #76]	; (8008cdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c90:	f000 fcc7 	bl	8009622 <USBD_GetEpDesc>
 8008c94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	2210      	movs	r2, #16
 8008ca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d006      	beq.n	8008cb6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	2200      	movs	r2, #0
 8008cac:	711a      	strb	r2, [r3, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f042 0202 	orr.w	r2, r2, #2
 8008cb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d006      	beq.n	8008cca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	711a      	strb	r2, [r3, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f042 0202 	orr.w	r2, r2, #2
 8008cc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2243      	movs	r2, #67	; 0x43
 8008cce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008cd0:	4b02      	ldr	r3, [pc, #8]	; (8008cdc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3718      	adds	r7, #24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000060 	.word	0x20000060

08008ce0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ce8:	2182      	movs	r1, #130	; 0x82
 8008cea:	4818      	ldr	r0, [pc, #96]	; (8008d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008cec:	f000 fc99 	bl	8009622 <USBD_GetEpDesc>
 8008cf0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	4815      	ldr	r0, [pc, #84]	; (8008d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008cf6:	f000 fc94 	bl	8009622 <USBD_GetEpDesc>
 8008cfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008cfc:	2181      	movs	r1, #129	; 0x81
 8008cfe:	4813      	ldr	r0, [pc, #76]	; (8008d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008d00:	f000 fc8f 	bl	8009622 <USBD_GetEpDesc>
 8008d04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2210      	movs	r2, #16
 8008d10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d006      	beq.n	8008d26 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d20:	711a      	strb	r2, [r3, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d006      	beq.n	8008d3a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d34:	711a      	strb	r2, [r3, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2243      	movs	r2, #67	; 0x43
 8008d3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d40:	4b02      	ldr	r3, [pc, #8]	; (8008d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20000060 	.word	0x20000060

08008d50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	220a      	movs	r2, #10
 8008d5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d5e:	4b03      	ldr	r3, [pc, #12]	; (8008d6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	2000001c 	.word	0x2000001c

08008d70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e009      	b.n	8008d98 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	33b0      	adds	r3, #176	; 0xb0
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	32b0      	adds	r2, #176	; 0xb0
 8008dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dbe:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e008      	b.n	8008ddc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	371c      	adds	r7, #28
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	32b0      	adds	r2, #176	; 0xb0
 8008dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e004      	b.n	8008e16 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
	...

08008e24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	32b0      	adds	r2, #176	; 0xb0
 8008e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	32b0      	adds	r2, #176	; 0xb0
 8008e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e018      	b.n	8008e84 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	7c1b      	ldrb	r3, [r3, #16]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10a      	bne.n	8008e70 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e5a:	4b0c      	ldr	r3, [pc, #48]	; (8008e8c <USBD_CDC_ReceivePacket+0x68>)
 8008e5c:	7819      	ldrb	r1, [r3, #0]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f001 ff9b 	bl	800ada4 <USBD_LL_PrepareReceive>
 8008e6e:	e008      	b.n	8008e82 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e70:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <USBD_CDC_ReceivePacket+0x68>)
 8008e72:	7819      	ldrb	r1, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e7a:	2340      	movs	r3, #64	; 0x40
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 ff91 	bl	800ada4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	200000a4 	.word	0x200000a4

08008e90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e01f      	b.n	8008ee8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	79fa      	ldrb	r2, [r7, #7]
 8008eda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f001 fe07 	bl	800aaf0 <USBD_LL_Init>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d101      	bne.n	8008f08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e025      	b.n	8008f54 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	32ae      	adds	r2, #174	; 0xae
 8008f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00f      	beq.n	8008f44 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	32ae      	adds	r2, #174	; 0xae
 8008f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	f107 020e 	add.w	r2, r7, #14
 8008f38:	4610      	mov	r0, r2
 8008f3a:	4798      	blx	r3
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008f4a:	1c5a      	adds	r2, r3, #1
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f001 fe13 	bl	800ab90 <USBD_LL_Start>
 8008f6a:	4603      	mov	r3, r0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f7c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	460b      	mov	r3, r1
 8008f94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d009      	beq.n	8008fb8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	78fa      	ldrb	r2, [r7, #3]
 8008fae:	4611      	mov	r1, r2
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	4798      	blx	r3
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	460b      	mov	r3, r1
 8008fcc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	78fa      	ldrb	r2, [r7, #3]
 8008fdc:	4611      	mov	r1, r2
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	4798      	blx	r3
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d001      	beq.n	8008fec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	4618      	mov	r0, r3
 800900a:	f001 f908 	bl	800a21e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2201      	movs	r2, #1
 8009012:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800901c:	461a      	mov	r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800902a:	f003 031f 	and.w	r3, r3, #31
 800902e:	2b02      	cmp	r3, #2
 8009030:	d01a      	beq.n	8009068 <USBD_LL_SetupStage+0x72>
 8009032:	2b02      	cmp	r3, #2
 8009034:	d822      	bhi.n	800907c <USBD_LL_SetupStage+0x86>
 8009036:	2b00      	cmp	r3, #0
 8009038:	d002      	beq.n	8009040 <USBD_LL_SetupStage+0x4a>
 800903a:	2b01      	cmp	r3, #1
 800903c:	d00a      	beq.n	8009054 <USBD_LL_SetupStage+0x5e>
 800903e:	e01d      	b.n	800907c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fb5f 	bl	800970c <USBD_StdDevReq>
 800904e:	4603      	mov	r3, r0
 8009050:	73fb      	strb	r3, [r7, #15]
      break;
 8009052:	e020      	b.n	8009096 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fbc7 	bl	80097f0 <USBD_StdItfReq>
 8009062:	4603      	mov	r3, r0
 8009064:	73fb      	strb	r3, [r7, #15]
      break;
 8009066:	e016      	b.n	8009096 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fc29 	bl	80098c8 <USBD_StdEPReq>
 8009076:	4603      	mov	r3, r0
 8009078:	73fb      	strb	r3, [r7, #15]
      break;
 800907a:	e00c      	b.n	8009096 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009082:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009086:	b2db      	uxtb	r3, r3
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f001 fde0 	bl	800ac50 <USBD_LL_StallEP>
 8009090:	4603      	mov	r3, r0
 8009092:	73fb      	strb	r3, [r7, #15]
      break;
 8009094:	bf00      	nop
  }

  return ret;
 8009096:	7bfb      	ldrb	r3, [r7, #15]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	460b      	mov	r3, r1
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80090b2:	7afb      	ldrb	r3, [r7, #11]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d16e      	bne.n	8009196 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80090be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	f040 8098 	bne.w	80091fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	689a      	ldr	r2, [r3, #8]
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d913      	bls.n	8009100 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	689a      	ldr	r2, [r3, #8]
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	1ad2      	subs	r2, r2, r3
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	68da      	ldr	r2, [r3, #12]
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	4293      	cmp	r3, r2
 80090f0:	bf28      	it	cs
 80090f2:	4613      	movcs	r3, r2
 80090f4:	461a      	mov	r2, r3
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f001 f984 	bl	800a406 <USBD_CtlContinueRx>
 80090fe:	e07d      	b.n	80091fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009106:	f003 031f 	and.w	r3, r3, #31
 800910a:	2b02      	cmp	r3, #2
 800910c:	d014      	beq.n	8009138 <USBD_LL_DataOutStage+0x98>
 800910e:	2b02      	cmp	r3, #2
 8009110:	d81d      	bhi.n	800914e <USBD_LL_DataOutStage+0xae>
 8009112:	2b00      	cmp	r3, #0
 8009114:	d002      	beq.n	800911c <USBD_LL_DataOutStage+0x7c>
 8009116:	2b01      	cmp	r3, #1
 8009118:	d003      	beq.n	8009122 <USBD_LL_DataOutStage+0x82>
 800911a:	e018      	b.n	800914e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	75bb      	strb	r3, [r7, #22]
            break;
 8009120:	e018      	b.n	8009154 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009128:	b2db      	uxtb	r3, r3
 800912a:	4619      	mov	r1, r3
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f000 fa5e 	bl	80095ee <USBD_CoreFindIF>
 8009132:	4603      	mov	r3, r0
 8009134:	75bb      	strb	r3, [r7, #22]
            break;
 8009136:	e00d      	b.n	8009154 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800913e:	b2db      	uxtb	r3, r3
 8009140:	4619      	mov	r1, r3
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 fa60 	bl	8009608 <USBD_CoreFindEP>
 8009148:	4603      	mov	r3, r0
 800914a:	75bb      	strb	r3, [r7, #22]
            break;
 800914c:	e002      	b.n	8009154 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800914e:	2300      	movs	r3, #0
 8009150:	75bb      	strb	r3, [r7, #22]
            break;
 8009152:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009154:	7dbb      	ldrb	r3, [r7, #22]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d119      	bne.n	800918e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b03      	cmp	r3, #3
 8009164:	d113      	bne.n	800918e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009166:	7dba      	ldrb	r2, [r7, #22]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	32ae      	adds	r2, #174	; 0xae
 800916c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00b      	beq.n	800918e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009176:	7dba      	ldrb	r2, [r7, #22]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800917e:	7dba      	ldrb	r2, [r7, #22]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	32ae      	adds	r2, #174	; 0xae
 8009184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f001 f94a 	bl	800a428 <USBD_CtlSendStatus>
 8009194:	e032      	b.n	80091fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009196:	7afb      	ldrb	r3, [r7, #11]
 8009198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800919c:	b2db      	uxtb	r3, r3
 800919e:	4619      	mov	r1, r3
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f000 fa31 	bl	8009608 <USBD_CoreFindEP>
 80091a6:	4603      	mov	r3, r0
 80091a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091aa:	7dbb      	ldrb	r3, [r7, #22]
 80091ac:	2bff      	cmp	r3, #255	; 0xff
 80091ae:	d025      	beq.n	80091fc <USBD_LL_DataOutStage+0x15c>
 80091b0:	7dbb      	ldrb	r3, [r7, #22]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d122      	bne.n	80091fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d117      	bne.n	80091f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80091c2:	7dba      	ldrb	r2, [r7, #22]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	32ae      	adds	r2, #174	; 0xae
 80091c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00f      	beq.n	80091f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80091d2:	7dba      	ldrb	r2, [r7, #22]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80091da:	7dba      	ldrb	r2, [r7, #22]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	32ae      	adds	r2, #174	; 0xae
 80091e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	7afa      	ldrb	r2, [r7, #11]
 80091e8:	4611      	mov	r1, r2
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	4798      	blx	r3
 80091ee:	4603      	mov	r3, r0
 80091f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	e000      	b.n	80091fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3718      	adds	r7, #24
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b086      	sub	sp, #24
 800920a:	af00      	add	r7, sp, #0
 800920c:	60f8      	str	r0, [r7, #12]
 800920e:	460b      	mov	r3, r1
 8009210:	607a      	str	r2, [r7, #4]
 8009212:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009214:	7afb      	ldrb	r3, [r7, #11]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d16f      	bne.n	80092fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	3314      	adds	r3, #20
 800921e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009226:	2b02      	cmp	r3, #2
 8009228:	d15a      	bne.n	80092e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	689a      	ldr	r2, [r3, #8]
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	429a      	cmp	r2, r3
 8009234:	d914      	bls.n	8009260 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	689a      	ldr	r2, [r3, #8]
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	1ad2      	subs	r2, r2, r3
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	461a      	mov	r2, r3
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f001 f8ac 	bl	800a3aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009252:	2300      	movs	r3, #0
 8009254:	2200      	movs	r2, #0
 8009256:	2100      	movs	r1, #0
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f001 fda3 	bl	800ada4 <USBD_LL_PrepareReceive>
 800925e:	e03f      	b.n	80092e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	68da      	ldr	r2, [r3, #12]
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	429a      	cmp	r2, r3
 800926a:	d11c      	bne.n	80092a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009274:	429a      	cmp	r2, r3
 8009276:	d316      	bcc.n	80092a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009282:	429a      	cmp	r2, r3
 8009284:	d20f      	bcs.n	80092a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009286:	2200      	movs	r2, #0
 8009288:	2100      	movs	r1, #0
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f001 f88d 	bl	800a3aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009298:	2300      	movs	r3, #0
 800929a:	2200      	movs	r2, #0
 800929c:	2100      	movs	r1, #0
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f001 fd80 	bl	800ada4 <USBD_LL_PrepareReceive>
 80092a4:	e01c      	b.n	80092e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	d10f      	bne.n	80092d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d009      	beq.n	80092d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80092d2:	2180      	movs	r1, #128	; 0x80
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f001 fcbb 	bl	800ac50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f001 f8b7 	bl	800a44e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d03a      	beq.n	8009360 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f7ff fe42 	bl	8008f74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80092f8:	e032      	b.n	8009360 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80092fa:	7afb      	ldrb	r3, [r7, #11]
 80092fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009300:	b2db      	uxtb	r3, r3
 8009302:	4619      	mov	r1, r3
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f000 f97f 	bl	8009608 <USBD_CoreFindEP>
 800930a:	4603      	mov	r3, r0
 800930c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800930e:	7dfb      	ldrb	r3, [r7, #23]
 8009310:	2bff      	cmp	r3, #255	; 0xff
 8009312:	d025      	beq.n	8009360 <USBD_LL_DataInStage+0x15a>
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d122      	bne.n	8009360 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b03      	cmp	r3, #3
 8009324:	d11c      	bne.n	8009360 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009326:	7dfa      	ldrb	r2, [r7, #23]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	32ae      	adds	r2, #174	; 0xae
 800932c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d014      	beq.n	8009360 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009336:	7dfa      	ldrb	r2, [r7, #23]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800933e:	7dfa      	ldrb	r2, [r7, #23]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	32ae      	adds	r2, #174	; 0xae
 8009344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	7afa      	ldrb	r2, [r7, #11]
 800934c:	4611      	mov	r1, r2
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	4798      	blx	r3
 8009352:	4603      	mov	r3, r0
 8009354:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009356:	7dbb      	ldrb	r3, [r7, #22]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800935c:	7dbb      	ldrb	r3, [r7, #22]
 800935e:	e000      	b.n	8009362 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d014      	beq.n	80093d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00e      	beq.n	80093d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	6852      	ldr	r2, [r2, #4]
 80093be:	b2d2      	uxtb	r2, r2
 80093c0:	4611      	mov	r1, r2
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	4798      	blx	r3
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80093cc:	2303      	movs	r3, #3
 80093ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093d0:	2340      	movs	r3, #64	; 0x40
 80093d2:	2200      	movs	r2, #0
 80093d4:	2100      	movs	r1, #0
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fbf5 	bl	800abc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2240      	movs	r2, #64	; 0x40
 80093e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093ec:	2340      	movs	r3, #64	; 0x40
 80093ee:	2200      	movs	r2, #0
 80093f0:	2180      	movs	r1, #128	; 0x80
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f001 fbe7 	bl	800abc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2240      	movs	r2, #64	; 0x40
 8009402:	621a      	str	r2, [r3, #32]

  return ret;
 8009404:	7bfb      	ldrb	r3, [r7, #15]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800940e:	b480      	push	{r7}
 8009410:	b083      	sub	sp, #12
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	460b      	mov	r3, r1
 8009418:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	78fa      	ldrb	r2, [r7, #3]
 800941e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800942e:	b480      	push	{r7}
 8009430:	b083      	sub	sp, #12
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800943c:	b2da      	uxtb	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2204      	movs	r2, #4
 8009448:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr

0800945a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800945a:	b480      	push	{r7}
 800945c:	b083      	sub	sp, #12
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b04      	cmp	r3, #4
 800946c:	d106      	bne.n	800947c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009474:	b2da      	uxtb	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b082      	sub	sp, #8
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b03      	cmp	r3, #3
 800949c:	d110      	bne.n	80094c0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00b      	beq.n	80094c0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ae:	69db      	ldr	r3, [r3, #28]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d005      	beq.n	80094c0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ba:	69db      	ldr	r3, [r3, #28]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	460b      	mov	r3, r1
 80094d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	32ae      	adds	r2, #174	; 0xae
 80094e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d101      	bne.n	80094ec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e01c      	b.n	8009526 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d115      	bne.n	8009524 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	32ae      	adds	r2, #174	; 0xae
 8009502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009506:	6a1b      	ldr	r3, [r3, #32]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00b      	beq.n	8009524 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	32ae      	adds	r2, #174	; 0xae
 8009516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951a:	6a1b      	ldr	r3, [r3, #32]
 800951c:	78fa      	ldrb	r2, [r7, #3]
 800951e:	4611      	mov	r1, r2
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b082      	sub	sp, #8
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	460b      	mov	r3, r1
 8009538:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	32ae      	adds	r2, #174	; 0xae
 8009544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800954c:	2303      	movs	r3, #3
 800954e:	e01c      	b.n	800958a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b03      	cmp	r3, #3
 800955a:	d115      	bne.n	8009588 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	32ae      	adds	r2, #174	; 0xae
 8009566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00b      	beq.n	8009588 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	32ae      	adds	r2, #174	; 0xae
 800957a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800957e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009580:	78fa      	ldrb	r2, [r7, #3]
 8009582:	4611      	mov	r1, r2
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00e      	beq.n	80095e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	6852      	ldr	r2, [r2, #4]
 80095d2:	b2d2      	uxtb	r2, r2
 80095d4:	4611      	mov	r1, r2
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	4798      	blx	r3
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d001      	beq.n	80095e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80095e0:	2303      	movs	r3, #3
 80095e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b083      	sub	sp, #12
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	460b      	mov	r3, r1
 80095f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80095fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009614:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009616:	4618      	mov	r0, r3
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b086      	sub	sp, #24
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	460b      	mov	r3, r1
 800962c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009636:	2300      	movs	r3, #0
 8009638:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	885b      	ldrh	r3, [r3, #2]
 800963e:	b29a      	uxth	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	b29b      	uxth	r3, r3
 8009646:	429a      	cmp	r2, r3
 8009648:	d920      	bls.n	800968c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	b29b      	uxth	r3, r3
 8009650:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009652:	e013      	b.n	800967c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009654:	f107 030a 	add.w	r3, r7, #10
 8009658:	4619      	mov	r1, r3
 800965a:	6978      	ldr	r0, [r7, #20]
 800965c:	f000 f81b 	bl	8009696 <USBD_GetNextDesc>
 8009660:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	785b      	ldrb	r3, [r3, #1]
 8009666:	2b05      	cmp	r3, #5
 8009668:	d108      	bne.n	800967c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	789b      	ldrb	r3, [r3, #2]
 8009672:	78fa      	ldrb	r2, [r7, #3]
 8009674:	429a      	cmp	r2, r3
 8009676:	d008      	beq.n	800968a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009678:	2300      	movs	r3, #0
 800967a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	885b      	ldrh	r3, [r3, #2]
 8009680:	b29a      	uxth	r2, r3
 8009682:	897b      	ldrh	r3, [r7, #10]
 8009684:	429a      	cmp	r2, r3
 8009686:	d8e5      	bhi.n	8009654 <USBD_GetEpDesc+0x32>
 8009688:	e000      	b.n	800968c <USBD_GetEpDesc+0x6a>
          break;
 800968a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800968c:	693b      	ldr	r3, [r7, #16]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3718      	adds	r7, #24
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009696:	b480      	push	{r7}
 8009698:	b085      	sub	sp, #20
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	881a      	ldrh	r2, [r3, #0]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	4413      	add	r3, r2
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	461a      	mov	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4413      	add	r3, r2
 80096c0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80096c2:	68fb      	ldr	r3, [r7, #12]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	3301      	adds	r3, #1
 80096e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80096ee:	8a3b      	ldrh	r3, [r7, #16]
 80096f0:	021b      	lsls	r3, r3, #8
 80096f2:	b21a      	sxth	r2, r3
 80096f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	b21b      	sxth	r3, r3
 80096fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80096fe:	89fb      	ldrh	r3, [r7, #14]
}
 8009700:	4618      	mov	r0, r3
 8009702:	371c      	adds	r7, #28
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009722:	2b40      	cmp	r3, #64	; 0x40
 8009724:	d005      	beq.n	8009732 <USBD_StdDevReq+0x26>
 8009726:	2b40      	cmp	r3, #64	; 0x40
 8009728:	d857      	bhi.n	80097da <USBD_StdDevReq+0xce>
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00f      	beq.n	800974e <USBD_StdDevReq+0x42>
 800972e:	2b20      	cmp	r3, #32
 8009730:	d153      	bne.n	80097da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	32ae      	adds	r2, #174	; 0xae
 800973c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	4798      	blx	r3
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]
      break;
 800974c:	e04a      	b.n	80097e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	785b      	ldrb	r3, [r3, #1]
 8009752:	2b09      	cmp	r3, #9
 8009754:	d83b      	bhi.n	80097ce <USBD_StdDevReq+0xc2>
 8009756:	a201      	add	r2, pc, #4	; (adr r2, 800975c <USBD_StdDevReq+0x50>)
 8009758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975c:	080097b1 	.word	0x080097b1
 8009760:	080097c5 	.word	0x080097c5
 8009764:	080097cf 	.word	0x080097cf
 8009768:	080097bb 	.word	0x080097bb
 800976c:	080097cf 	.word	0x080097cf
 8009770:	0800978f 	.word	0x0800978f
 8009774:	08009785 	.word	0x08009785
 8009778:	080097cf 	.word	0x080097cf
 800977c:	080097a7 	.word	0x080097a7
 8009780:	08009799 	.word	0x08009799
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fa3c 	bl	8009c04 <USBD_GetDescriptor>
          break;
 800978c:	e024      	b.n	80097d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fba1 	bl	8009ed8 <USBD_SetAddress>
          break;
 8009796:	e01f      	b.n	80097d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 fbe0 	bl	8009f60 <USBD_SetConfig>
 80097a0:	4603      	mov	r3, r0
 80097a2:	73fb      	strb	r3, [r7, #15]
          break;
 80097a4:	e018      	b.n	80097d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097a6:	6839      	ldr	r1, [r7, #0]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fc83 	bl	800a0b4 <USBD_GetConfig>
          break;
 80097ae:	e013      	b.n	80097d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fcb4 	bl	800a120 <USBD_GetStatus>
          break;
 80097b8:	e00e      	b.n	80097d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fce3 	bl	800a188 <USBD_SetFeature>
          break;
 80097c2:	e009      	b.n	80097d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fd07 	bl	800a1da <USBD_ClrFeature>
          break;
 80097cc:	e004      	b.n	80097d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fd5e 	bl	800a292 <USBD_CtlError>
          break;
 80097d6:	bf00      	nop
      }
      break;
 80097d8:	e004      	b.n	80097e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80097da:	6839      	ldr	r1, [r7, #0]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fd58 	bl	800a292 <USBD_CtlError>
      break;
 80097e2:	bf00      	nop
  }

  return ret;
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop

080097f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009806:	2b40      	cmp	r3, #64	; 0x40
 8009808:	d005      	beq.n	8009816 <USBD_StdItfReq+0x26>
 800980a:	2b40      	cmp	r3, #64	; 0x40
 800980c:	d852      	bhi.n	80098b4 <USBD_StdItfReq+0xc4>
 800980e:	2b00      	cmp	r3, #0
 8009810:	d001      	beq.n	8009816 <USBD_StdItfReq+0x26>
 8009812:	2b20      	cmp	r3, #32
 8009814:	d14e      	bne.n	80098b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800981c:	b2db      	uxtb	r3, r3
 800981e:	3b01      	subs	r3, #1
 8009820:	2b02      	cmp	r3, #2
 8009822:	d840      	bhi.n	80098a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	889b      	ldrh	r3, [r3, #4]
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b01      	cmp	r3, #1
 800982c:	d836      	bhi.n	800989c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	889b      	ldrh	r3, [r3, #4]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7ff fed9 	bl	80095ee <USBD_CoreFindIF>
 800983c:	4603      	mov	r3, r0
 800983e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009840:	7bbb      	ldrb	r3, [r7, #14]
 8009842:	2bff      	cmp	r3, #255	; 0xff
 8009844:	d01d      	beq.n	8009882 <USBD_StdItfReq+0x92>
 8009846:	7bbb      	ldrb	r3, [r7, #14]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d11a      	bne.n	8009882 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800984c:	7bba      	ldrb	r2, [r7, #14]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	32ae      	adds	r2, #174	; 0xae
 8009852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00f      	beq.n	800987c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800985c:	7bba      	ldrb	r2, [r7, #14]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009864:	7bba      	ldrb	r2, [r7, #14]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	32ae      	adds	r2, #174	; 0xae
 800986a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	4798      	blx	r3
 8009876:	4603      	mov	r3, r0
 8009878:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800987a:	e004      	b.n	8009886 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800987c:	2303      	movs	r3, #3
 800987e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009880:	e001      	b.n	8009886 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009882:	2303      	movs	r3, #3
 8009884:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	88db      	ldrh	r3, [r3, #6]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d110      	bne.n	80098b0 <USBD_StdItfReq+0xc0>
 800988e:	7bfb      	ldrb	r3, [r7, #15]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10d      	bne.n	80098b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fdc7 	bl	800a428 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800989a:	e009      	b.n	80098b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fcf7 	bl	800a292 <USBD_CtlError>
          break;
 80098a4:	e004      	b.n	80098b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80098a6:	6839      	ldr	r1, [r7, #0]
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fcf2 	bl	800a292 <USBD_CtlError>
          break;
 80098ae:	e000      	b.n	80098b2 <USBD_StdItfReq+0xc2>
          break;
 80098b0:	bf00      	nop
      }
      break;
 80098b2:	e004      	b.n	80098be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fceb 	bl	800a292 <USBD_CtlError>
      break;
 80098bc:	bf00      	nop
  }

  return ret;
 80098be:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	889b      	ldrh	r3, [r3, #4]
 80098da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098e4:	2b40      	cmp	r3, #64	; 0x40
 80098e6:	d007      	beq.n	80098f8 <USBD_StdEPReq+0x30>
 80098e8:	2b40      	cmp	r3, #64	; 0x40
 80098ea:	f200 817f 	bhi.w	8009bec <USBD_StdEPReq+0x324>
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d02a      	beq.n	8009948 <USBD_StdEPReq+0x80>
 80098f2:	2b20      	cmp	r3, #32
 80098f4:	f040 817a 	bne.w	8009bec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80098f8:	7bbb      	ldrb	r3, [r7, #14]
 80098fa:	4619      	mov	r1, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7ff fe83 	bl	8009608 <USBD_CoreFindEP>
 8009902:	4603      	mov	r3, r0
 8009904:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009906:	7b7b      	ldrb	r3, [r7, #13]
 8009908:	2bff      	cmp	r3, #255	; 0xff
 800990a:	f000 8174 	beq.w	8009bf6 <USBD_StdEPReq+0x32e>
 800990e:	7b7b      	ldrb	r3, [r7, #13]
 8009910:	2b00      	cmp	r3, #0
 8009912:	f040 8170 	bne.w	8009bf6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009916:	7b7a      	ldrb	r2, [r7, #13]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800991e:	7b7a      	ldrb	r2, [r7, #13]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	32ae      	adds	r2, #174	; 0xae
 8009924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	2b00      	cmp	r3, #0
 800992c:	f000 8163 	beq.w	8009bf6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009930:	7b7a      	ldrb	r2, [r7, #13]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	32ae      	adds	r2, #174	; 0xae
 8009936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	4798      	blx	r3
 8009942:	4603      	mov	r3, r0
 8009944:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009946:	e156      	b.n	8009bf6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	785b      	ldrb	r3, [r3, #1]
 800994c:	2b03      	cmp	r3, #3
 800994e:	d008      	beq.n	8009962 <USBD_StdEPReq+0x9a>
 8009950:	2b03      	cmp	r3, #3
 8009952:	f300 8145 	bgt.w	8009be0 <USBD_StdEPReq+0x318>
 8009956:	2b00      	cmp	r3, #0
 8009958:	f000 809b 	beq.w	8009a92 <USBD_StdEPReq+0x1ca>
 800995c:	2b01      	cmp	r3, #1
 800995e:	d03c      	beq.n	80099da <USBD_StdEPReq+0x112>
 8009960:	e13e      	b.n	8009be0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b02      	cmp	r3, #2
 800996c:	d002      	beq.n	8009974 <USBD_StdEPReq+0xac>
 800996e:	2b03      	cmp	r3, #3
 8009970:	d016      	beq.n	80099a0 <USBD_StdEPReq+0xd8>
 8009972:	e02c      	b.n	80099ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00d      	beq.n	8009996 <USBD_StdEPReq+0xce>
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	2b80      	cmp	r3, #128	; 0x80
 800997e:	d00a      	beq.n	8009996 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f001 f963 	bl	800ac50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800998a:	2180      	movs	r1, #128	; 0x80
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f001 f95f 	bl	800ac50 <USBD_LL_StallEP>
 8009992:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009994:	e020      	b.n	80099d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fc7a 	bl	800a292 <USBD_CtlError>
              break;
 800999e:	e01b      	b.n	80099d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	885b      	ldrh	r3, [r3, #2]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10e      	bne.n	80099c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80099a8:	7bbb      	ldrb	r3, [r7, #14]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00b      	beq.n	80099c6 <USBD_StdEPReq+0xfe>
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
 80099b0:	2b80      	cmp	r3, #128	; 0x80
 80099b2:	d008      	beq.n	80099c6 <USBD_StdEPReq+0xfe>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	88db      	ldrh	r3, [r3, #6]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d104      	bne.n	80099c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80099bc:	7bbb      	ldrb	r3, [r7, #14]
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f001 f945 	bl	800ac50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 fd2e 	bl	800a428 <USBD_CtlSendStatus>

              break;
 80099cc:	e004      	b.n	80099d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fc5e 	bl	800a292 <USBD_CtlError>
              break;
 80099d6:	bf00      	nop
          }
          break;
 80099d8:	e107      	b.n	8009bea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	2b02      	cmp	r3, #2
 80099e4:	d002      	beq.n	80099ec <USBD_StdEPReq+0x124>
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d016      	beq.n	8009a18 <USBD_StdEPReq+0x150>
 80099ea:	e04b      	b.n	8009a84 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099ec:	7bbb      	ldrb	r3, [r7, #14]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00d      	beq.n	8009a0e <USBD_StdEPReq+0x146>
 80099f2:	7bbb      	ldrb	r3, [r7, #14]
 80099f4:	2b80      	cmp	r3, #128	; 0x80
 80099f6:	d00a      	beq.n	8009a0e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
 80099fa:	4619      	mov	r1, r3
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f001 f927 	bl	800ac50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a02:	2180      	movs	r1, #128	; 0x80
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f001 f923 	bl	800ac50 <USBD_LL_StallEP>
 8009a0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009a0c:	e040      	b.n	8009a90 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009a0e:	6839      	ldr	r1, [r7, #0]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fc3e 	bl	800a292 <USBD_CtlError>
              break;
 8009a16:	e03b      	b.n	8009a90 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	885b      	ldrh	r3, [r3, #2]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d136      	bne.n	8009a8e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
 8009a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d004      	beq.n	8009a34 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a2a:	7bbb      	ldrb	r3, [r7, #14]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f001 f92d 	bl	800ac8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fcf7 	bl	800a428 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7ff fde2 	bl	8009608 <USBD_CoreFindEP>
 8009a44:	4603      	mov	r3, r0
 8009a46:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a48:	7b7b      	ldrb	r3, [r7, #13]
 8009a4a:	2bff      	cmp	r3, #255	; 0xff
 8009a4c:	d01f      	beq.n	8009a8e <USBD_StdEPReq+0x1c6>
 8009a4e:	7b7b      	ldrb	r3, [r7, #13]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d11c      	bne.n	8009a8e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009a54:	7b7a      	ldrb	r2, [r7, #13]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009a5c:	7b7a      	ldrb	r2, [r7, #13]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	32ae      	adds	r2, #174	; 0xae
 8009a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d010      	beq.n	8009a8e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a6c:	7b7a      	ldrb	r2, [r7, #13]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	32ae      	adds	r2, #174	; 0xae
 8009a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	4798      	blx	r3
 8009a7e:	4603      	mov	r3, r0
 8009a80:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009a82:	e004      	b.n	8009a8e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fc03 	bl	800a292 <USBD_CtlError>
              break;
 8009a8c:	e000      	b.n	8009a90 <USBD_StdEPReq+0x1c8>
              break;
 8009a8e:	bf00      	nop
          }
          break;
 8009a90:	e0ab      	b.n	8009bea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d002      	beq.n	8009aa4 <USBD_StdEPReq+0x1dc>
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d032      	beq.n	8009b08 <USBD_StdEPReq+0x240>
 8009aa2:	e097      	b.n	8009bd4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009aa4:	7bbb      	ldrb	r3, [r7, #14]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d007      	beq.n	8009aba <USBD_StdEPReq+0x1f2>
 8009aaa:	7bbb      	ldrb	r3, [r7, #14]
 8009aac:	2b80      	cmp	r3, #128	; 0x80
 8009aae:	d004      	beq.n	8009aba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fbed 	bl	800a292 <USBD_CtlError>
                break;
 8009ab8:	e091      	b.n	8009bde <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009aba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	da0b      	bge.n	8009ada <USBD_StdEPReq+0x212>
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ac8:	4613      	mov	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	3310      	adds	r3, #16
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	e00b      	b.n	8009af2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ada:	7bbb      	ldrb	r3, [r7, #14]
 8009adc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	4413      	add	r3, r2
 8009af0:	3304      	adds	r3, #4
 8009af2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	2200      	movs	r2, #0
 8009af8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	2202      	movs	r2, #2
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fc37 	bl	800a374 <USBD_CtlSendData>
              break;
 8009b06:	e06a      	b.n	8009bde <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009b08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	da11      	bge.n	8009b34 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
 8009b12:	f003 020f 	and.w	r2, r3, #15
 8009b16:	6879      	ldr	r1, [r7, #4]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4413      	add	r3, r2
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	440b      	add	r3, r1
 8009b22:	3324      	adds	r3, #36	; 0x24
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d117      	bne.n	8009b5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009b2a:	6839      	ldr	r1, [r7, #0]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fbb0 	bl	800a292 <USBD_CtlError>
                  break;
 8009b32:	e054      	b.n	8009bde <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	f003 020f 	and.w	r2, r3, #15
 8009b3a:	6879      	ldr	r1, [r7, #4]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	4413      	add	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	440b      	add	r3, r1
 8009b46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b4a:	881b      	ldrh	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d104      	bne.n	8009b5a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fb9d 	bl	800a292 <USBD_CtlError>
                  break;
 8009b58:	e041      	b.n	8009bde <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	da0b      	bge.n	8009b7a <USBD_StdEPReq+0x2b2>
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
 8009b64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b68:	4613      	mov	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4413      	add	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	3310      	adds	r3, #16
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	4413      	add	r3, r2
 8009b76:	3304      	adds	r3, #4
 8009b78:	e00b      	b.n	8009b92 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b7a:	7bbb      	ldrb	r3, [r7, #14]
 8009b7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b80:	4613      	mov	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	4413      	add	r3, r2
 8009b90:	3304      	adds	r3, #4
 8009b92:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d002      	beq.n	8009ba0 <USBD_StdEPReq+0x2d8>
 8009b9a:	7bbb      	ldrb	r3, [r7, #14]
 8009b9c:	2b80      	cmp	r3, #128	; 0x80
 8009b9e:	d103      	bne.n	8009ba8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	601a      	str	r2, [r3, #0]
 8009ba6:	e00e      	b.n	8009bc6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f001 f88d 	bl	800accc <USBD_LL_IsStallEP>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d003      	beq.n	8009bc0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	e002      	b.n	8009bc6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	2202      	movs	r2, #2
 8009bca:	4619      	mov	r1, r3
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 fbd1 	bl	800a374 <USBD_CtlSendData>
              break;
 8009bd2:	e004      	b.n	8009bde <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fb5b 	bl	800a292 <USBD_CtlError>
              break;
 8009bdc:	bf00      	nop
          }
          break;
 8009bde:	e004      	b.n	8009bea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009be0:	6839      	ldr	r1, [r7, #0]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fb55 	bl	800a292 <USBD_CtlError>
          break;
 8009be8:	bf00      	nop
      }
      break;
 8009bea:	e005      	b.n	8009bf8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fb4f 	bl	800a292 <USBD_CtlError>
      break;
 8009bf4:	e000      	b.n	8009bf8 <USBD_StdEPReq+0x330>
      break;
 8009bf6:	bf00      	nop
  }

  return ret;
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009c12:	2300      	movs	r3, #0
 8009c14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009c16:	2300      	movs	r3, #0
 8009c18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	885b      	ldrh	r3, [r3, #2]
 8009c1e:	0a1b      	lsrs	r3, r3, #8
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	3b01      	subs	r3, #1
 8009c24:	2b06      	cmp	r3, #6
 8009c26:	f200 8128 	bhi.w	8009e7a <USBD_GetDescriptor+0x276>
 8009c2a:	a201      	add	r2, pc, #4	; (adr r2, 8009c30 <USBD_GetDescriptor+0x2c>)
 8009c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c30:	08009c4d 	.word	0x08009c4d
 8009c34:	08009c65 	.word	0x08009c65
 8009c38:	08009ca5 	.word	0x08009ca5
 8009c3c:	08009e7b 	.word	0x08009e7b
 8009c40:	08009e7b 	.word	0x08009e7b
 8009c44:	08009e1b 	.word	0x08009e1b
 8009c48:	08009e47 	.word	0x08009e47
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	7c12      	ldrb	r2, [r2, #16]
 8009c58:	f107 0108 	add.w	r1, r7, #8
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	4798      	blx	r3
 8009c60:	60f8      	str	r0, [r7, #12]
      break;
 8009c62:	e112      	b.n	8009e8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	7c1b      	ldrb	r3, [r3, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10d      	bne.n	8009c88 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c74:	f107 0208 	add.w	r2, r7, #8
 8009c78:	4610      	mov	r0, r2
 8009c7a:	4798      	blx	r3
 8009c7c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3301      	adds	r3, #1
 8009c82:	2202      	movs	r2, #2
 8009c84:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c86:	e100      	b.n	8009e8a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c90:	f107 0208 	add.w	r2, r7, #8
 8009c94:	4610      	mov	r0, r2
 8009c96:	4798      	blx	r3
 8009c98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	701a      	strb	r2, [r3, #0]
      break;
 8009ca2:	e0f2      	b.n	8009e8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	885b      	ldrh	r3, [r3, #2]
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b05      	cmp	r3, #5
 8009cac:	f200 80ac 	bhi.w	8009e08 <USBD_GetDescriptor+0x204>
 8009cb0:	a201      	add	r2, pc, #4	; (adr r2, 8009cb8 <USBD_GetDescriptor+0xb4>)
 8009cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb6:	bf00      	nop
 8009cb8:	08009cd1 	.word	0x08009cd1
 8009cbc:	08009d05 	.word	0x08009d05
 8009cc0:	08009d39 	.word	0x08009d39
 8009cc4:	08009d6d 	.word	0x08009d6d
 8009cc8:	08009da1 	.word	0x08009da1
 8009ccc:	08009dd5 	.word	0x08009dd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00b      	beq.n	8009cf4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	7c12      	ldrb	r2, [r2, #16]
 8009ce8:	f107 0108 	add.w	r1, r7, #8
 8009cec:	4610      	mov	r0, r2
 8009cee:	4798      	blx	r3
 8009cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cf2:	e091      	b.n	8009e18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cf4:	6839      	ldr	r1, [r7, #0]
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 facb 	bl	800a292 <USBD_CtlError>
            err++;
 8009cfc:	7afb      	ldrb	r3, [r7, #11]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	72fb      	strb	r3, [r7, #11]
          break;
 8009d02:	e089      	b.n	8009e18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00b      	beq.n	8009d28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	7c12      	ldrb	r2, [r2, #16]
 8009d1c:	f107 0108 	add.w	r1, r7, #8
 8009d20:	4610      	mov	r0, r2
 8009d22:	4798      	blx	r3
 8009d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d26:	e077      	b.n	8009e18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fab1 	bl	800a292 <USBD_CtlError>
            err++;
 8009d30:	7afb      	ldrb	r3, [r7, #11]
 8009d32:	3301      	adds	r3, #1
 8009d34:	72fb      	strb	r3, [r7, #11]
          break;
 8009d36:	e06f      	b.n	8009e18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00b      	beq.n	8009d5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	7c12      	ldrb	r2, [r2, #16]
 8009d50:	f107 0108 	add.w	r1, r7, #8
 8009d54:	4610      	mov	r0, r2
 8009d56:	4798      	blx	r3
 8009d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d5a:	e05d      	b.n	8009e18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fa97 	bl	800a292 <USBD_CtlError>
            err++;
 8009d64:	7afb      	ldrb	r3, [r7, #11]
 8009d66:	3301      	adds	r3, #1
 8009d68:	72fb      	strb	r3, [r7, #11]
          break;
 8009d6a:	e055      	b.n	8009e18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00b      	beq.n	8009d90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	7c12      	ldrb	r2, [r2, #16]
 8009d84:	f107 0108 	add.w	r1, r7, #8
 8009d88:	4610      	mov	r0, r2
 8009d8a:	4798      	blx	r3
 8009d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d8e:	e043      	b.n	8009e18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fa7d 	bl	800a292 <USBD_CtlError>
            err++;
 8009d98:	7afb      	ldrb	r3, [r7, #11]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d9e:	e03b      	b.n	8009e18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009da6:	695b      	ldr	r3, [r3, #20]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d00b      	beq.n	8009dc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	7c12      	ldrb	r2, [r2, #16]
 8009db8:	f107 0108 	add.w	r1, r7, #8
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	4798      	blx	r3
 8009dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009dc2:	e029      	b.n	8009e18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009dc4:	6839      	ldr	r1, [r7, #0]
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fa63 	bl	800a292 <USBD_CtlError>
            err++;
 8009dcc:	7afb      	ldrb	r3, [r7, #11]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8009dd2:	e021      	b.n	8009e18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00b      	beq.n	8009df8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	7c12      	ldrb	r2, [r2, #16]
 8009dec:	f107 0108 	add.w	r1, r7, #8
 8009df0:	4610      	mov	r0, r2
 8009df2:	4798      	blx	r3
 8009df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009df6:	e00f      	b.n	8009e18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009df8:	6839      	ldr	r1, [r7, #0]
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fa49 	bl	800a292 <USBD_CtlError>
            err++;
 8009e00:	7afb      	ldrb	r3, [r7, #11]
 8009e02:	3301      	adds	r3, #1
 8009e04:	72fb      	strb	r3, [r7, #11]
          break;
 8009e06:	e007      	b.n	8009e18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009e08:	6839      	ldr	r1, [r7, #0]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fa41 	bl	800a292 <USBD_CtlError>
          err++;
 8009e10:	7afb      	ldrb	r3, [r7, #11]
 8009e12:	3301      	adds	r3, #1
 8009e14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009e16:	bf00      	nop
      }
      break;
 8009e18:	e037      	b.n	8009e8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	7c1b      	ldrb	r3, [r3, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d109      	bne.n	8009e36 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2a:	f107 0208 	add.w	r2, r7, #8
 8009e2e:	4610      	mov	r0, r2
 8009e30:	4798      	blx	r3
 8009e32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e34:	e029      	b.n	8009e8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fa2a 	bl	800a292 <USBD_CtlError>
        err++;
 8009e3e:	7afb      	ldrb	r3, [r7, #11]
 8009e40:	3301      	adds	r3, #1
 8009e42:	72fb      	strb	r3, [r7, #11]
      break;
 8009e44:	e021      	b.n	8009e8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	7c1b      	ldrb	r3, [r3, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10d      	bne.n	8009e6a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e56:	f107 0208 	add.w	r2, r7, #8
 8009e5a:	4610      	mov	r0, r2
 8009e5c:	4798      	blx	r3
 8009e5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	3301      	adds	r3, #1
 8009e64:	2207      	movs	r2, #7
 8009e66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e68:	e00f      	b.n	8009e8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fa10 	bl	800a292 <USBD_CtlError>
        err++;
 8009e72:	7afb      	ldrb	r3, [r7, #11]
 8009e74:	3301      	adds	r3, #1
 8009e76:	72fb      	strb	r3, [r7, #11]
      break;
 8009e78:	e007      	b.n	8009e8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fa08 	bl	800a292 <USBD_CtlError>
      err++;
 8009e82:	7afb      	ldrb	r3, [r7, #11]
 8009e84:	3301      	adds	r3, #1
 8009e86:	72fb      	strb	r3, [r7, #11]
      break;
 8009e88:	bf00      	nop
  }

  if (err != 0U)
 8009e8a:	7afb      	ldrb	r3, [r7, #11]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d11e      	bne.n	8009ece <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	88db      	ldrh	r3, [r3, #6]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d016      	beq.n	8009ec6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009e98:	893b      	ldrh	r3, [r7, #8]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00e      	beq.n	8009ebc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	88da      	ldrh	r2, [r3, #6]
 8009ea2:	893b      	ldrh	r3, [r7, #8]
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	bf28      	it	cs
 8009ea8:	4613      	movcs	r3, r2
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009eae:	893b      	ldrh	r3, [r7, #8]
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	68f9      	ldr	r1, [r7, #12]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fa5d 	bl	800a374 <USBD_CtlSendData>
 8009eba:	e009      	b.n	8009ed0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f9e7 	bl	800a292 <USBD_CtlError>
 8009ec4:	e004      	b.n	8009ed0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 faae 	bl	800a428 <USBD_CtlSendStatus>
 8009ecc:	e000      	b.n	8009ed0 <USBD_GetDescriptor+0x2cc>
    return;
 8009ece:	bf00      	nop
  }
}
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop

08009ed8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	889b      	ldrh	r3, [r3, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d131      	bne.n	8009f4e <USBD_SetAddress+0x76>
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	88db      	ldrh	r3, [r3, #6]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d12d      	bne.n	8009f4e <USBD_SetAddress+0x76>
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	885b      	ldrh	r3, [r3, #2]
 8009ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8009ef8:	d829      	bhi.n	8009f4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	885b      	ldrh	r3, [r3, #2]
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	2b03      	cmp	r3, #3
 8009f10:	d104      	bne.n	8009f1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f9bc 	bl	800a292 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f1a:	e01d      	b.n	8009f58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	7bfa      	ldrb	r2, [r7, #15]
 8009f20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
 8009f26:	4619      	mov	r1, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fefb 	bl	800ad24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fa7a 	bl	800a428 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009f34:	7bfb      	ldrb	r3, [r7, #15]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d004      	beq.n	8009f44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2202      	movs	r2, #2
 8009f3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f42:	e009      	b.n	8009f58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f4c:	e004      	b.n	8009f58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f99e 	bl	800a292 <USBD_CtlError>
  }
}
 8009f56:	bf00      	nop
 8009f58:	bf00      	nop
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	885b      	ldrh	r3, [r3, #2]
 8009f72:	b2da      	uxtb	r2, r3
 8009f74:	4b4e      	ldr	r3, [pc, #312]	; (800a0b0 <USBD_SetConfig+0x150>)
 8009f76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f78:	4b4d      	ldr	r3, [pc, #308]	; (800a0b0 <USBD_SetConfig+0x150>)
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d905      	bls.n	8009f8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f985 	bl	800a292 <USBD_CtlError>
    return USBD_FAIL;
 8009f88:	2303      	movs	r3, #3
 8009f8a:	e08c      	b.n	800a0a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d002      	beq.n	8009f9e <USBD_SetConfig+0x3e>
 8009f98:	2b03      	cmp	r3, #3
 8009f9a:	d029      	beq.n	8009ff0 <USBD_SetConfig+0x90>
 8009f9c:	e075      	b.n	800a08a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009f9e:	4b44      	ldr	r3, [pc, #272]	; (800a0b0 <USBD_SetConfig+0x150>)
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d020      	beq.n	8009fe8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009fa6:	4b42      	ldr	r3, [pc, #264]	; (800a0b0 <USBD_SetConfig+0x150>)
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	461a      	mov	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fb0:	4b3f      	ldr	r3, [pc, #252]	; (800a0b0 <USBD_SetConfig+0x150>)
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7fe ffe7 	bl	8008f8a <USBD_SetClassConfig>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d008      	beq.n	8009fd8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f962 	bl	800a292 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2202      	movs	r2, #2
 8009fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fd6:	e065      	b.n	800a0a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 fa25 	bl	800a428 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2203      	movs	r2, #3
 8009fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009fe6:	e05d      	b.n	800a0a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fa1d 	bl	800a428 <USBD_CtlSendStatus>
      break;
 8009fee:	e059      	b.n	800a0a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ff0:	4b2f      	ldr	r3, [pc, #188]	; (800a0b0 <USBD_SetConfig+0x150>)
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d112      	bne.n	800a01e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a000:	4b2b      	ldr	r3, [pc, #172]	; (800a0b0 <USBD_SetConfig+0x150>)
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	461a      	mov	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a00a:	4b29      	ldr	r3, [pc, #164]	; (800a0b0 <USBD_SetConfig+0x150>)
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7fe ffd6 	bl	8008fc2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 fa06 	bl	800a428 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a01c:	e042      	b.n	800a0a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a01e:	4b24      	ldr	r3, [pc, #144]	; (800a0b0 <USBD_SetConfig+0x150>)
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	461a      	mov	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d02a      	beq.n	800a082 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	b2db      	uxtb	r3, r3
 800a032:	4619      	mov	r1, r3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f7fe ffc4 	bl	8008fc2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a03a:	4b1d      	ldr	r3, [pc, #116]	; (800a0b0 <USBD_SetConfig+0x150>)
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a044:	4b1a      	ldr	r3, [pc, #104]	; (800a0b0 <USBD_SetConfig+0x150>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	4619      	mov	r1, r3
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7fe ff9d 	bl	8008f8a <USBD_SetClassConfig>
 800a050:	4603      	mov	r3, r0
 800a052:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00f      	beq.n	800a07a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a05a:	6839      	ldr	r1, [r7, #0]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f918 	bl	800a292 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	b2db      	uxtb	r3, r3
 800a068:	4619      	mov	r1, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7fe ffa9 	bl	8008fc2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2202      	movs	r2, #2
 800a074:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a078:	e014      	b.n	800a0a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f9d4 	bl	800a428 <USBD_CtlSendStatus>
      break;
 800a080:	e010      	b.n	800a0a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f9d0 	bl	800a428 <USBD_CtlSendStatus>
      break;
 800a088:	e00c      	b.n	800a0a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f900 	bl	800a292 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a092:	4b07      	ldr	r3, [pc, #28]	; (800a0b0 <USBD_SetConfig+0x150>)
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7fe ff92 	bl	8008fc2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	73fb      	strb	r3, [r7, #15]
      break;
 800a0a2:	bf00      	nop
  }

  return ret;
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	20000394 	.word	0x20000394

0800a0b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	88db      	ldrh	r3, [r3, #6]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d004      	beq.n	800a0d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a0c6:	6839      	ldr	r1, [r7, #0]
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f8e2 	bl	800a292 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a0ce:	e023      	b.n	800a118 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	dc02      	bgt.n	800a0e2 <USBD_GetConfig+0x2e>
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	dc03      	bgt.n	800a0e8 <USBD_GetConfig+0x34>
 800a0e0:	e015      	b.n	800a10e <USBD_GetConfig+0x5a>
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	d00b      	beq.n	800a0fe <USBD_GetConfig+0x4a>
 800a0e6:	e012      	b.n	800a10e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3308      	adds	r3, #8
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f93c 	bl	800a374 <USBD_CtlSendData>
        break;
 800a0fc:	e00c      	b.n	800a118 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	3304      	adds	r3, #4
 800a102:	2201      	movs	r2, #1
 800a104:	4619      	mov	r1, r3
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f934 	bl	800a374 <USBD_CtlSendData>
        break;
 800a10c:	e004      	b.n	800a118 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f8be 	bl	800a292 <USBD_CtlError>
        break;
 800a116:	bf00      	nop
}
 800a118:	bf00      	nop
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a130:	b2db      	uxtb	r3, r3
 800a132:	3b01      	subs	r3, #1
 800a134:	2b02      	cmp	r3, #2
 800a136:	d81e      	bhi.n	800a176 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	88db      	ldrh	r3, [r3, #6]
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d004      	beq.n	800a14a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f8a5 	bl	800a292 <USBD_CtlError>
        break;
 800a148:	e01a      	b.n	800a180 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a156:	2b00      	cmp	r3, #0
 800a158:	d005      	beq.n	800a166 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	f043 0202 	orr.w	r2, r3, #2
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	330c      	adds	r3, #12
 800a16a:	2202      	movs	r2, #2
 800a16c:	4619      	mov	r1, r3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f900 	bl	800a374 <USBD_CtlSendData>
      break;
 800a174:	e004      	b.n	800a180 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 f88a 	bl	800a292 <USBD_CtlError>
      break;
 800a17e:	bf00      	nop
  }
}
 800a180:	bf00      	nop
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	885b      	ldrh	r3, [r3, #2]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d107      	bne.n	800a1aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f940 	bl	800a428 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a1a8:	e013      	b.n	800a1d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	885b      	ldrh	r3, [r3, #2]
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d10b      	bne.n	800a1ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	889b      	ldrh	r3, [r3, #4]
 800a1b6:	0a1b      	lsrs	r3, r3, #8
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f930 	bl	800a428 <USBD_CtlSendStatus>
}
 800a1c8:	e003      	b.n	800a1d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f860 	bl	800a292 <USBD_CtlError>
}
 800a1d2:	bf00      	nop
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b082      	sub	sp, #8
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d80b      	bhi.n	800a20a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	885b      	ldrh	r3, [r3, #2]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d10c      	bne.n	800a214 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f910 	bl	800a428 <USBD_CtlSendStatus>
      }
      break;
 800a208:	e004      	b.n	800a214 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a20a:	6839      	ldr	r1, [r7, #0]
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 f840 	bl	800a292 <USBD_CtlError>
      break;
 800a212:	e000      	b.n	800a216 <USBD_ClrFeature+0x3c>
      break;
 800a214:	bf00      	nop
  }
}
 800a216:	bf00      	nop
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b084      	sub	sp, #16
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	781a      	ldrb	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	3301      	adds	r3, #1
 800a238:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	781a      	ldrb	r2, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3301      	adds	r3, #1
 800a246:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7ff fa41 	bl	80096d0 <SWAPBYTE>
 800a24e:	4603      	mov	r3, r0
 800a250:	461a      	mov	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	3301      	adds	r3, #1
 800a25a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	3301      	adds	r3, #1
 800a260:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7ff fa34 	bl	80096d0 <SWAPBYTE>
 800a268:	4603      	mov	r3, r0
 800a26a:	461a      	mov	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	3301      	adds	r3, #1
 800a274:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	3301      	adds	r3, #1
 800a27a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f7ff fa27 	bl	80096d0 <SWAPBYTE>
 800a282:	4603      	mov	r3, r0
 800a284:	461a      	mov	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	80da      	strh	r2, [r3, #6]
}
 800a28a:	bf00      	nop
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b082      	sub	sp, #8
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a29c:	2180      	movs	r1, #128	; 0x80
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fcd6 	bl	800ac50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fcd2 	bl	800ac50 <USBD_LL_StallEP>
}
 800a2ac:	bf00      	nop
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d036      	beq.n	800a338 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a2ce:	6938      	ldr	r0, [r7, #16]
 800a2d0:	f000 f836 	bl	800a340 <USBD_GetLen>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	005b      	lsls	r3, r3, #1
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	7812      	ldrb	r2, [r2, #0]
 800a2ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800a2ee:	7dfb      	ldrb	r3, [r7, #23]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a2f4:	7dfb      	ldrb	r3, [r7, #23]
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	2203      	movs	r2, #3
 800a2fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a2fe:	7dfb      	ldrb	r3, [r7, #23]
 800a300:	3301      	adds	r3, #1
 800a302:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a304:	e013      	b.n	800a32e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a306:	7dfb      	ldrb	r3, [r7, #23]
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	4413      	add	r3, r2
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	7812      	ldrb	r2, [r2, #0]
 800a310:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	3301      	adds	r3, #1
 800a316:	613b      	str	r3, [r7, #16]
    idx++;
 800a318:	7dfb      	ldrb	r3, [r7, #23]
 800a31a:	3301      	adds	r3, #1
 800a31c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	4413      	add	r3, r2
 800a324:	2200      	movs	r2, #0
 800a326:	701a      	strb	r2, [r3, #0]
    idx++;
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	3301      	adds	r3, #1
 800a32c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1e7      	bne.n	800a306 <USBD_GetString+0x52>
 800a336:	e000      	b.n	800a33a <USBD_GetString+0x86>
    return;
 800a338:	bf00      	nop
  }
}
 800a33a:	3718      	adds	r7, #24
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a348:	2300      	movs	r3, #0
 800a34a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a350:	e005      	b.n	800a35e <USBD_GetLen+0x1e>
  {
    len++;
 800a352:	7bfb      	ldrb	r3, [r7, #15]
 800a354:	3301      	adds	r3, #1
 800a356:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	3301      	adds	r3, #1
 800a35c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1f5      	bne.n	800a352 <USBD_GetLen+0x12>
  }

  return len;
 800a366:	7bfb      	ldrb	r3, [r7, #15]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2202      	movs	r2, #2
 800a384:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	2100      	movs	r1, #0
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f000 fce1 	bl	800ad62 <USBD_LL_Transmit>

  return USBD_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b084      	sub	sp, #16
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	60f8      	str	r0, [r7, #12]
 800a3b2:	60b9      	str	r1, [r7, #8]
 800a3b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f000 fcd0 	bl	800ad62 <USBD_LL_Transmit>

  return USBD_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2203      	movs	r2, #3
 800a3dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 fcd4 	bl	800ada4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	60f8      	str	r0, [r7, #12]
 800a40e:	60b9      	str	r1, [r7, #8]
 800a410:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	2100      	movs	r1, #0
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f000 fcc3 	bl	800ada4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2204      	movs	r2, #4
 800a434:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a438:	2300      	movs	r3, #0
 800a43a:	2200      	movs	r2, #0
 800a43c:	2100      	movs	r1, #0
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fc8f 	bl	800ad62 <USBD_LL_Transmit>

  return USBD_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b082      	sub	sp, #8
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2205      	movs	r2, #5
 800a45a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a45e:	2300      	movs	r3, #0
 800a460:	2200      	movs	r2, #0
 800a462:	2100      	movs	r1, #0
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fc9d 	bl	800ada4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a478:	2200      	movs	r2, #0
 800a47a:	4912      	ldr	r1, [pc, #72]	; (800a4c4 <MX_USB_DEVICE_Init+0x50>)
 800a47c:	4812      	ldr	r0, [pc, #72]	; (800a4c8 <MX_USB_DEVICE_Init+0x54>)
 800a47e:	f7fe fd07 	bl	8008e90 <USBD_Init>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a488:	f7f7 fda6 	bl	8001fd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a48c:	490f      	ldr	r1, [pc, #60]	; (800a4cc <MX_USB_DEVICE_Init+0x58>)
 800a48e:	480e      	ldr	r0, [pc, #56]	; (800a4c8 <MX_USB_DEVICE_Init+0x54>)
 800a490:	f7fe fd2e 	bl	8008ef0 <USBD_RegisterClass>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a49a:	f7f7 fd9d 	bl	8001fd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a49e:	490c      	ldr	r1, [pc, #48]	; (800a4d0 <MX_USB_DEVICE_Init+0x5c>)
 800a4a0:	4809      	ldr	r0, [pc, #36]	; (800a4c8 <MX_USB_DEVICE_Init+0x54>)
 800a4a2:	f7fe fc65 	bl	8008d70 <USBD_CDC_RegisterInterface>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d001      	beq.n	800a4b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a4ac:	f7f7 fd94 	bl	8001fd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a4b0:	4805      	ldr	r0, [pc, #20]	; (800a4c8 <MX_USB_DEVICE_Init+0x54>)
 800a4b2:	f7fe fd53 	bl	8008f5c <USBD_Start>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d001      	beq.n	800a4c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a4bc:	f7f7 fd8c 	bl	8001fd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a4c0:	bf00      	nop
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	200000bc 	.word	0x200000bc
 800a4c8:	20000398 	.word	0x20000398
 800a4cc:	20000028 	.word	0x20000028
 800a4d0:	200000a8 	.word	0x200000a8

0800a4d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a4d8:	2200      	movs	r2, #0
 800a4da:	4905      	ldr	r1, [pc, #20]	; (800a4f0 <CDC_Init_FS+0x1c>)
 800a4dc:	4805      	ldr	r0, [pc, #20]	; (800a4f4 <CDC_Init_FS+0x20>)
 800a4de:	f7fe fc61 	bl	8008da4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a4e2:	4905      	ldr	r1, [pc, #20]	; (800a4f8 <CDC_Init_FS+0x24>)
 800a4e4:	4803      	ldr	r0, [pc, #12]	; (800a4f4 <CDC_Init_FS+0x20>)
 800a4e6:	f7fe fc7f 	bl	8008de8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a4ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	20000e74 	.word	0x20000e74
 800a4f4:	20000398 	.word	0x20000398
 800a4f8:	20000674 	.word	0x20000674

0800a4fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a500:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a502:	4618      	mov	r0, r3
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	4603      	mov	r3, r0
 800a514:	6039      	str	r1, [r7, #0]
 800a516:	71fb      	strb	r3, [r7, #7]
 800a518:	4613      	mov	r3, r2
 800a51a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a51c:	79fb      	ldrb	r3, [r7, #7]
 800a51e:	2b23      	cmp	r3, #35	; 0x23
 800a520:	d84a      	bhi.n	800a5b8 <CDC_Control_FS+0xac>
 800a522:	a201      	add	r2, pc, #4	; (adr r2, 800a528 <CDC_Control_FS+0x1c>)
 800a524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a528:	0800a5b9 	.word	0x0800a5b9
 800a52c:	0800a5b9 	.word	0x0800a5b9
 800a530:	0800a5b9 	.word	0x0800a5b9
 800a534:	0800a5b9 	.word	0x0800a5b9
 800a538:	0800a5b9 	.word	0x0800a5b9
 800a53c:	0800a5b9 	.word	0x0800a5b9
 800a540:	0800a5b9 	.word	0x0800a5b9
 800a544:	0800a5b9 	.word	0x0800a5b9
 800a548:	0800a5b9 	.word	0x0800a5b9
 800a54c:	0800a5b9 	.word	0x0800a5b9
 800a550:	0800a5b9 	.word	0x0800a5b9
 800a554:	0800a5b9 	.word	0x0800a5b9
 800a558:	0800a5b9 	.word	0x0800a5b9
 800a55c:	0800a5b9 	.word	0x0800a5b9
 800a560:	0800a5b9 	.word	0x0800a5b9
 800a564:	0800a5b9 	.word	0x0800a5b9
 800a568:	0800a5b9 	.word	0x0800a5b9
 800a56c:	0800a5b9 	.word	0x0800a5b9
 800a570:	0800a5b9 	.word	0x0800a5b9
 800a574:	0800a5b9 	.word	0x0800a5b9
 800a578:	0800a5b9 	.word	0x0800a5b9
 800a57c:	0800a5b9 	.word	0x0800a5b9
 800a580:	0800a5b9 	.word	0x0800a5b9
 800a584:	0800a5b9 	.word	0x0800a5b9
 800a588:	0800a5b9 	.word	0x0800a5b9
 800a58c:	0800a5b9 	.word	0x0800a5b9
 800a590:	0800a5b9 	.word	0x0800a5b9
 800a594:	0800a5b9 	.word	0x0800a5b9
 800a598:	0800a5b9 	.word	0x0800a5b9
 800a59c:	0800a5b9 	.word	0x0800a5b9
 800a5a0:	0800a5b9 	.word	0x0800a5b9
 800a5a4:	0800a5b9 	.word	0x0800a5b9
 800a5a8:	0800a5b9 	.word	0x0800a5b9
 800a5ac:	0800a5b9 	.word	0x0800a5b9
 800a5b0:	0800a5b9 	.word	0x0800a5b9
 800a5b4:	0800a5b9 	.word	0x0800a5b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a5b8:	bf00      	nop
  }

  return (USBD_OK);
 800a5ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a5d2:	6879      	ldr	r1, [r7, #4]
 800a5d4:	4805      	ldr	r0, [pc, #20]	; (800a5ec <CDC_Receive_FS+0x24>)
 800a5d6:	f7fe fc07 	bl	8008de8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a5da:	4804      	ldr	r0, [pc, #16]	; (800a5ec <CDC_Receive_FS+0x24>)
 800a5dc:	f7fe fc22 	bl	8008e24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a5e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	20000398 	.word	0x20000398

0800a5f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b087      	sub	sp, #28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a5fe:	2300      	movs	r3, #0
 800a600:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a602:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a606:	4618      	mov	r0, r3
 800a608:	371c      	adds	r7, #28
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
	...

0800a614 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	4603      	mov	r3, r0
 800a61c:	6039      	str	r1, [r7, #0]
 800a61e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	2212      	movs	r2, #18
 800a624:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a626:	4b03      	ldr	r3, [pc, #12]	; (800a634 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a628:	4618      	mov	r0, r3
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	200000d8 	.word	0x200000d8

0800a638 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	6039      	str	r1, [r7, #0]
 800a642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	2204      	movs	r2, #4
 800a648:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a64a:	4b03      	ldr	r3, [pc, #12]	; (800a658 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr
 800a658:	200000ec 	.word	0x200000ec

0800a65c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	4603      	mov	r3, r0
 800a664:	6039      	str	r1, [r7, #0]
 800a666:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a668:	79fb      	ldrb	r3, [r7, #7]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d105      	bne.n	800a67a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	4907      	ldr	r1, [pc, #28]	; (800a690 <USBD_FS_ProductStrDescriptor+0x34>)
 800a672:	4808      	ldr	r0, [pc, #32]	; (800a694 <USBD_FS_ProductStrDescriptor+0x38>)
 800a674:	f7ff fe1e 	bl	800a2b4 <USBD_GetString>
 800a678:	e004      	b.n	800a684 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	4904      	ldr	r1, [pc, #16]	; (800a690 <USBD_FS_ProductStrDescriptor+0x34>)
 800a67e:	4805      	ldr	r0, [pc, #20]	; (800a694 <USBD_FS_ProductStrDescriptor+0x38>)
 800a680:	f7ff fe18 	bl	800a2b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a684:	4b02      	ldr	r3, [pc, #8]	; (800a690 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a686:	4618      	mov	r0, r3
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	20001674 	.word	0x20001674
 800a694:	0800c028 	.word	0x0800c028

0800a698 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	4603      	mov	r3, r0
 800a6a0:	6039      	str	r1, [r7, #0]
 800a6a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a6a4:	683a      	ldr	r2, [r7, #0]
 800a6a6:	4904      	ldr	r1, [pc, #16]	; (800a6b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a6a8:	4804      	ldr	r0, [pc, #16]	; (800a6bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a6aa:	f7ff fe03 	bl	800a2b4 <USBD_GetString>
  return USBD_StrDesc;
 800a6ae:	4b02      	ldr	r3, [pc, #8]	; (800a6b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	20001674 	.word	0x20001674
 800a6bc:	0800c040 	.word	0x0800c040

0800a6c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	6039      	str	r1, [r7, #0]
 800a6ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	221a      	movs	r2, #26
 800a6d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a6d2:	f000 f843 	bl	800a75c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a6d6:	4b02      	ldr	r3, [pc, #8]	; (800a6e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	200000f0 	.word	0x200000f0

0800a6e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	6039      	str	r1, [r7, #0]
 800a6ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a6f0:	79fb      	ldrb	r3, [r7, #7]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d105      	bne.n	800a702 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	4907      	ldr	r1, [pc, #28]	; (800a718 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a6fa:	4808      	ldr	r0, [pc, #32]	; (800a71c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6fc:	f7ff fdda 	bl	800a2b4 <USBD_GetString>
 800a700:	e004      	b.n	800a70c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	4904      	ldr	r1, [pc, #16]	; (800a718 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a706:	4805      	ldr	r0, [pc, #20]	; (800a71c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a708:	f7ff fdd4 	bl	800a2b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a70c:	4b02      	ldr	r3, [pc, #8]	; (800a718 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	20001674 	.word	0x20001674
 800a71c:	0800c054 	.word	0x0800c054

0800a720 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	4603      	mov	r3, r0
 800a728:	6039      	str	r1, [r7, #0]
 800a72a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a72c:	79fb      	ldrb	r3, [r7, #7]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d105      	bne.n	800a73e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	4907      	ldr	r1, [pc, #28]	; (800a754 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a736:	4808      	ldr	r0, [pc, #32]	; (800a758 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a738:	f7ff fdbc 	bl	800a2b4 <USBD_GetString>
 800a73c:	e004      	b.n	800a748 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	4904      	ldr	r1, [pc, #16]	; (800a754 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a742:	4805      	ldr	r0, [pc, #20]	; (800a758 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a744:	f7ff fdb6 	bl	800a2b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a748:	4b02      	ldr	r3, [pc, #8]	; (800a754 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	20001674 	.word	0x20001674
 800a758:	0800c060 	.word	0x0800c060

0800a75c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a762:	4b0f      	ldr	r3, [pc, #60]	; (800a7a0 <Get_SerialNum+0x44>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a768:	4b0e      	ldr	r3, [pc, #56]	; (800a7a4 <Get_SerialNum+0x48>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a76e:	4b0e      	ldr	r3, [pc, #56]	; (800a7a8 <Get_SerialNum+0x4c>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4413      	add	r3, r2
 800a77a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d009      	beq.n	800a796 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a782:	2208      	movs	r2, #8
 800a784:	4909      	ldr	r1, [pc, #36]	; (800a7ac <Get_SerialNum+0x50>)
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f000 f814 	bl	800a7b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a78c:	2204      	movs	r2, #4
 800a78e:	4908      	ldr	r1, [pc, #32]	; (800a7b0 <Get_SerialNum+0x54>)
 800a790:	68b8      	ldr	r0, [r7, #8]
 800a792:	f000 f80f 	bl	800a7b4 <IntToUnicode>
  }
}
 800a796:	bf00      	nop
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	1fff7a10 	.word	0x1fff7a10
 800a7a4:	1fff7a14 	.word	0x1fff7a14
 800a7a8:	1fff7a18 	.word	0x1fff7a18
 800a7ac:	200000f2 	.word	0x200000f2
 800a7b0:	20000102 	.word	0x20000102

0800a7b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b087      	sub	sp, #28
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	75fb      	strb	r3, [r7, #23]
 800a7ca:	e027      	b.n	800a81c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	0f1b      	lsrs	r3, r3, #28
 800a7d0:	2b09      	cmp	r3, #9
 800a7d2:	d80b      	bhi.n	800a7ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	0f1b      	lsrs	r3, r3, #28
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
 800a7dc:	005b      	lsls	r3, r3, #1
 800a7de:	4619      	mov	r1, r3
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	440b      	add	r3, r1
 800a7e4:	3230      	adds	r2, #48	; 0x30
 800a7e6:	b2d2      	uxtb	r2, r2
 800a7e8:	701a      	strb	r2, [r3, #0]
 800a7ea:	e00a      	b.n	800a802 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	0f1b      	lsrs	r3, r3, #28
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	7dfb      	ldrb	r3, [r7, #23]
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	440b      	add	r3, r1
 800a7fc:	3237      	adds	r2, #55	; 0x37
 800a7fe:	b2d2      	uxtb	r2, r2
 800a800:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	011b      	lsls	r3, r3, #4
 800a806:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a808:	7dfb      	ldrb	r3, [r7, #23]
 800a80a:	005b      	lsls	r3, r3, #1
 800a80c:	3301      	adds	r3, #1
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	4413      	add	r3, r2
 800a812:	2200      	movs	r2, #0
 800a814:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a816:	7dfb      	ldrb	r3, [r7, #23]
 800a818:	3301      	adds	r3, #1
 800a81a:	75fb      	strb	r3, [r7, #23]
 800a81c:	7dfa      	ldrb	r2, [r7, #23]
 800a81e:	79fb      	ldrb	r3, [r7, #7]
 800a820:	429a      	cmp	r2, r3
 800a822:	d3d3      	bcc.n	800a7cc <IntToUnicode+0x18>
  }
}
 800a824:	bf00      	nop
 800a826:	bf00      	nop
 800a828:	371c      	adds	r7, #28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
	...

0800a834 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b0a0      	sub	sp, #128	; 0x80
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a83c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a840:	2200      	movs	r2, #0
 800a842:	601a      	str	r2, [r3, #0]
 800a844:	605a      	str	r2, [r3, #4]
 800a846:	609a      	str	r2, [r3, #8]
 800a848:	60da      	str	r2, [r3, #12]
 800a84a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a84c:	f107 0314 	add.w	r3, r7, #20
 800a850:	2258      	movs	r2, #88	; 0x58
 800a852:	2100      	movs	r1, #0
 800a854:	4618      	mov	r0, r3
 800a856:	f000 ff9f 	bl	800b798 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a862:	d155      	bne.n	800a910 <HAL_PCD_MspInit+0xdc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a864:	2320      	movs	r3, #32
 800a866:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800a868:	2300      	movs	r3, #0
 800a86a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a86c:	f107 0314 	add.w	r3, r7, #20
 800a870:	4618      	mov	r0, r3
 800a872:	f7fa fe1d 	bl	80054b0 <HAL_RCCEx_PeriphCLKConfig>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d001      	beq.n	800a880 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 800a87c:	f7f7 fbac 	bl	8001fd8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a880:	2300      	movs	r3, #0
 800a882:	613b      	str	r3, [r7, #16]
 800a884:	4b24      	ldr	r3, [pc, #144]	; (800a918 <HAL_PCD_MspInit+0xe4>)
 800a886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a888:	4a23      	ldr	r2, [pc, #140]	; (800a918 <HAL_PCD_MspInit+0xe4>)
 800a88a:	f043 0301 	orr.w	r3, r3, #1
 800a88e:	6313      	str	r3, [r2, #48]	; 0x30
 800a890:	4b21      	ldr	r3, [pc, #132]	; (800a918 <HAL_PCD_MspInit+0xe4>)
 800a892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	613b      	str	r3, [r7, #16]
 800a89a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a89c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a8a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a8ae:	230a      	movs	r3, #10
 800a8b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	4818      	ldr	r0, [pc, #96]	; (800a91c <HAL_PCD_MspInit+0xe8>)
 800a8ba:	f7f7 ff6b 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a8be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a8cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	4812      	ldr	r0, [pc, #72]	; (800a91c <HAL_PCD_MspInit+0xe8>)
 800a8d4:	f7f7 ff5e 	bl	8002794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a8d8:	4b0f      	ldr	r3, [pc, #60]	; (800a918 <HAL_PCD_MspInit+0xe4>)
 800a8da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8dc:	4a0e      	ldr	r2, [pc, #56]	; (800a918 <HAL_PCD_MspInit+0xe4>)
 800a8de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e2:	6353      	str	r3, [r2, #52]	; 0x34
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	60fb      	str	r3, [r7, #12]
 800a8e8:	4b0b      	ldr	r3, [pc, #44]	; (800a918 <HAL_PCD_MspInit+0xe4>)
 800a8ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ec:	4a0a      	ldr	r2, [pc, #40]	; (800a918 <HAL_PCD_MspInit+0xe4>)
 800a8ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8f2:	6453      	str	r3, [r2, #68]	; 0x44
 800a8f4:	4b08      	ldr	r3, [pc, #32]	; (800a918 <HAL_PCD_MspInit+0xe4>)
 800a8f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8fc:	60fb      	str	r3, [r7, #12]
 800a8fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a900:	2200      	movs	r2, #0
 800a902:	2100      	movs	r1, #0
 800a904:	2043      	movs	r0, #67	; 0x43
 800a906:	f7f7 ff1b 	bl	8002740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a90a:	2043      	movs	r0, #67	; 0x43
 800a90c:	f7f7 ff34 	bl	8002778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a910:	bf00      	nop
 800a912:	3780      	adds	r7, #128	; 0x80
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	40023800 	.word	0x40023800
 800a91c:	40020000 	.word	0x40020000

0800a920 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a934:	4619      	mov	r1, r3
 800a936:	4610      	mov	r0, r2
 800a938:	f7fe fb5d 	bl	8008ff6 <USBD_LL_SetupStage>
}
 800a93c:	bf00      	nop
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	460b      	mov	r3, r1
 800a94e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a956:	78fa      	ldrb	r2, [r7, #3]
 800a958:	6879      	ldr	r1, [r7, #4]
 800a95a:	4613      	mov	r3, r2
 800a95c:	00db      	lsls	r3, r3, #3
 800a95e:	4413      	add	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	440b      	add	r3, r1
 800a964:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	78fb      	ldrb	r3, [r7, #3]
 800a96c:	4619      	mov	r1, r3
 800a96e:	f7fe fb97 	bl	80090a0 <USBD_LL_DataOutStage>
}
 800a972:	bf00      	nop
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b082      	sub	sp, #8
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	460b      	mov	r3, r1
 800a984:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a98c:	78fa      	ldrb	r2, [r7, #3]
 800a98e:	6879      	ldr	r1, [r7, #4]
 800a990:	4613      	mov	r3, r2
 800a992:	00db      	lsls	r3, r3, #3
 800a994:	4413      	add	r3, r2
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	440b      	add	r3, r1
 800a99a:	334c      	adds	r3, #76	; 0x4c
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	78fb      	ldrb	r3, [r7, #3]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	f7fe fc30 	bl	8009206 <USBD_LL_DataInStage>
}
 800a9a6:	bf00      	nop
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b082      	sub	sp, #8
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fe fd64 	bl	800948a <USBD_LL_SOF>
}
 800a9c2:	bf00      	nop
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d001      	beq.n	800a9e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a9de:	f7f7 fafb 	bl	8001fd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a9e8:	7bfa      	ldrb	r2, [r7, #15]
 800a9ea:	4611      	mov	r1, r2
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fe fd0e 	bl	800940e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fe fcb6 	bl	800936a <USBD_LL_Reset>
}
 800a9fe:	bf00      	nop
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
	...

0800aa08 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fe fd09 	bl	800942e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	6812      	ldr	r2, [r2, #0]
 800aa2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa2e:	f043 0301 	orr.w	r3, r3, #1
 800aa32:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a1b      	ldr	r3, [r3, #32]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d005      	beq.n	800aa48 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa3c:	4b04      	ldr	r3, [pc, #16]	; (800aa50 <HAL_PCD_SuspendCallback+0x48>)
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	4a03      	ldr	r2, [pc, #12]	; (800aa50 <HAL_PCD_SuspendCallback+0x48>)
 800aa42:	f043 0306 	orr.w	r3, r3, #6
 800aa46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa48:	bf00      	nop
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	e000ed00 	.word	0xe000ed00

0800aa54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fe fcf9 	bl	800945a <USBD_LL_Resume>
}
 800aa68:	bf00      	nop
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	460b      	mov	r3, r1
 800aa7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa82:	78fa      	ldrb	r2, [r7, #3]
 800aa84:	4611      	mov	r1, r2
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fe fd51 	bl	800952e <USBD_LL_IsoOUTIncomplete>
}
 800aa8c:	bf00      	nop
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aaa6:	78fa      	ldrb	r2, [r7, #3]
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fe fd0d 	bl	80094ca <USBD_LL_IsoINIncomplete>
}
 800aab0:	bf00      	nop
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fe fd63 	bl	8009592 <USBD_LL_DevConnected>
}
 800aacc:	bf00      	nop
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe fd60 	bl	80095a8 <USBD_LL_DevDisconnected>
}
 800aae8:	bf00      	nop
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d13f      	bne.n	800ab80 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ab00:	4a22      	ldr	r2, [pc, #136]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a20      	ldr	r2, [pc, #128]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab0c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab10:	4b1e      	ldr	r3, [pc, #120]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ab16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ab18:	4b1c      	ldr	r3, [pc, #112]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab1a:	2206      	movs	r2, #6
 800ab1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ab1e:	4b1b      	ldr	r3, [pc, #108]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab20:	2202      	movs	r2, #2
 800ab22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ab24:	4b19      	ldr	r3, [pc, #100]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ab2a:	4b18      	ldr	r3, [pc, #96]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800ab30:	4b16      	ldr	r3, [pc, #88]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab32:	2201      	movs	r2, #1
 800ab34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ab36:	4b15      	ldr	r3, [pc, #84]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ab3c:	4b13      	ldr	r3, [pc, #76]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800ab42:	4b12      	ldr	r3, [pc, #72]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab44:	2201      	movs	r2, #1
 800ab46:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ab48:	4b10      	ldr	r3, [pc, #64]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ab4e:	4b0f      	ldr	r3, [pc, #60]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ab54:	480d      	ldr	r0, [pc, #52]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab56:	f7f8 ff84 	bl	8003a62 <HAL_PCD_Init>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 800ab60:	f7f7 fa3a 	bl	8001fd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ab64:	2180      	movs	r1, #128	; 0x80
 800ab66:	4809      	ldr	r0, [pc, #36]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab68:	f7fa fa0f 	bl	8004f8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ab6c:	2240      	movs	r2, #64	; 0x40
 800ab6e:	2100      	movs	r1, #0
 800ab70:	4806      	ldr	r0, [pc, #24]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab72:	f7fa f9c3 	bl	8004efc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ab76:	2280      	movs	r2, #128	; 0x80
 800ab78:	2101      	movs	r1, #1
 800ab7a:	4804      	ldr	r0, [pc, #16]	; (800ab8c <USBD_LL_Init+0x9c>)
 800ab7c:	f7fa f9be 	bl	8004efc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	20001874 	.word	0x20001874

0800ab90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7f9 f87f 	bl	8003caa <HAL_PCD_Start>
 800abac:	4603      	mov	r3, r0
 800abae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 f942 	bl	800ae3c <USBD_Get_USB_Status>
 800abb8:	4603      	mov	r3, r0
 800abba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b084      	sub	sp, #16
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
 800abce:	4608      	mov	r0, r1
 800abd0:	4611      	mov	r1, r2
 800abd2:	461a      	mov	r2, r3
 800abd4:	4603      	mov	r3, r0
 800abd6:	70fb      	strb	r3, [r7, #3]
 800abd8:	460b      	mov	r3, r1
 800abda:	70bb      	strb	r3, [r7, #2]
 800abdc:	4613      	mov	r3, r2
 800abde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800abee:	78bb      	ldrb	r3, [r7, #2]
 800abf0:	883a      	ldrh	r2, [r7, #0]
 800abf2:	78f9      	ldrb	r1, [r7, #3]
 800abf4:	f7f9 fd7d 	bl	80046f2 <HAL_PCD_EP_Open>
 800abf8:	4603      	mov	r3, r0
 800abfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 f91c 	bl	800ae3c <USBD_Get_USB_Status>
 800ac04:	4603      	mov	r3, r0
 800ac06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b084      	sub	sp, #16
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac22:	2300      	movs	r3, #0
 800ac24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac2c:	78fa      	ldrb	r2, [r7, #3]
 800ac2e:	4611      	mov	r1, r2
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7f9 fdc6 	bl	80047c2 <HAL_PCD_EP_Close>
 800ac36:	4603      	mov	r3, r0
 800ac38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 f8fd 	bl	800ae3c <USBD_Get_USB_Status>
 800ac42:	4603      	mov	r3, r0
 800ac44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	460b      	mov	r3, r1
 800ac5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac60:	2300      	movs	r3, #0
 800ac62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac6a:	78fa      	ldrb	r2, [r7, #3]
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7f9 fe9e 	bl	80049b0 <HAL_PCD_EP_SetStall>
 800ac74:	4603      	mov	r3, r0
 800ac76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac78:	7bfb      	ldrb	r3, [r7, #15]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 f8de 	bl	800ae3c <USBD_Get_USB_Status>
 800ac80:	4603      	mov	r3, r0
 800ac82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b084      	sub	sp, #16
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	460b      	mov	r3, r1
 800ac98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aca8:	78fa      	ldrb	r2, [r7, #3]
 800acaa:	4611      	mov	r1, r2
 800acac:	4618      	mov	r0, r3
 800acae:	f7f9 fee3 	bl	8004a78 <HAL_PCD_EP_ClrStall>
 800acb2:	4603      	mov	r3, r0
 800acb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acb6:	7bfb      	ldrb	r3, [r7, #15]
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 f8bf 	bl	800ae3c <USBD_Get_USB_Status>
 800acbe:	4603      	mov	r3, r0
 800acc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	460b      	mov	r3, r1
 800acd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ace0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	da0b      	bge.n	800ad00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ace8:	78fb      	ldrb	r3, [r7, #3]
 800acea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acee:	68f9      	ldr	r1, [r7, #12]
 800acf0:	4613      	mov	r3, r2
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	4413      	add	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	440b      	add	r3, r1
 800acfa:	333e      	adds	r3, #62	; 0x3e
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	e00b      	b.n	800ad18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad00:	78fb      	ldrb	r3, [r7, #3]
 800ad02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad06:	68f9      	ldr	r1, [r7, #12]
 800ad08:	4613      	mov	r3, r2
 800ad0a:	00db      	lsls	r3, r3, #3
 800ad0c:	4413      	add	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	440b      	add	r3, r1
 800ad12:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ad16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3714      	adds	r7, #20
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad30:	2300      	movs	r3, #0
 800ad32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad3e:	78fa      	ldrb	r2, [r7, #3]
 800ad40:	4611      	mov	r1, r2
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7f9 fcb0 	bl	80046a8 <HAL_PCD_SetAddress>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f000 f874 	bl	800ae3c <USBD_Get_USB_Status>
 800ad54:	4603      	mov	r3, r0
 800ad56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b086      	sub	sp, #24
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	60f8      	str	r0, [r7, #12]
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	603b      	str	r3, [r7, #0]
 800ad6e:	460b      	mov	r3, r1
 800ad70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad72:	2300      	movs	r3, #0
 800ad74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ad80:	7af9      	ldrb	r1, [r7, #11]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	f7f9 fdc9 	bl	800491c <HAL_PCD_EP_Transmit>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad8e:	7dfb      	ldrb	r3, [r7, #23]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 f853 	bl	800ae3c <USBD_Get_USB_Status>
 800ad96:	4603      	mov	r3, r0
 800ad98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad9a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3718      	adds	r7, #24
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b086      	sub	sp, #24
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	607a      	str	r2, [r7, #4]
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	460b      	mov	r3, r1
 800adb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb4:	2300      	movs	r3, #0
 800adb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800adc2:	7af9      	ldrb	r1, [r7, #11]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	f7f9 fd45 	bl	8004856 <HAL_PCD_EP_Receive>
 800adcc:	4603      	mov	r3, r0
 800adce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800add0:	7dfb      	ldrb	r3, [r7, #23]
 800add2:	4618      	mov	r0, r3
 800add4:	f000 f832 	bl	800ae3c <USBD_Get_USB_Status>
 800add8:	4603      	mov	r3, r0
 800adda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800addc:	7dbb      	ldrb	r3, [r7, #22]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3718      	adds	r7, #24
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b082      	sub	sp, #8
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	460b      	mov	r3, r1
 800adf0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800adf8:	78fa      	ldrb	r2, [r7, #3]
 800adfa:	4611      	mov	r1, r2
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7f9 fd75 	bl	80048ec <HAL_PCD_EP_GetRxCount>
 800ae02:	4603      	mov	r3, r0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae14:	4b03      	ldr	r3, [pc, #12]	; (800ae24 <USBD_static_malloc+0x18>)
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	370c      	adds	r7, #12
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	20001d80 	.word	0x20001d80

0800ae28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]

}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	4603      	mov	r3, r0
 800ae44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae4a:	79fb      	ldrb	r3, [r7, #7]
 800ae4c:	2b03      	cmp	r3, #3
 800ae4e:	d817      	bhi.n	800ae80 <USBD_Get_USB_Status+0x44>
 800ae50:	a201      	add	r2, pc, #4	; (adr r2, 800ae58 <USBD_Get_USB_Status+0x1c>)
 800ae52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae56:	bf00      	nop
 800ae58:	0800ae69 	.word	0x0800ae69
 800ae5c:	0800ae6f 	.word	0x0800ae6f
 800ae60:	0800ae75 	.word	0x0800ae75
 800ae64:	0800ae7b 	.word	0x0800ae7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae6c:	e00b      	b.n	800ae86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	73fb      	strb	r3, [r7, #15]
    break;
 800ae72:	e008      	b.n	800ae86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae74:	2301      	movs	r3, #1
 800ae76:	73fb      	strb	r3, [r7, #15]
    break;
 800ae78:	e005      	b.n	800ae86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae7e:	e002      	b.n	800ae86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae80:	2303      	movs	r3, #3
 800ae82:	73fb      	strb	r3, [r7, #15]
    break;
 800ae84:	bf00      	nop
  }
  return usb_status;
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3714      	adds	r7, #20
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <_Znwj>:
 800ae94:	2801      	cmp	r0, #1
 800ae96:	bf38      	it	cc
 800ae98:	2001      	movcc	r0, #1
 800ae9a:	b510      	push	{r4, lr}
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f000 fb92 	bl	800b5c8 <malloc>
 800aea4:	b100      	cbz	r0, 800aea8 <_Znwj+0x14>
 800aea6:	bd10      	pop	{r4, pc}
 800aea8:	f000 f806 	bl	800aeb8 <_ZSt15get_new_handlerv>
 800aeac:	b908      	cbnz	r0, 800aeb2 <_Znwj+0x1e>
 800aeae:	f000 fb84 	bl	800b5ba <abort>
 800aeb2:	4780      	blx	r0
 800aeb4:	e7f3      	b.n	800ae9e <_Znwj+0xa>
	...

0800aeb8 <_ZSt15get_new_handlerv>:
 800aeb8:	4b02      	ldr	r3, [pc, #8]	; (800aec4 <_ZSt15get_new_handlerv+0xc>)
 800aeba:	6818      	ldr	r0, [r3, #0]
 800aebc:	f3bf 8f5b 	dmb	ish
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	20001fa0 	.word	0x20001fa0

0800aec8 <atan2>:
 800aec8:	f000 b906 	b.w	800b0d8 <__ieee754_atan2>

0800aecc <sqrt>:
 800aecc:	b538      	push	{r3, r4, r5, lr}
 800aece:	ed2d 8b02 	vpush	{d8}
 800aed2:	ec55 4b10 	vmov	r4, r5, d0
 800aed6:	f000 f825 	bl	800af24 <__ieee754_sqrt>
 800aeda:	4622      	mov	r2, r4
 800aedc:	462b      	mov	r3, r5
 800aede:	4620      	mov	r0, r4
 800aee0:	4629      	mov	r1, r5
 800aee2:	eeb0 8a40 	vmov.f32	s16, s0
 800aee6:	eef0 8a60 	vmov.f32	s17, s1
 800aeea:	f7f5 fe3f 	bl	8000b6c <__aeabi_dcmpun>
 800aeee:	b990      	cbnz	r0, 800af16 <sqrt+0x4a>
 800aef0:	2200      	movs	r2, #0
 800aef2:	2300      	movs	r3, #0
 800aef4:	4620      	mov	r0, r4
 800aef6:	4629      	mov	r1, r5
 800aef8:	f7f5 fe10 	bl	8000b1c <__aeabi_dcmplt>
 800aefc:	b158      	cbz	r0, 800af16 <sqrt+0x4a>
 800aefe:	f000 fca7 	bl	800b850 <__errno>
 800af02:	2321      	movs	r3, #33	; 0x21
 800af04:	6003      	str	r3, [r0, #0]
 800af06:	2200      	movs	r2, #0
 800af08:	2300      	movs	r3, #0
 800af0a:	4610      	mov	r0, r2
 800af0c:	4619      	mov	r1, r3
 800af0e:	f7f5 fcbd 	bl	800088c <__aeabi_ddiv>
 800af12:	ec41 0b18 	vmov	d8, r0, r1
 800af16:	eeb0 0a48 	vmov.f32	s0, s16
 800af1a:	eef0 0a68 	vmov.f32	s1, s17
 800af1e:	ecbd 8b02 	vpop	{d8}
 800af22:	bd38      	pop	{r3, r4, r5, pc}

0800af24 <__ieee754_sqrt>:
 800af24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af28:	ec55 4b10 	vmov	r4, r5, d0
 800af2c:	4e67      	ldr	r6, [pc, #412]	; (800b0cc <__ieee754_sqrt+0x1a8>)
 800af2e:	43ae      	bics	r6, r5
 800af30:	ee10 0a10 	vmov	r0, s0
 800af34:	ee10 2a10 	vmov	r2, s0
 800af38:	4629      	mov	r1, r5
 800af3a:	462b      	mov	r3, r5
 800af3c:	d10d      	bne.n	800af5a <__ieee754_sqrt+0x36>
 800af3e:	f7f5 fb7b 	bl	8000638 <__aeabi_dmul>
 800af42:	4602      	mov	r2, r0
 800af44:	460b      	mov	r3, r1
 800af46:	4620      	mov	r0, r4
 800af48:	4629      	mov	r1, r5
 800af4a:	f7f5 f9bf 	bl	80002cc <__adddf3>
 800af4e:	4604      	mov	r4, r0
 800af50:	460d      	mov	r5, r1
 800af52:	ec45 4b10 	vmov	d0, r4, r5
 800af56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af5a:	2d00      	cmp	r5, #0
 800af5c:	dc0b      	bgt.n	800af76 <__ieee754_sqrt+0x52>
 800af5e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800af62:	4326      	orrs	r6, r4
 800af64:	d0f5      	beq.n	800af52 <__ieee754_sqrt+0x2e>
 800af66:	b135      	cbz	r5, 800af76 <__ieee754_sqrt+0x52>
 800af68:	f7f5 f9ae 	bl	80002c8 <__aeabi_dsub>
 800af6c:	4602      	mov	r2, r0
 800af6e:	460b      	mov	r3, r1
 800af70:	f7f5 fc8c 	bl	800088c <__aeabi_ddiv>
 800af74:	e7eb      	b.n	800af4e <__ieee754_sqrt+0x2a>
 800af76:	1509      	asrs	r1, r1, #20
 800af78:	f000 808d 	beq.w	800b096 <__ieee754_sqrt+0x172>
 800af7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af80:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800af84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af88:	07c9      	lsls	r1, r1, #31
 800af8a:	bf5c      	itt	pl
 800af8c:	005b      	lslpl	r3, r3, #1
 800af8e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800af92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af96:	bf58      	it	pl
 800af98:	0052      	lslpl	r2, r2, #1
 800af9a:	2500      	movs	r5, #0
 800af9c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800afa0:	1076      	asrs	r6, r6, #1
 800afa2:	0052      	lsls	r2, r2, #1
 800afa4:	f04f 0e16 	mov.w	lr, #22
 800afa8:	46ac      	mov	ip, r5
 800afaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800afae:	eb0c 0001 	add.w	r0, ip, r1
 800afb2:	4298      	cmp	r0, r3
 800afb4:	bfde      	ittt	le
 800afb6:	1a1b      	suble	r3, r3, r0
 800afb8:	eb00 0c01 	addle.w	ip, r0, r1
 800afbc:	186d      	addle	r5, r5, r1
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	f1be 0e01 	subs.w	lr, lr, #1
 800afc4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800afc8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800afcc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800afd0:	d1ed      	bne.n	800afae <__ieee754_sqrt+0x8a>
 800afd2:	4674      	mov	r4, lr
 800afd4:	2720      	movs	r7, #32
 800afd6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800afda:	4563      	cmp	r3, ip
 800afdc:	eb01 000e 	add.w	r0, r1, lr
 800afe0:	dc02      	bgt.n	800afe8 <__ieee754_sqrt+0xc4>
 800afe2:	d113      	bne.n	800b00c <__ieee754_sqrt+0xe8>
 800afe4:	4290      	cmp	r0, r2
 800afe6:	d811      	bhi.n	800b00c <__ieee754_sqrt+0xe8>
 800afe8:	2800      	cmp	r0, #0
 800afea:	eb00 0e01 	add.w	lr, r0, r1
 800afee:	da57      	bge.n	800b0a0 <__ieee754_sqrt+0x17c>
 800aff0:	f1be 0f00 	cmp.w	lr, #0
 800aff4:	db54      	blt.n	800b0a0 <__ieee754_sqrt+0x17c>
 800aff6:	f10c 0801 	add.w	r8, ip, #1
 800affa:	eba3 030c 	sub.w	r3, r3, ip
 800affe:	4290      	cmp	r0, r2
 800b000:	bf88      	it	hi
 800b002:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b006:	1a12      	subs	r2, r2, r0
 800b008:	440c      	add	r4, r1
 800b00a:	46c4      	mov	ip, r8
 800b00c:	005b      	lsls	r3, r3, #1
 800b00e:	3f01      	subs	r7, #1
 800b010:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b014:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b018:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b01c:	d1dd      	bne.n	800afda <__ieee754_sqrt+0xb6>
 800b01e:	4313      	orrs	r3, r2
 800b020:	d01b      	beq.n	800b05a <__ieee754_sqrt+0x136>
 800b022:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b0d0 <__ieee754_sqrt+0x1ac>
 800b026:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b0d4 <__ieee754_sqrt+0x1b0>
 800b02a:	e9da 0100 	ldrd	r0, r1, [sl]
 800b02e:	e9db 2300 	ldrd	r2, r3, [fp]
 800b032:	f7f5 f949 	bl	80002c8 <__aeabi_dsub>
 800b036:	e9da 8900 	ldrd	r8, r9, [sl]
 800b03a:	4602      	mov	r2, r0
 800b03c:	460b      	mov	r3, r1
 800b03e:	4640      	mov	r0, r8
 800b040:	4649      	mov	r1, r9
 800b042:	f7f5 fd75 	bl	8000b30 <__aeabi_dcmple>
 800b046:	b140      	cbz	r0, 800b05a <__ieee754_sqrt+0x136>
 800b048:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b04c:	e9da 0100 	ldrd	r0, r1, [sl]
 800b050:	e9db 2300 	ldrd	r2, r3, [fp]
 800b054:	d126      	bne.n	800b0a4 <__ieee754_sqrt+0x180>
 800b056:	3501      	adds	r5, #1
 800b058:	463c      	mov	r4, r7
 800b05a:	106a      	asrs	r2, r5, #1
 800b05c:	0863      	lsrs	r3, r4, #1
 800b05e:	07e9      	lsls	r1, r5, #31
 800b060:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b064:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b068:	bf48      	it	mi
 800b06a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b06e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b072:	461c      	mov	r4, r3
 800b074:	e76d      	b.n	800af52 <__ieee754_sqrt+0x2e>
 800b076:	0ad3      	lsrs	r3, r2, #11
 800b078:	3815      	subs	r0, #21
 800b07a:	0552      	lsls	r2, r2, #21
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d0fa      	beq.n	800b076 <__ieee754_sqrt+0x152>
 800b080:	02dc      	lsls	r4, r3, #11
 800b082:	d50a      	bpl.n	800b09a <__ieee754_sqrt+0x176>
 800b084:	f1c1 0420 	rsb	r4, r1, #32
 800b088:	fa22 f404 	lsr.w	r4, r2, r4
 800b08c:	1e4d      	subs	r5, r1, #1
 800b08e:	408a      	lsls	r2, r1
 800b090:	4323      	orrs	r3, r4
 800b092:	1b41      	subs	r1, r0, r5
 800b094:	e772      	b.n	800af7c <__ieee754_sqrt+0x58>
 800b096:	4608      	mov	r0, r1
 800b098:	e7f0      	b.n	800b07c <__ieee754_sqrt+0x158>
 800b09a:	005b      	lsls	r3, r3, #1
 800b09c:	3101      	adds	r1, #1
 800b09e:	e7ef      	b.n	800b080 <__ieee754_sqrt+0x15c>
 800b0a0:	46e0      	mov	r8, ip
 800b0a2:	e7aa      	b.n	800affa <__ieee754_sqrt+0xd6>
 800b0a4:	f7f5 f912 	bl	80002cc <__adddf3>
 800b0a8:	e9da 8900 	ldrd	r8, r9, [sl]
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	4640      	mov	r0, r8
 800b0b2:	4649      	mov	r1, r9
 800b0b4:	f7f5 fd32 	bl	8000b1c <__aeabi_dcmplt>
 800b0b8:	b120      	cbz	r0, 800b0c4 <__ieee754_sqrt+0x1a0>
 800b0ba:	1ca0      	adds	r0, r4, #2
 800b0bc:	bf08      	it	eq
 800b0be:	3501      	addeq	r5, #1
 800b0c0:	3402      	adds	r4, #2
 800b0c2:	e7ca      	b.n	800b05a <__ieee754_sqrt+0x136>
 800b0c4:	3401      	adds	r4, #1
 800b0c6:	f024 0401 	bic.w	r4, r4, #1
 800b0ca:	e7c6      	b.n	800b05a <__ieee754_sqrt+0x136>
 800b0cc:	7ff00000 	.word	0x7ff00000
 800b0d0:	20000110 	.word	0x20000110
 800b0d4:	20000118 	.word	0x20000118

0800b0d8 <__ieee754_atan2>:
 800b0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0dc:	ec57 6b11 	vmov	r6, r7, d1
 800b0e0:	4273      	negs	r3, r6
 800b0e2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b260 <__ieee754_atan2+0x188>
 800b0e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b0ea:	4333      	orrs	r3, r6
 800b0ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b0f0:	4543      	cmp	r3, r8
 800b0f2:	ec51 0b10 	vmov	r0, r1, d0
 800b0f6:	ee11 5a10 	vmov	r5, s2
 800b0fa:	d80a      	bhi.n	800b112 <__ieee754_atan2+0x3a>
 800b0fc:	4244      	negs	r4, r0
 800b0fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b102:	4304      	orrs	r4, r0
 800b104:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b108:	4544      	cmp	r4, r8
 800b10a:	ee10 9a10 	vmov	r9, s0
 800b10e:	468e      	mov	lr, r1
 800b110:	d907      	bls.n	800b122 <__ieee754_atan2+0x4a>
 800b112:	4632      	mov	r2, r6
 800b114:	463b      	mov	r3, r7
 800b116:	f7f5 f8d9 	bl	80002cc <__adddf3>
 800b11a:	ec41 0b10 	vmov	d0, r0, r1
 800b11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b122:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b126:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b12a:	4334      	orrs	r4, r6
 800b12c:	d103      	bne.n	800b136 <__ieee754_atan2+0x5e>
 800b12e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b132:	f000 b899 	b.w	800b268 <atan>
 800b136:	17bc      	asrs	r4, r7, #30
 800b138:	f004 0402 	and.w	r4, r4, #2
 800b13c:	ea53 0909 	orrs.w	r9, r3, r9
 800b140:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b144:	d107      	bne.n	800b156 <__ieee754_atan2+0x7e>
 800b146:	2c02      	cmp	r4, #2
 800b148:	d05f      	beq.n	800b20a <__ieee754_atan2+0x132>
 800b14a:	2c03      	cmp	r4, #3
 800b14c:	d1e5      	bne.n	800b11a <__ieee754_atan2+0x42>
 800b14e:	a140      	add	r1, pc, #256	; (adr r1, 800b250 <__ieee754_atan2+0x178>)
 800b150:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b154:	e7e1      	b.n	800b11a <__ieee754_atan2+0x42>
 800b156:	4315      	orrs	r5, r2
 800b158:	d106      	bne.n	800b168 <__ieee754_atan2+0x90>
 800b15a:	f1be 0f00 	cmp.w	lr, #0
 800b15e:	da5f      	bge.n	800b220 <__ieee754_atan2+0x148>
 800b160:	a13d      	add	r1, pc, #244	; (adr r1, 800b258 <__ieee754_atan2+0x180>)
 800b162:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b166:	e7d8      	b.n	800b11a <__ieee754_atan2+0x42>
 800b168:	4542      	cmp	r2, r8
 800b16a:	d10f      	bne.n	800b18c <__ieee754_atan2+0xb4>
 800b16c:	4293      	cmp	r3, r2
 800b16e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b172:	d107      	bne.n	800b184 <__ieee754_atan2+0xac>
 800b174:	2c02      	cmp	r4, #2
 800b176:	d84c      	bhi.n	800b212 <__ieee754_atan2+0x13a>
 800b178:	4b33      	ldr	r3, [pc, #204]	; (800b248 <__ieee754_atan2+0x170>)
 800b17a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b17e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b182:	e7ca      	b.n	800b11a <__ieee754_atan2+0x42>
 800b184:	2c02      	cmp	r4, #2
 800b186:	d848      	bhi.n	800b21a <__ieee754_atan2+0x142>
 800b188:	4b30      	ldr	r3, [pc, #192]	; (800b24c <__ieee754_atan2+0x174>)
 800b18a:	e7f6      	b.n	800b17a <__ieee754_atan2+0xa2>
 800b18c:	4543      	cmp	r3, r8
 800b18e:	d0e4      	beq.n	800b15a <__ieee754_atan2+0x82>
 800b190:	1a9b      	subs	r3, r3, r2
 800b192:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b196:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b19a:	da1e      	bge.n	800b1da <__ieee754_atan2+0x102>
 800b19c:	2f00      	cmp	r7, #0
 800b19e:	da01      	bge.n	800b1a4 <__ieee754_atan2+0xcc>
 800b1a0:	323c      	adds	r2, #60	; 0x3c
 800b1a2:	db1e      	blt.n	800b1e2 <__ieee754_atan2+0x10a>
 800b1a4:	4632      	mov	r2, r6
 800b1a6:	463b      	mov	r3, r7
 800b1a8:	f7f5 fb70 	bl	800088c <__aeabi_ddiv>
 800b1ac:	ec41 0b10 	vmov	d0, r0, r1
 800b1b0:	f000 f9fa 	bl	800b5a8 <fabs>
 800b1b4:	f000 f858 	bl	800b268 <atan>
 800b1b8:	ec51 0b10 	vmov	r0, r1, d0
 800b1bc:	2c01      	cmp	r4, #1
 800b1be:	d013      	beq.n	800b1e8 <__ieee754_atan2+0x110>
 800b1c0:	2c02      	cmp	r4, #2
 800b1c2:	d015      	beq.n	800b1f0 <__ieee754_atan2+0x118>
 800b1c4:	2c00      	cmp	r4, #0
 800b1c6:	d0a8      	beq.n	800b11a <__ieee754_atan2+0x42>
 800b1c8:	a317      	add	r3, pc, #92	; (adr r3, 800b228 <__ieee754_atan2+0x150>)
 800b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ce:	f7f5 f87b 	bl	80002c8 <__aeabi_dsub>
 800b1d2:	a317      	add	r3, pc, #92	; (adr r3, 800b230 <__ieee754_atan2+0x158>)
 800b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d8:	e014      	b.n	800b204 <__ieee754_atan2+0x12c>
 800b1da:	a117      	add	r1, pc, #92	; (adr r1, 800b238 <__ieee754_atan2+0x160>)
 800b1dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1e0:	e7ec      	b.n	800b1bc <__ieee754_atan2+0xe4>
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	e7e9      	b.n	800b1bc <__ieee754_atan2+0xe4>
 800b1e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	e794      	b.n	800b11a <__ieee754_atan2+0x42>
 800b1f0:	a30d      	add	r3, pc, #52	; (adr r3, 800b228 <__ieee754_atan2+0x150>)
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	f7f5 f867 	bl	80002c8 <__aeabi_dsub>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	a10c      	add	r1, pc, #48	; (adr r1, 800b230 <__ieee754_atan2+0x158>)
 800b200:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b204:	f7f5 f860 	bl	80002c8 <__aeabi_dsub>
 800b208:	e787      	b.n	800b11a <__ieee754_atan2+0x42>
 800b20a:	a109      	add	r1, pc, #36	; (adr r1, 800b230 <__ieee754_atan2+0x158>)
 800b20c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b210:	e783      	b.n	800b11a <__ieee754_atan2+0x42>
 800b212:	a10b      	add	r1, pc, #44	; (adr r1, 800b240 <__ieee754_atan2+0x168>)
 800b214:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b218:	e77f      	b.n	800b11a <__ieee754_atan2+0x42>
 800b21a:	2000      	movs	r0, #0
 800b21c:	2100      	movs	r1, #0
 800b21e:	e77c      	b.n	800b11a <__ieee754_atan2+0x42>
 800b220:	a105      	add	r1, pc, #20	; (adr r1, 800b238 <__ieee754_atan2+0x160>)
 800b222:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b226:	e778      	b.n	800b11a <__ieee754_atan2+0x42>
 800b228:	33145c07 	.word	0x33145c07
 800b22c:	3ca1a626 	.word	0x3ca1a626
 800b230:	54442d18 	.word	0x54442d18
 800b234:	400921fb 	.word	0x400921fb
 800b238:	54442d18 	.word	0x54442d18
 800b23c:	3ff921fb 	.word	0x3ff921fb
 800b240:	54442d18 	.word	0x54442d18
 800b244:	3fe921fb 	.word	0x3fe921fb
 800b248:	0800c088 	.word	0x0800c088
 800b24c:	0800c0a0 	.word	0x0800c0a0
 800b250:	54442d18 	.word	0x54442d18
 800b254:	c00921fb 	.word	0xc00921fb
 800b258:	54442d18 	.word	0x54442d18
 800b25c:	bff921fb 	.word	0xbff921fb
 800b260:	7ff00000 	.word	0x7ff00000
 800b264:	00000000 	.word	0x00000000

0800b268 <atan>:
 800b268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b26c:	ec55 4b10 	vmov	r4, r5, d0
 800b270:	4bc3      	ldr	r3, [pc, #780]	; (800b580 <atan+0x318>)
 800b272:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b276:	429e      	cmp	r6, r3
 800b278:	46ab      	mov	fp, r5
 800b27a:	dd18      	ble.n	800b2ae <atan+0x46>
 800b27c:	4bc1      	ldr	r3, [pc, #772]	; (800b584 <atan+0x31c>)
 800b27e:	429e      	cmp	r6, r3
 800b280:	dc01      	bgt.n	800b286 <atan+0x1e>
 800b282:	d109      	bne.n	800b298 <atan+0x30>
 800b284:	b144      	cbz	r4, 800b298 <atan+0x30>
 800b286:	4622      	mov	r2, r4
 800b288:	462b      	mov	r3, r5
 800b28a:	4620      	mov	r0, r4
 800b28c:	4629      	mov	r1, r5
 800b28e:	f7f5 f81d 	bl	80002cc <__adddf3>
 800b292:	4604      	mov	r4, r0
 800b294:	460d      	mov	r5, r1
 800b296:	e006      	b.n	800b2a6 <atan+0x3e>
 800b298:	f1bb 0f00 	cmp.w	fp, #0
 800b29c:	f300 8131 	bgt.w	800b502 <atan+0x29a>
 800b2a0:	a59b      	add	r5, pc, #620	; (adr r5, 800b510 <atan+0x2a8>)
 800b2a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b2a6:	ec45 4b10 	vmov	d0, r4, r5
 800b2aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ae:	4bb6      	ldr	r3, [pc, #728]	; (800b588 <atan+0x320>)
 800b2b0:	429e      	cmp	r6, r3
 800b2b2:	dc14      	bgt.n	800b2de <atan+0x76>
 800b2b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b2b8:	429e      	cmp	r6, r3
 800b2ba:	dc0d      	bgt.n	800b2d8 <atan+0x70>
 800b2bc:	a396      	add	r3, pc, #600	; (adr r3, 800b518 <atan+0x2b0>)
 800b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c2:	ee10 0a10 	vmov	r0, s0
 800b2c6:	4629      	mov	r1, r5
 800b2c8:	f7f5 f800 	bl	80002cc <__adddf3>
 800b2cc:	4baf      	ldr	r3, [pc, #700]	; (800b58c <atan+0x324>)
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f7f5 fc42 	bl	8000b58 <__aeabi_dcmpgt>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d1e6      	bne.n	800b2a6 <atan+0x3e>
 800b2d8:	f04f 3aff 	mov.w	sl, #4294967295
 800b2dc:	e02b      	b.n	800b336 <atan+0xce>
 800b2de:	f000 f963 	bl	800b5a8 <fabs>
 800b2e2:	4bab      	ldr	r3, [pc, #684]	; (800b590 <atan+0x328>)
 800b2e4:	429e      	cmp	r6, r3
 800b2e6:	ec55 4b10 	vmov	r4, r5, d0
 800b2ea:	f300 80bf 	bgt.w	800b46c <atan+0x204>
 800b2ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b2f2:	429e      	cmp	r6, r3
 800b2f4:	f300 80a0 	bgt.w	800b438 <atan+0x1d0>
 800b2f8:	ee10 2a10 	vmov	r2, s0
 800b2fc:	ee10 0a10 	vmov	r0, s0
 800b300:	462b      	mov	r3, r5
 800b302:	4629      	mov	r1, r5
 800b304:	f7f4 ffe2 	bl	80002cc <__adddf3>
 800b308:	4ba0      	ldr	r3, [pc, #640]	; (800b58c <atan+0x324>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	f7f4 ffdc 	bl	80002c8 <__aeabi_dsub>
 800b310:	2200      	movs	r2, #0
 800b312:	4606      	mov	r6, r0
 800b314:	460f      	mov	r7, r1
 800b316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b31a:	4620      	mov	r0, r4
 800b31c:	4629      	mov	r1, r5
 800b31e:	f7f4 ffd5 	bl	80002cc <__adddf3>
 800b322:	4602      	mov	r2, r0
 800b324:	460b      	mov	r3, r1
 800b326:	4630      	mov	r0, r6
 800b328:	4639      	mov	r1, r7
 800b32a:	f7f5 faaf 	bl	800088c <__aeabi_ddiv>
 800b32e:	f04f 0a00 	mov.w	sl, #0
 800b332:	4604      	mov	r4, r0
 800b334:	460d      	mov	r5, r1
 800b336:	4622      	mov	r2, r4
 800b338:	462b      	mov	r3, r5
 800b33a:	4620      	mov	r0, r4
 800b33c:	4629      	mov	r1, r5
 800b33e:	f7f5 f97b 	bl	8000638 <__aeabi_dmul>
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	4680      	mov	r8, r0
 800b348:	4689      	mov	r9, r1
 800b34a:	f7f5 f975 	bl	8000638 <__aeabi_dmul>
 800b34e:	a374      	add	r3, pc, #464	; (adr r3, 800b520 <atan+0x2b8>)
 800b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b354:	4606      	mov	r6, r0
 800b356:	460f      	mov	r7, r1
 800b358:	f7f5 f96e 	bl	8000638 <__aeabi_dmul>
 800b35c:	a372      	add	r3, pc, #456	; (adr r3, 800b528 <atan+0x2c0>)
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f7f4 ffb3 	bl	80002cc <__adddf3>
 800b366:	4632      	mov	r2, r6
 800b368:	463b      	mov	r3, r7
 800b36a:	f7f5 f965 	bl	8000638 <__aeabi_dmul>
 800b36e:	a370      	add	r3, pc, #448	; (adr r3, 800b530 <atan+0x2c8>)
 800b370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b374:	f7f4 ffaa 	bl	80002cc <__adddf3>
 800b378:	4632      	mov	r2, r6
 800b37a:	463b      	mov	r3, r7
 800b37c:	f7f5 f95c 	bl	8000638 <__aeabi_dmul>
 800b380:	a36d      	add	r3, pc, #436	; (adr r3, 800b538 <atan+0x2d0>)
 800b382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b386:	f7f4 ffa1 	bl	80002cc <__adddf3>
 800b38a:	4632      	mov	r2, r6
 800b38c:	463b      	mov	r3, r7
 800b38e:	f7f5 f953 	bl	8000638 <__aeabi_dmul>
 800b392:	a36b      	add	r3, pc, #428	; (adr r3, 800b540 <atan+0x2d8>)
 800b394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b398:	f7f4 ff98 	bl	80002cc <__adddf3>
 800b39c:	4632      	mov	r2, r6
 800b39e:	463b      	mov	r3, r7
 800b3a0:	f7f5 f94a 	bl	8000638 <__aeabi_dmul>
 800b3a4:	a368      	add	r3, pc, #416	; (adr r3, 800b548 <atan+0x2e0>)
 800b3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3aa:	f7f4 ff8f 	bl	80002cc <__adddf3>
 800b3ae:	4642      	mov	r2, r8
 800b3b0:	464b      	mov	r3, r9
 800b3b2:	f7f5 f941 	bl	8000638 <__aeabi_dmul>
 800b3b6:	a366      	add	r3, pc, #408	; (adr r3, 800b550 <atan+0x2e8>)
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	4680      	mov	r8, r0
 800b3be:	4689      	mov	r9, r1
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	f7f5 f938 	bl	8000638 <__aeabi_dmul>
 800b3c8:	a363      	add	r3, pc, #396	; (adr r3, 800b558 <atan+0x2f0>)
 800b3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ce:	f7f4 ff7b 	bl	80002c8 <__aeabi_dsub>
 800b3d2:	4632      	mov	r2, r6
 800b3d4:	463b      	mov	r3, r7
 800b3d6:	f7f5 f92f 	bl	8000638 <__aeabi_dmul>
 800b3da:	a361      	add	r3, pc, #388	; (adr r3, 800b560 <atan+0x2f8>)
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	f7f4 ff72 	bl	80002c8 <__aeabi_dsub>
 800b3e4:	4632      	mov	r2, r6
 800b3e6:	463b      	mov	r3, r7
 800b3e8:	f7f5 f926 	bl	8000638 <__aeabi_dmul>
 800b3ec:	a35e      	add	r3, pc, #376	; (adr r3, 800b568 <atan+0x300>)
 800b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f2:	f7f4 ff69 	bl	80002c8 <__aeabi_dsub>
 800b3f6:	4632      	mov	r2, r6
 800b3f8:	463b      	mov	r3, r7
 800b3fa:	f7f5 f91d 	bl	8000638 <__aeabi_dmul>
 800b3fe:	a35c      	add	r3, pc, #368	; (adr r3, 800b570 <atan+0x308>)
 800b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b404:	f7f4 ff60 	bl	80002c8 <__aeabi_dsub>
 800b408:	4632      	mov	r2, r6
 800b40a:	463b      	mov	r3, r7
 800b40c:	f7f5 f914 	bl	8000638 <__aeabi_dmul>
 800b410:	4602      	mov	r2, r0
 800b412:	460b      	mov	r3, r1
 800b414:	4640      	mov	r0, r8
 800b416:	4649      	mov	r1, r9
 800b418:	f7f4 ff58 	bl	80002cc <__adddf3>
 800b41c:	4622      	mov	r2, r4
 800b41e:	462b      	mov	r3, r5
 800b420:	f7f5 f90a 	bl	8000638 <__aeabi_dmul>
 800b424:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	d14b      	bne.n	800b4c6 <atan+0x25e>
 800b42e:	4620      	mov	r0, r4
 800b430:	4629      	mov	r1, r5
 800b432:	f7f4 ff49 	bl	80002c8 <__aeabi_dsub>
 800b436:	e72c      	b.n	800b292 <atan+0x2a>
 800b438:	ee10 0a10 	vmov	r0, s0
 800b43c:	4b53      	ldr	r3, [pc, #332]	; (800b58c <atan+0x324>)
 800b43e:	2200      	movs	r2, #0
 800b440:	4629      	mov	r1, r5
 800b442:	f7f4 ff41 	bl	80002c8 <__aeabi_dsub>
 800b446:	4b51      	ldr	r3, [pc, #324]	; (800b58c <atan+0x324>)
 800b448:	4606      	mov	r6, r0
 800b44a:	460f      	mov	r7, r1
 800b44c:	2200      	movs	r2, #0
 800b44e:	4620      	mov	r0, r4
 800b450:	4629      	mov	r1, r5
 800b452:	f7f4 ff3b 	bl	80002cc <__adddf3>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	4630      	mov	r0, r6
 800b45c:	4639      	mov	r1, r7
 800b45e:	f7f5 fa15 	bl	800088c <__aeabi_ddiv>
 800b462:	f04f 0a01 	mov.w	sl, #1
 800b466:	4604      	mov	r4, r0
 800b468:	460d      	mov	r5, r1
 800b46a:	e764      	b.n	800b336 <atan+0xce>
 800b46c:	4b49      	ldr	r3, [pc, #292]	; (800b594 <atan+0x32c>)
 800b46e:	429e      	cmp	r6, r3
 800b470:	da1d      	bge.n	800b4ae <atan+0x246>
 800b472:	ee10 0a10 	vmov	r0, s0
 800b476:	4b48      	ldr	r3, [pc, #288]	; (800b598 <atan+0x330>)
 800b478:	2200      	movs	r2, #0
 800b47a:	4629      	mov	r1, r5
 800b47c:	f7f4 ff24 	bl	80002c8 <__aeabi_dsub>
 800b480:	4b45      	ldr	r3, [pc, #276]	; (800b598 <atan+0x330>)
 800b482:	4606      	mov	r6, r0
 800b484:	460f      	mov	r7, r1
 800b486:	2200      	movs	r2, #0
 800b488:	4620      	mov	r0, r4
 800b48a:	4629      	mov	r1, r5
 800b48c:	f7f5 f8d4 	bl	8000638 <__aeabi_dmul>
 800b490:	4b3e      	ldr	r3, [pc, #248]	; (800b58c <atan+0x324>)
 800b492:	2200      	movs	r2, #0
 800b494:	f7f4 ff1a 	bl	80002cc <__adddf3>
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	4630      	mov	r0, r6
 800b49e:	4639      	mov	r1, r7
 800b4a0:	f7f5 f9f4 	bl	800088c <__aeabi_ddiv>
 800b4a4:	f04f 0a02 	mov.w	sl, #2
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	460d      	mov	r5, r1
 800b4ac:	e743      	b.n	800b336 <atan+0xce>
 800b4ae:	462b      	mov	r3, r5
 800b4b0:	ee10 2a10 	vmov	r2, s0
 800b4b4:	4939      	ldr	r1, [pc, #228]	; (800b59c <atan+0x334>)
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	f7f5 f9e8 	bl	800088c <__aeabi_ddiv>
 800b4bc:	f04f 0a03 	mov.w	sl, #3
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	460d      	mov	r5, r1
 800b4c4:	e737      	b.n	800b336 <atan+0xce>
 800b4c6:	4b36      	ldr	r3, [pc, #216]	; (800b5a0 <atan+0x338>)
 800b4c8:	4e36      	ldr	r6, [pc, #216]	; (800b5a4 <atan+0x33c>)
 800b4ca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d2:	f7f4 fef9 	bl	80002c8 <__aeabi_dsub>
 800b4d6:	4622      	mov	r2, r4
 800b4d8:	462b      	mov	r3, r5
 800b4da:	f7f4 fef5 	bl	80002c8 <__aeabi_dsub>
 800b4de:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b4ea:	f7f4 feed 	bl	80002c8 <__aeabi_dsub>
 800b4ee:	f1bb 0f00 	cmp.w	fp, #0
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	460d      	mov	r5, r1
 800b4f6:	f6bf aed6 	bge.w	800b2a6 <atan+0x3e>
 800b4fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4fe:	461d      	mov	r5, r3
 800b500:	e6d1      	b.n	800b2a6 <atan+0x3e>
 800b502:	a51d      	add	r5, pc, #116	; (adr r5, 800b578 <atan+0x310>)
 800b504:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b508:	e6cd      	b.n	800b2a6 <atan+0x3e>
 800b50a:	bf00      	nop
 800b50c:	f3af 8000 	nop.w
 800b510:	54442d18 	.word	0x54442d18
 800b514:	bff921fb 	.word	0xbff921fb
 800b518:	8800759c 	.word	0x8800759c
 800b51c:	7e37e43c 	.word	0x7e37e43c
 800b520:	e322da11 	.word	0xe322da11
 800b524:	3f90ad3a 	.word	0x3f90ad3a
 800b528:	24760deb 	.word	0x24760deb
 800b52c:	3fa97b4b 	.word	0x3fa97b4b
 800b530:	a0d03d51 	.word	0xa0d03d51
 800b534:	3fb10d66 	.word	0x3fb10d66
 800b538:	c54c206e 	.word	0xc54c206e
 800b53c:	3fb745cd 	.word	0x3fb745cd
 800b540:	920083ff 	.word	0x920083ff
 800b544:	3fc24924 	.word	0x3fc24924
 800b548:	5555550d 	.word	0x5555550d
 800b54c:	3fd55555 	.word	0x3fd55555
 800b550:	2c6a6c2f 	.word	0x2c6a6c2f
 800b554:	bfa2b444 	.word	0xbfa2b444
 800b558:	52defd9a 	.word	0x52defd9a
 800b55c:	3fadde2d 	.word	0x3fadde2d
 800b560:	af749a6d 	.word	0xaf749a6d
 800b564:	3fb3b0f2 	.word	0x3fb3b0f2
 800b568:	fe231671 	.word	0xfe231671
 800b56c:	3fbc71c6 	.word	0x3fbc71c6
 800b570:	9998ebc4 	.word	0x9998ebc4
 800b574:	3fc99999 	.word	0x3fc99999
 800b578:	54442d18 	.word	0x54442d18
 800b57c:	3ff921fb 	.word	0x3ff921fb
 800b580:	440fffff 	.word	0x440fffff
 800b584:	7ff00000 	.word	0x7ff00000
 800b588:	3fdbffff 	.word	0x3fdbffff
 800b58c:	3ff00000 	.word	0x3ff00000
 800b590:	3ff2ffff 	.word	0x3ff2ffff
 800b594:	40038000 	.word	0x40038000
 800b598:	3ff80000 	.word	0x3ff80000
 800b59c:	bff00000 	.word	0xbff00000
 800b5a0:	0800c0d8 	.word	0x0800c0d8
 800b5a4:	0800c0b8 	.word	0x0800c0b8

0800b5a8 <fabs>:
 800b5a8:	ec51 0b10 	vmov	r0, r1, d0
 800b5ac:	ee10 2a10 	vmov	r2, s0
 800b5b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b5b4:	ec43 2b10 	vmov	d0, r2, r3
 800b5b8:	4770      	bx	lr

0800b5ba <abort>:
 800b5ba:	b508      	push	{r3, lr}
 800b5bc:	2006      	movs	r0, #6
 800b5be:	f000 f91b 	bl	800b7f8 <raise>
 800b5c2:	2001      	movs	r0, #1
 800b5c4:	f7f6 ff22 	bl	800240c <_exit>

0800b5c8 <malloc>:
 800b5c8:	4b02      	ldr	r3, [pc, #8]	; (800b5d4 <malloc+0xc>)
 800b5ca:	4601      	mov	r1, r0
 800b5cc:	6818      	ldr	r0, [r3, #0]
 800b5ce:	f000 b823 	b.w	800b618 <_malloc_r>
 800b5d2:	bf00      	nop
 800b5d4:	2000016c 	.word	0x2000016c

0800b5d8 <sbrk_aligned>:
 800b5d8:	b570      	push	{r4, r5, r6, lr}
 800b5da:	4e0e      	ldr	r6, [pc, #56]	; (800b614 <sbrk_aligned+0x3c>)
 800b5dc:	460c      	mov	r4, r1
 800b5de:	6831      	ldr	r1, [r6, #0]
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	b911      	cbnz	r1, 800b5ea <sbrk_aligned+0x12>
 800b5e4:	f000 f924 	bl	800b830 <_sbrk_r>
 800b5e8:	6030      	str	r0, [r6, #0]
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	f000 f91f 	bl	800b830 <_sbrk_r>
 800b5f2:	1c43      	adds	r3, r0, #1
 800b5f4:	d00a      	beq.n	800b60c <sbrk_aligned+0x34>
 800b5f6:	1cc4      	adds	r4, r0, #3
 800b5f8:	f024 0403 	bic.w	r4, r4, #3
 800b5fc:	42a0      	cmp	r0, r4
 800b5fe:	d007      	beq.n	800b610 <sbrk_aligned+0x38>
 800b600:	1a21      	subs	r1, r4, r0
 800b602:	4628      	mov	r0, r5
 800b604:	f000 f914 	bl	800b830 <_sbrk_r>
 800b608:	3001      	adds	r0, #1
 800b60a:	d101      	bne.n	800b610 <sbrk_aligned+0x38>
 800b60c:	f04f 34ff 	mov.w	r4, #4294967295
 800b610:	4620      	mov	r0, r4
 800b612:	bd70      	pop	{r4, r5, r6, pc}
 800b614:	20001fa8 	.word	0x20001fa8

0800b618 <_malloc_r>:
 800b618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b61c:	1ccd      	adds	r5, r1, #3
 800b61e:	f025 0503 	bic.w	r5, r5, #3
 800b622:	3508      	adds	r5, #8
 800b624:	2d0c      	cmp	r5, #12
 800b626:	bf38      	it	cc
 800b628:	250c      	movcc	r5, #12
 800b62a:	2d00      	cmp	r5, #0
 800b62c:	4607      	mov	r7, r0
 800b62e:	db01      	blt.n	800b634 <_malloc_r+0x1c>
 800b630:	42a9      	cmp	r1, r5
 800b632:	d905      	bls.n	800b640 <_malloc_r+0x28>
 800b634:	230c      	movs	r3, #12
 800b636:	603b      	str	r3, [r7, #0]
 800b638:	2600      	movs	r6, #0
 800b63a:	4630      	mov	r0, r6
 800b63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b640:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b714 <_malloc_r+0xfc>
 800b644:	f000 f868 	bl	800b718 <__malloc_lock>
 800b648:	f8d8 3000 	ldr.w	r3, [r8]
 800b64c:	461c      	mov	r4, r3
 800b64e:	bb5c      	cbnz	r4, 800b6a8 <_malloc_r+0x90>
 800b650:	4629      	mov	r1, r5
 800b652:	4638      	mov	r0, r7
 800b654:	f7ff ffc0 	bl	800b5d8 <sbrk_aligned>
 800b658:	1c43      	adds	r3, r0, #1
 800b65a:	4604      	mov	r4, r0
 800b65c:	d155      	bne.n	800b70a <_malloc_r+0xf2>
 800b65e:	f8d8 4000 	ldr.w	r4, [r8]
 800b662:	4626      	mov	r6, r4
 800b664:	2e00      	cmp	r6, #0
 800b666:	d145      	bne.n	800b6f4 <_malloc_r+0xdc>
 800b668:	2c00      	cmp	r4, #0
 800b66a:	d048      	beq.n	800b6fe <_malloc_r+0xe6>
 800b66c:	6823      	ldr	r3, [r4, #0]
 800b66e:	4631      	mov	r1, r6
 800b670:	4638      	mov	r0, r7
 800b672:	eb04 0903 	add.w	r9, r4, r3
 800b676:	f000 f8db 	bl	800b830 <_sbrk_r>
 800b67a:	4581      	cmp	r9, r0
 800b67c:	d13f      	bne.n	800b6fe <_malloc_r+0xe6>
 800b67e:	6821      	ldr	r1, [r4, #0]
 800b680:	1a6d      	subs	r5, r5, r1
 800b682:	4629      	mov	r1, r5
 800b684:	4638      	mov	r0, r7
 800b686:	f7ff ffa7 	bl	800b5d8 <sbrk_aligned>
 800b68a:	3001      	adds	r0, #1
 800b68c:	d037      	beq.n	800b6fe <_malloc_r+0xe6>
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	442b      	add	r3, r5
 800b692:	6023      	str	r3, [r4, #0]
 800b694:	f8d8 3000 	ldr.w	r3, [r8]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d038      	beq.n	800b70e <_malloc_r+0xf6>
 800b69c:	685a      	ldr	r2, [r3, #4]
 800b69e:	42a2      	cmp	r2, r4
 800b6a0:	d12b      	bne.n	800b6fa <_malloc_r+0xe2>
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	605a      	str	r2, [r3, #4]
 800b6a6:	e00f      	b.n	800b6c8 <_malloc_r+0xb0>
 800b6a8:	6822      	ldr	r2, [r4, #0]
 800b6aa:	1b52      	subs	r2, r2, r5
 800b6ac:	d41f      	bmi.n	800b6ee <_malloc_r+0xd6>
 800b6ae:	2a0b      	cmp	r2, #11
 800b6b0:	d917      	bls.n	800b6e2 <_malloc_r+0xca>
 800b6b2:	1961      	adds	r1, r4, r5
 800b6b4:	42a3      	cmp	r3, r4
 800b6b6:	6025      	str	r5, [r4, #0]
 800b6b8:	bf18      	it	ne
 800b6ba:	6059      	strne	r1, [r3, #4]
 800b6bc:	6863      	ldr	r3, [r4, #4]
 800b6be:	bf08      	it	eq
 800b6c0:	f8c8 1000 	streq.w	r1, [r8]
 800b6c4:	5162      	str	r2, [r4, r5]
 800b6c6:	604b      	str	r3, [r1, #4]
 800b6c8:	4638      	mov	r0, r7
 800b6ca:	f104 060b 	add.w	r6, r4, #11
 800b6ce:	f000 f829 	bl	800b724 <__malloc_unlock>
 800b6d2:	f026 0607 	bic.w	r6, r6, #7
 800b6d6:	1d23      	adds	r3, r4, #4
 800b6d8:	1af2      	subs	r2, r6, r3
 800b6da:	d0ae      	beq.n	800b63a <_malloc_r+0x22>
 800b6dc:	1b9b      	subs	r3, r3, r6
 800b6de:	50a3      	str	r3, [r4, r2]
 800b6e0:	e7ab      	b.n	800b63a <_malloc_r+0x22>
 800b6e2:	42a3      	cmp	r3, r4
 800b6e4:	6862      	ldr	r2, [r4, #4]
 800b6e6:	d1dd      	bne.n	800b6a4 <_malloc_r+0x8c>
 800b6e8:	f8c8 2000 	str.w	r2, [r8]
 800b6ec:	e7ec      	b.n	800b6c8 <_malloc_r+0xb0>
 800b6ee:	4623      	mov	r3, r4
 800b6f0:	6864      	ldr	r4, [r4, #4]
 800b6f2:	e7ac      	b.n	800b64e <_malloc_r+0x36>
 800b6f4:	4634      	mov	r4, r6
 800b6f6:	6876      	ldr	r6, [r6, #4]
 800b6f8:	e7b4      	b.n	800b664 <_malloc_r+0x4c>
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	e7cc      	b.n	800b698 <_malloc_r+0x80>
 800b6fe:	230c      	movs	r3, #12
 800b700:	603b      	str	r3, [r7, #0]
 800b702:	4638      	mov	r0, r7
 800b704:	f000 f80e 	bl	800b724 <__malloc_unlock>
 800b708:	e797      	b.n	800b63a <_malloc_r+0x22>
 800b70a:	6025      	str	r5, [r4, #0]
 800b70c:	e7dc      	b.n	800b6c8 <_malloc_r+0xb0>
 800b70e:	605b      	str	r3, [r3, #4]
 800b710:	deff      	udf	#255	; 0xff
 800b712:	bf00      	nop
 800b714:	20001fa4 	.word	0x20001fa4

0800b718 <__malloc_lock>:
 800b718:	4801      	ldr	r0, [pc, #4]	; (800b720 <__malloc_lock+0x8>)
 800b71a:	f000 b8c3 	b.w	800b8a4 <__retarget_lock_acquire_recursive>
 800b71e:	bf00      	nop
 800b720:	200020e8 	.word	0x200020e8

0800b724 <__malloc_unlock>:
 800b724:	4801      	ldr	r0, [pc, #4]	; (800b72c <__malloc_unlock+0x8>)
 800b726:	f000 b8be 	b.w	800b8a6 <__retarget_lock_release_recursive>
 800b72a:	bf00      	nop
 800b72c:	200020e8 	.word	0x200020e8

0800b730 <sniprintf>:
 800b730:	b40c      	push	{r2, r3}
 800b732:	b530      	push	{r4, r5, lr}
 800b734:	4b17      	ldr	r3, [pc, #92]	; (800b794 <sniprintf+0x64>)
 800b736:	1e0c      	subs	r4, r1, #0
 800b738:	681d      	ldr	r5, [r3, #0]
 800b73a:	b09d      	sub	sp, #116	; 0x74
 800b73c:	da08      	bge.n	800b750 <sniprintf+0x20>
 800b73e:	238b      	movs	r3, #139	; 0x8b
 800b740:	602b      	str	r3, [r5, #0]
 800b742:	f04f 30ff 	mov.w	r0, #4294967295
 800b746:	b01d      	add	sp, #116	; 0x74
 800b748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b74c:	b002      	add	sp, #8
 800b74e:	4770      	bx	lr
 800b750:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b754:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b758:	bf14      	ite	ne
 800b75a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b75e:	4623      	moveq	r3, r4
 800b760:	9304      	str	r3, [sp, #16]
 800b762:	9307      	str	r3, [sp, #28]
 800b764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b768:	9002      	str	r0, [sp, #8]
 800b76a:	9006      	str	r0, [sp, #24]
 800b76c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b770:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b772:	ab21      	add	r3, sp, #132	; 0x84
 800b774:	a902      	add	r1, sp, #8
 800b776:	4628      	mov	r0, r5
 800b778:	9301      	str	r3, [sp, #4]
 800b77a:	f000 f93b 	bl	800b9f4 <_svfiprintf_r>
 800b77e:	1c43      	adds	r3, r0, #1
 800b780:	bfbc      	itt	lt
 800b782:	238b      	movlt	r3, #139	; 0x8b
 800b784:	602b      	strlt	r3, [r5, #0]
 800b786:	2c00      	cmp	r4, #0
 800b788:	d0dd      	beq.n	800b746 <sniprintf+0x16>
 800b78a:	9b02      	ldr	r3, [sp, #8]
 800b78c:	2200      	movs	r2, #0
 800b78e:	701a      	strb	r2, [r3, #0]
 800b790:	e7d9      	b.n	800b746 <sniprintf+0x16>
 800b792:	bf00      	nop
 800b794:	2000016c 	.word	0x2000016c

0800b798 <memset>:
 800b798:	4402      	add	r2, r0
 800b79a:	4603      	mov	r3, r0
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d100      	bne.n	800b7a2 <memset+0xa>
 800b7a0:	4770      	bx	lr
 800b7a2:	f803 1b01 	strb.w	r1, [r3], #1
 800b7a6:	e7f9      	b.n	800b79c <memset+0x4>

0800b7a8 <_raise_r>:
 800b7a8:	291f      	cmp	r1, #31
 800b7aa:	b538      	push	{r3, r4, r5, lr}
 800b7ac:	4604      	mov	r4, r0
 800b7ae:	460d      	mov	r5, r1
 800b7b0:	d904      	bls.n	800b7bc <_raise_r+0x14>
 800b7b2:	2316      	movs	r3, #22
 800b7b4:	6003      	str	r3, [r0, #0]
 800b7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ba:	bd38      	pop	{r3, r4, r5, pc}
 800b7bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b7be:	b112      	cbz	r2, 800b7c6 <_raise_r+0x1e>
 800b7c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7c4:	b94b      	cbnz	r3, 800b7da <_raise_r+0x32>
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 f830 	bl	800b82c <_getpid_r>
 800b7cc:	462a      	mov	r2, r5
 800b7ce:	4601      	mov	r1, r0
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7d6:	f000 b817 	b.w	800b808 <_kill_r>
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d00a      	beq.n	800b7f4 <_raise_r+0x4c>
 800b7de:	1c59      	adds	r1, r3, #1
 800b7e0:	d103      	bne.n	800b7ea <_raise_r+0x42>
 800b7e2:	2316      	movs	r3, #22
 800b7e4:	6003      	str	r3, [r0, #0]
 800b7e6:	2001      	movs	r0, #1
 800b7e8:	e7e7      	b.n	800b7ba <_raise_r+0x12>
 800b7ea:	2400      	movs	r4, #0
 800b7ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	4798      	blx	r3
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	e7e0      	b.n	800b7ba <_raise_r+0x12>

0800b7f8 <raise>:
 800b7f8:	4b02      	ldr	r3, [pc, #8]	; (800b804 <raise+0xc>)
 800b7fa:	4601      	mov	r1, r0
 800b7fc:	6818      	ldr	r0, [r3, #0]
 800b7fe:	f7ff bfd3 	b.w	800b7a8 <_raise_r>
 800b802:	bf00      	nop
 800b804:	2000016c 	.word	0x2000016c

0800b808 <_kill_r>:
 800b808:	b538      	push	{r3, r4, r5, lr}
 800b80a:	4d07      	ldr	r5, [pc, #28]	; (800b828 <_kill_r+0x20>)
 800b80c:	2300      	movs	r3, #0
 800b80e:	4604      	mov	r4, r0
 800b810:	4608      	mov	r0, r1
 800b812:	4611      	mov	r1, r2
 800b814:	602b      	str	r3, [r5, #0]
 800b816:	f7f6 fde9 	bl	80023ec <_kill>
 800b81a:	1c43      	adds	r3, r0, #1
 800b81c:	d102      	bne.n	800b824 <_kill_r+0x1c>
 800b81e:	682b      	ldr	r3, [r5, #0]
 800b820:	b103      	cbz	r3, 800b824 <_kill_r+0x1c>
 800b822:	6023      	str	r3, [r4, #0]
 800b824:	bd38      	pop	{r3, r4, r5, pc}
 800b826:	bf00      	nop
 800b828:	200020e4 	.word	0x200020e4

0800b82c <_getpid_r>:
 800b82c:	f7f6 bdd6 	b.w	80023dc <_getpid>

0800b830 <_sbrk_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4d06      	ldr	r5, [pc, #24]	; (800b84c <_sbrk_r+0x1c>)
 800b834:	2300      	movs	r3, #0
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	602b      	str	r3, [r5, #0]
 800b83c:	f7f6 fdf0 	bl	8002420 <_sbrk>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d102      	bne.n	800b84a <_sbrk_r+0x1a>
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	b103      	cbz	r3, 800b84a <_sbrk_r+0x1a>
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	bd38      	pop	{r3, r4, r5, pc}
 800b84c:	200020e4 	.word	0x200020e4

0800b850 <__errno>:
 800b850:	4b01      	ldr	r3, [pc, #4]	; (800b858 <__errno+0x8>)
 800b852:	6818      	ldr	r0, [r3, #0]
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	2000016c 	.word	0x2000016c

0800b85c <__libc_init_array>:
 800b85c:	b570      	push	{r4, r5, r6, lr}
 800b85e:	4d0d      	ldr	r5, [pc, #52]	; (800b894 <__libc_init_array+0x38>)
 800b860:	4c0d      	ldr	r4, [pc, #52]	; (800b898 <__libc_init_array+0x3c>)
 800b862:	1b64      	subs	r4, r4, r5
 800b864:	10a4      	asrs	r4, r4, #2
 800b866:	2600      	movs	r6, #0
 800b868:	42a6      	cmp	r6, r4
 800b86a:	d109      	bne.n	800b880 <__libc_init_array+0x24>
 800b86c:	4d0b      	ldr	r5, [pc, #44]	; (800b89c <__libc_init_array+0x40>)
 800b86e:	4c0c      	ldr	r4, [pc, #48]	; (800b8a0 <__libc_init_array+0x44>)
 800b870:	f000 fbae 	bl	800bfd0 <_init>
 800b874:	1b64      	subs	r4, r4, r5
 800b876:	10a4      	asrs	r4, r4, #2
 800b878:	2600      	movs	r6, #0
 800b87a:	42a6      	cmp	r6, r4
 800b87c:	d105      	bne.n	800b88a <__libc_init_array+0x2e>
 800b87e:	bd70      	pop	{r4, r5, r6, pc}
 800b880:	f855 3b04 	ldr.w	r3, [r5], #4
 800b884:	4798      	blx	r3
 800b886:	3601      	adds	r6, #1
 800b888:	e7ee      	b.n	800b868 <__libc_init_array+0xc>
 800b88a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b88e:	4798      	blx	r3
 800b890:	3601      	adds	r6, #1
 800b892:	e7f2      	b.n	800b87a <__libc_init_array+0x1e>
 800b894:	0800c134 	.word	0x0800c134
 800b898:	0800c134 	.word	0x0800c134
 800b89c:	0800c134 	.word	0x0800c134
 800b8a0:	0800c138 	.word	0x0800c138

0800b8a4 <__retarget_lock_acquire_recursive>:
 800b8a4:	4770      	bx	lr

0800b8a6 <__retarget_lock_release_recursive>:
 800b8a6:	4770      	bx	lr

0800b8a8 <_free_r>:
 800b8a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8aa:	2900      	cmp	r1, #0
 800b8ac:	d044      	beq.n	800b938 <_free_r+0x90>
 800b8ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8b2:	9001      	str	r0, [sp, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f1a1 0404 	sub.w	r4, r1, #4
 800b8ba:	bfb8      	it	lt
 800b8bc:	18e4      	addlt	r4, r4, r3
 800b8be:	f7ff ff2b 	bl	800b718 <__malloc_lock>
 800b8c2:	4a1e      	ldr	r2, [pc, #120]	; (800b93c <_free_r+0x94>)
 800b8c4:	9801      	ldr	r0, [sp, #4]
 800b8c6:	6813      	ldr	r3, [r2, #0]
 800b8c8:	b933      	cbnz	r3, 800b8d8 <_free_r+0x30>
 800b8ca:	6063      	str	r3, [r4, #4]
 800b8cc:	6014      	str	r4, [r2, #0]
 800b8ce:	b003      	add	sp, #12
 800b8d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8d4:	f7ff bf26 	b.w	800b724 <__malloc_unlock>
 800b8d8:	42a3      	cmp	r3, r4
 800b8da:	d908      	bls.n	800b8ee <_free_r+0x46>
 800b8dc:	6825      	ldr	r5, [r4, #0]
 800b8de:	1961      	adds	r1, r4, r5
 800b8e0:	428b      	cmp	r3, r1
 800b8e2:	bf01      	itttt	eq
 800b8e4:	6819      	ldreq	r1, [r3, #0]
 800b8e6:	685b      	ldreq	r3, [r3, #4]
 800b8e8:	1949      	addeq	r1, r1, r5
 800b8ea:	6021      	streq	r1, [r4, #0]
 800b8ec:	e7ed      	b.n	800b8ca <_free_r+0x22>
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	b10b      	cbz	r3, 800b8f8 <_free_r+0x50>
 800b8f4:	42a3      	cmp	r3, r4
 800b8f6:	d9fa      	bls.n	800b8ee <_free_r+0x46>
 800b8f8:	6811      	ldr	r1, [r2, #0]
 800b8fa:	1855      	adds	r5, r2, r1
 800b8fc:	42a5      	cmp	r5, r4
 800b8fe:	d10b      	bne.n	800b918 <_free_r+0x70>
 800b900:	6824      	ldr	r4, [r4, #0]
 800b902:	4421      	add	r1, r4
 800b904:	1854      	adds	r4, r2, r1
 800b906:	42a3      	cmp	r3, r4
 800b908:	6011      	str	r1, [r2, #0]
 800b90a:	d1e0      	bne.n	800b8ce <_free_r+0x26>
 800b90c:	681c      	ldr	r4, [r3, #0]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	6053      	str	r3, [r2, #4]
 800b912:	440c      	add	r4, r1
 800b914:	6014      	str	r4, [r2, #0]
 800b916:	e7da      	b.n	800b8ce <_free_r+0x26>
 800b918:	d902      	bls.n	800b920 <_free_r+0x78>
 800b91a:	230c      	movs	r3, #12
 800b91c:	6003      	str	r3, [r0, #0]
 800b91e:	e7d6      	b.n	800b8ce <_free_r+0x26>
 800b920:	6825      	ldr	r5, [r4, #0]
 800b922:	1961      	adds	r1, r4, r5
 800b924:	428b      	cmp	r3, r1
 800b926:	bf04      	itt	eq
 800b928:	6819      	ldreq	r1, [r3, #0]
 800b92a:	685b      	ldreq	r3, [r3, #4]
 800b92c:	6063      	str	r3, [r4, #4]
 800b92e:	bf04      	itt	eq
 800b930:	1949      	addeq	r1, r1, r5
 800b932:	6021      	streq	r1, [r4, #0]
 800b934:	6054      	str	r4, [r2, #4]
 800b936:	e7ca      	b.n	800b8ce <_free_r+0x26>
 800b938:	b003      	add	sp, #12
 800b93a:	bd30      	pop	{r4, r5, pc}
 800b93c:	20001fa4 	.word	0x20001fa4

0800b940 <__ssputs_r>:
 800b940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b944:	688e      	ldr	r6, [r1, #8]
 800b946:	461f      	mov	r7, r3
 800b948:	42be      	cmp	r6, r7
 800b94a:	680b      	ldr	r3, [r1, #0]
 800b94c:	4682      	mov	sl, r0
 800b94e:	460c      	mov	r4, r1
 800b950:	4690      	mov	r8, r2
 800b952:	d82c      	bhi.n	800b9ae <__ssputs_r+0x6e>
 800b954:	898a      	ldrh	r2, [r1, #12]
 800b956:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b95a:	d026      	beq.n	800b9aa <__ssputs_r+0x6a>
 800b95c:	6965      	ldr	r5, [r4, #20]
 800b95e:	6909      	ldr	r1, [r1, #16]
 800b960:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b964:	eba3 0901 	sub.w	r9, r3, r1
 800b968:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b96c:	1c7b      	adds	r3, r7, #1
 800b96e:	444b      	add	r3, r9
 800b970:	106d      	asrs	r5, r5, #1
 800b972:	429d      	cmp	r5, r3
 800b974:	bf38      	it	cc
 800b976:	461d      	movcc	r5, r3
 800b978:	0553      	lsls	r3, r2, #21
 800b97a:	d527      	bpl.n	800b9cc <__ssputs_r+0x8c>
 800b97c:	4629      	mov	r1, r5
 800b97e:	f7ff fe4b 	bl	800b618 <_malloc_r>
 800b982:	4606      	mov	r6, r0
 800b984:	b360      	cbz	r0, 800b9e0 <__ssputs_r+0xa0>
 800b986:	6921      	ldr	r1, [r4, #16]
 800b988:	464a      	mov	r2, r9
 800b98a:	f000 fadb 	bl	800bf44 <memcpy>
 800b98e:	89a3      	ldrh	r3, [r4, #12]
 800b990:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b998:	81a3      	strh	r3, [r4, #12]
 800b99a:	6126      	str	r6, [r4, #16]
 800b99c:	6165      	str	r5, [r4, #20]
 800b99e:	444e      	add	r6, r9
 800b9a0:	eba5 0509 	sub.w	r5, r5, r9
 800b9a4:	6026      	str	r6, [r4, #0]
 800b9a6:	60a5      	str	r5, [r4, #8]
 800b9a8:	463e      	mov	r6, r7
 800b9aa:	42be      	cmp	r6, r7
 800b9ac:	d900      	bls.n	800b9b0 <__ssputs_r+0x70>
 800b9ae:	463e      	mov	r6, r7
 800b9b0:	6820      	ldr	r0, [r4, #0]
 800b9b2:	4632      	mov	r2, r6
 800b9b4:	4641      	mov	r1, r8
 800b9b6:	f000 faab 	bl	800bf10 <memmove>
 800b9ba:	68a3      	ldr	r3, [r4, #8]
 800b9bc:	1b9b      	subs	r3, r3, r6
 800b9be:	60a3      	str	r3, [r4, #8]
 800b9c0:	6823      	ldr	r3, [r4, #0]
 800b9c2:	4433      	add	r3, r6
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9cc:	462a      	mov	r2, r5
 800b9ce:	f000 fac7 	bl	800bf60 <_realloc_r>
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d1e0      	bne.n	800b99a <__ssputs_r+0x5a>
 800b9d8:	6921      	ldr	r1, [r4, #16]
 800b9da:	4650      	mov	r0, sl
 800b9dc:	f7ff ff64 	bl	800b8a8 <_free_r>
 800b9e0:	230c      	movs	r3, #12
 800b9e2:	f8ca 3000 	str.w	r3, [sl]
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ec:	81a3      	strh	r3, [r4, #12]
 800b9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f2:	e7e9      	b.n	800b9c8 <__ssputs_r+0x88>

0800b9f4 <_svfiprintf_r>:
 800b9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f8:	4698      	mov	r8, r3
 800b9fa:	898b      	ldrh	r3, [r1, #12]
 800b9fc:	061b      	lsls	r3, r3, #24
 800b9fe:	b09d      	sub	sp, #116	; 0x74
 800ba00:	4607      	mov	r7, r0
 800ba02:	460d      	mov	r5, r1
 800ba04:	4614      	mov	r4, r2
 800ba06:	d50e      	bpl.n	800ba26 <_svfiprintf_r+0x32>
 800ba08:	690b      	ldr	r3, [r1, #16]
 800ba0a:	b963      	cbnz	r3, 800ba26 <_svfiprintf_r+0x32>
 800ba0c:	2140      	movs	r1, #64	; 0x40
 800ba0e:	f7ff fe03 	bl	800b618 <_malloc_r>
 800ba12:	6028      	str	r0, [r5, #0]
 800ba14:	6128      	str	r0, [r5, #16]
 800ba16:	b920      	cbnz	r0, 800ba22 <_svfiprintf_r+0x2e>
 800ba18:	230c      	movs	r3, #12
 800ba1a:	603b      	str	r3, [r7, #0]
 800ba1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba20:	e0d0      	b.n	800bbc4 <_svfiprintf_r+0x1d0>
 800ba22:	2340      	movs	r3, #64	; 0x40
 800ba24:	616b      	str	r3, [r5, #20]
 800ba26:	2300      	movs	r3, #0
 800ba28:	9309      	str	r3, [sp, #36]	; 0x24
 800ba2a:	2320      	movs	r3, #32
 800ba2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba30:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba34:	2330      	movs	r3, #48	; 0x30
 800ba36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bbdc <_svfiprintf_r+0x1e8>
 800ba3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba3e:	f04f 0901 	mov.w	r9, #1
 800ba42:	4623      	mov	r3, r4
 800ba44:	469a      	mov	sl, r3
 800ba46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba4a:	b10a      	cbz	r2, 800ba50 <_svfiprintf_r+0x5c>
 800ba4c:	2a25      	cmp	r2, #37	; 0x25
 800ba4e:	d1f9      	bne.n	800ba44 <_svfiprintf_r+0x50>
 800ba50:	ebba 0b04 	subs.w	fp, sl, r4
 800ba54:	d00b      	beq.n	800ba6e <_svfiprintf_r+0x7a>
 800ba56:	465b      	mov	r3, fp
 800ba58:	4622      	mov	r2, r4
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	4638      	mov	r0, r7
 800ba5e:	f7ff ff6f 	bl	800b940 <__ssputs_r>
 800ba62:	3001      	adds	r0, #1
 800ba64:	f000 80a9 	beq.w	800bbba <_svfiprintf_r+0x1c6>
 800ba68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba6a:	445a      	add	r2, fp
 800ba6c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba6e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f000 80a1 	beq.w	800bbba <_svfiprintf_r+0x1c6>
 800ba78:	2300      	movs	r3, #0
 800ba7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba82:	f10a 0a01 	add.w	sl, sl, #1
 800ba86:	9304      	str	r3, [sp, #16]
 800ba88:	9307      	str	r3, [sp, #28]
 800ba8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba8e:	931a      	str	r3, [sp, #104]	; 0x68
 800ba90:	4654      	mov	r4, sl
 800ba92:	2205      	movs	r2, #5
 800ba94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba98:	4850      	ldr	r0, [pc, #320]	; (800bbdc <_svfiprintf_r+0x1e8>)
 800ba9a:	f7f4 fbc1 	bl	8000220 <memchr>
 800ba9e:	9a04      	ldr	r2, [sp, #16]
 800baa0:	b9d8      	cbnz	r0, 800bada <_svfiprintf_r+0xe6>
 800baa2:	06d0      	lsls	r0, r2, #27
 800baa4:	bf44      	itt	mi
 800baa6:	2320      	movmi	r3, #32
 800baa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baac:	0711      	lsls	r1, r2, #28
 800baae:	bf44      	itt	mi
 800bab0:	232b      	movmi	r3, #43	; 0x2b
 800bab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bab6:	f89a 3000 	ldrb.w	r3, [sl]
 800baba:	2b2a      	cmp	r3, #42	; 0x2a
 800babc:	d015      	beq.n	800baea <_svfiprintf_r+0xf6>
 800babe:	9a07      	ldr	r2, [sp, #28]
 800bac0:	4654      	mov	r4, sl
 800bac2:	2000      	movs	r0, #0
 800bac4:	f04f 0c0a 	mov.w	ip, #10
 800bac8:	4621      	mov	r1, r4
 800baca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bace:	3b30      	subs	r3, #48	; 0x30
 800bad0:	2b09      	cmp	r3, #9
 800bad2:	d94d      	bls.n	800bb70 <_svfiprintf_r+0x17c>
 800bad4:	b1b0      	cbz	r0, 800bb04 <_svfiprintf_r+0x110>
 800bad6:	9207      	str	r2, [sp, #28]
 800bad8:	e014      	b.n	800bb04 <_svfiprintf_r+0x110>
 800bada:	eba0 0308 	sub.w	r3, r0, r8
 800bade:	fa09 f303 	lsl.w	r3, r9, r3
 800bae2:	4313      	orrs	r3, r2
 800bae4:	9304      	str	r3, [sp, #16]
 800bae6:	46a2      	mov	sl, r4
 800bae8:	e7d2      	b.n	800ba90 <_svfiprintf_r+0x9c>
 800baea:	9b03      	ldr	r3, [sp, #12]
 800baec:	1d19      	adds	r1, r3, #4
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	9103      	str	r1, [sp, #12]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	bfbb      	ittet	lt
 800baf6:	425b      	neglt	r3, r3
 800baf8:	f042 0202 	orrlt.w	r2, r2, #2
 800bafc:	9307      	strge	r3, [sp, #28]
 800bafe:	9307      	strlt	r3, [sp, #28]
 800bb00:	bfb8      	it	lt
 800bb02:	9204      	strlt	r2, [sp, #16]
 800bb04:	7823      	ldrb	r3, [r4, #0]
 800bb06:	2b2e      	cmp	r3, #46	; 0x2e
 800bb08:	d10c      	bne.n	800bb24 <_svfiprintf_r+0x130>
 800bb0a:	7863      	ldrb	r3, [r4, #1]
 800bb0c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb0e:	d134      	bne.n	800bb7a <_svfiprintf_r+0x186>
 800bb10:	9b03      	ldr	r3, [sp, #12]
 800bb12:	1d1a      	adds	r2, r3, #4
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	9203      	str	r2, [sp, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	bfb8      	it	lt
 800bb1c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb20:	3402      	adds	r4, #2
 800bb22:	9305      	str	r3, [sp, #20]
 800bb24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bbec <_svfiprintf_r+0x1f8>
 800bb28:	7821      	ldrb	r1, [r4, #0]
 800bb2a:	2203      	movs	r2, #3
 800bb2c:	4650      	mov	r0, sl
 800bb2e:	f7f4 fb77 	bl	8000220 <memchr>
 800bb32:	b138      	cbz	r0, 800bb44 <_svfiprintf_r+0x150>
 800bb34:	9b04      	ldr	r3, [sp, #16]
 800bb36:	eba0 000a 	sub.w	r0, r0, sl
 800bb3a:	2240      	movs	r2, #64	; 0x40
 800bb3c:	4082      	lsls	r2, r0
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	3401      	adds	r4, #1
 800bb42:	9304      	str	r3, [sp, #16]
 800bb44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb48:	4825      	ldr	r0, [pc, #148]	; (800bbe0 <_svfiprintf_r+0x1ec>)
 800bb4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb4e:	2206      	movs	r2, #6
 800bb50:	f7f4 fb66 	bl	8000220 <memchr>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d038      	beq.n	800bbca <_svfiprintf_r+0x1d6>
 800bb58:	4b22      	ldr	r3, [pc, #136]	; (800bbe4 <_svfiprintf_r+0x1f0>)
 800bb5a:	bb1b      	cbnz	r3, 800bba4 <_svfiprintf_r+0x1b0>
 800bb5c:	9b03      	ldr	r3, [sp, #12]
 800bb5e:	3307      	adds	r3, #7
 800bb60:	f023 0307 	bic.w	r3, r3, #7
 800bb64:	3308      	adds	r3, #8
 800bb66:	9303      	str	r3, [sp, #12]
 800bb68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb6a:	4433      	add	r3, r6
 800bb6c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb6e:	e768      	b.n	800ba42 <_svfiprintf_r+0x4e>
 800bb70:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb74:	460c      	mov	r4, r1
 800bb76:	2001      	movs	r0, #1
 800bb78:	e7a6      	b.n	800bac8 <_svfiprintf_r+0xd4>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	3401      	adds	r4, #1
 800bb7e:	9305      	str	r3, [sp, #20]
 800bb80:	4619      	mov	r1, r3
 800bb82:	f04f 0c0a 	mov.w	ip, #10
 800bb86:	4620      	mov	r0, r4
 800bb88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb8c:	3a30      	subs	r2, #48	; 0x30
 800bb8e:	2a09      	cmp	r2, #9
 800bb90:	d903      	bls.n	800bb9a <_svfiprintf_r+0x1a6>
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d0c6      	beq.n	800bb24 <_svfiprintf_r+0x130>
 800bb96:	9105      	str	r1, [sp, #20]
 800bb98:	e7c4      	b.n	800bb24 <_svfiprintf_r+0x130>
 800bb9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb9e:	4604      	mov	r4, r0
 800bba0:	2301      	movs	r3, #1
 800bba2:	e7f0      	b.n	800bb86 <_svfiprintf_r+0x192>
 800bba4:	ab03      	add	r3, sp, #12
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	462a      	mov	r2, r5
 800bbaa:	4b0f      	ldr	r3, [pc, #60]	; (800bbe8 <_svfiprintf_r+0x1f4>)
 800bbac:	a904      	add	r1, sp, #16
 800bbae:	4638      	mov	r0, r7
 800bbb0:	f3af 8000 	nop.w
 800bbb4:	1c42      	adds	r2, r0, #1
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	d1d6      	bne.n	800bb68 <_svfiprintf_r+0x174>
 800bbba:	89ab      	ldrh	r3, [r5, #12]
 800bbbc:	065b      	lsls	r3, r3, #25
 800bbbe:	f53f af2d 	bmi.w	800ba1c <_svfiprintf_r+0x28>
 800bbc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbc4:	b01d      	add	sp, #116	; 0x74
 800bbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbca:	ab03      	add	r3, sp, #12
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	462a      	mov	r2, r5
 800bbd0:	4b05      	ldr	r3, [pc, #20]	; (800bbe8 <_svfiprintf_r+0x1f4>)
 800bbd2:	a904      	add	r1, sp, #16
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	f000 f879 	bl	800bccc <_printf_i>
 800bbda:	e7eb      	b.n	800bbb4 <_svfiprintf_r+0x1c0>
 800bbdc:	0800c0f8 	.word	0x0800c0f8
 800bbe0:	0800c102 	.word	0x0800c102
 800bbe4:	00000000 	.word	0x00000000
 800bbe8:	0800b941 	.word	0x0800b941
 800bbec:	0800c0fe 	.word	0x0800c0fe

0800bbf0 <_printf_common>:
 800bbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbf4:	4616      	mov	r6, r2
 800bbf6:	4699      	mov	r9, r3
 800bbf8:	688a      	ldr	r2, [r1, #8]
 800bbfa:	690b      	ldr	r3, [r1, #16]
 800bbfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc00:	4293      	cmp	r3, r2
 800bc02:	bfb8      	it	lt
 800bc04:	4613      	movlt	r3, r2
 800bc06:	6033      	str	r3, [r6, #0]
 800bc08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc0c:	4607      	mov	r7, r0
 800bc0e:	460c      	mov	r4, r1
 800bc10:	b10a      	cbz	r2, 800bc16 <_printf_common+0x26>
 800bc12:	3301      	adds	r3, #1
 800bc14:	6033      	str	r3, [r6, #0]
 800bc16:	6823      	ldr	r3, [r4, #0]
 800bc18:	0699      	lsls	r1, r3, #26
 800bc1a:	bf42      	ittt	mi
 800bc1c:	6833      	ldrmi	r3, [r6, #0]
 800bc1e:	3302      	addmi	r3, #2
 800bc20:	6033      	strmi	r3, [r6, #0]
 800bc22:	6825      	ldr	r5, [r4, #0]
 800bc24:	f015 0506 	ands.w	r5, r5, #6
 800bc28:	d106      	bne.n	800bc38 <_printf_common+0x48>
 800bc2a:	f104 0a19 	add.w	sl, r4, #25
 800bc2e:	68e3      	ldr	r3, [r4, #12]
 800bc30:	6832      	ldr	r2, [r6, #0]
 800bc32:	1a9b      	subs	r3, r3, r2
 800bc34:	42ab      	cmp	r3, r5
 800bc36:	dc26      	bgt.n	800bc86 <_printf_common+0x96>
 800bc38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc3c:	1e13      	subs	r3, r2, #0
 800bc3e:	6822      	ldr	r2, [r4, #0]
 800bc40:	bf18      	it	ne
 800bc42:	2301      	movne	r3, #1
 800bc44:	0692      	lsls	r2, r2, #26
 800bc46:	d42b      	bmi.n	800bca0 <_printf_common+0xb0>
 800bc48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	4638      	mov	r0, r7
 800bc50:	47c0      	blx	r8
 800bc52:	3001      	adds	r0, #1
 800bc54:	d01e      	beq.n	800bc94 <_printf_common+0xa4>
 800bc56:	6823      	ldr	r3, [r4, #0]
 800bc58:	6922      	ldr	r2, [r4, #16]
 800bc5a:	f003 0306 	and.w	r3, r3, #6
 800bc5e:	2b04      	cmp	r3, #4
 800bc60:	bf02      	ittt	eq
 800bc62:	68e5      	ldreq	r5, [r4, #12]
 800bc64:	6833      	ldreq	r3, [r6, #0]
 800bc66:	1aed      	subeq	r5, r5, r3
 800bc68:	68a3      	ldr	r3, [r4, #8]
 800bc6a:	bf0c      	ite	eq
 800bc6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc70:	2500      	movne	r5, #0
 800bc72:	4293      	cmp	r3, r2
 800bc74:	bfc4      	itt	gt
 800bc76:	1a9b      	subgt	r3, r3, r2
 800bc78:	18ed      	addgt	r5, r5, r3
 800bc7a:	2600      	movs	r6, #0
 800bc7c:	341a      	adds	r4, #26
 800bc7e:	42b5      	cmp	r5, r6
 800bc80:	d11a      	bne.n	800bcb8 <_printf_common+0xc8>
 800bc82:	2000      	movs	r0, #0
 800bc84:	e008      	b.n	800bc98 <_printf_common+0xa8>
 800bc86:	2301      	movs	r3, #1
 800bc88:	4652      	mov	r2, sl
 800bc8a:	4649      	mov	r1, r9
 800bc8c:	4638      	mov	r0, r7
 800bc8e:	47c0      	blx	r8
 800bc90:	3001      	adds	r0, #1
 800bc92:	d103      	bne.n	800bc9c <_printf_common+0xac>
 800bc94:	f04f 30ff 	mov.w	r0, #4294967295
 800bc98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc9c:	3501      	adds	r5, #1
 800bc9e:	e7c6      	b.n	800bc2e <_printf_common+0x3e>
 800bca0:	18e1      	adds	r1, r4, r3
 800bca2:	1c5a      	adds	r2, r3, #1
 800bca4:	2030      	movs	r0, #48	; 0x30
 800bca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcaa:	4422      	add	r2, r4
 800bcac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcb4:	3302      	adds	r3, #2
 800bcb6:	e7c7      	b.n	800bc48 <_printf_common+0x58>
 800bcb8:	2301      	movs	r3, #1
 800bcba:	4622      	mov	r2, r4
 800bcbc:	4649      	mov	r1, r9
 800bcbe:	4638      	mov	r0, r7
 800bcc0:	47c0      	blx	r8
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	d0e6      	beq.n	800bc94 <_printf_common+0xa4>
 800bcc6:	3601      	adds	r6, #1
 800bcc8:	e7d9      	b.n	800bc7e <_printf_common+0x8e>
	...

0800bccc <_printf_i>:
 800bccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcd0:	7e0f      	ldrb	r7, [r1, #24]
 800bcd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bcd4:	2f78      	cmp	r7, #120	; 0x78
 800bcd6:	4691      	mov	r9, r2
 800bcd8:	4680      	mov	r8, r0
 800bcda:	460c      	mov	r4, r1
 800bcdc:	469a      	mov	sl, r3
 800bcde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bce2:	d807      	bhi.n	800bcf4 <_printf_i+0x28>
 800bce4:	2f62      	cmp	r7, #98	; 0x62
 800bce6:	d80a      	bhi.n	800bcfe <_printf_i+0x32>
 800bce8:	2f00      	cmp	r7, #0
 800bcea:	f000 80d4 	beq.w	800be96 <_printf_i+0x1ca>
 800bcee:	2f58      	cmp	r7, #88	; 0x58
 800bcf0:	f000 80c0 	beq.w	800be74 <_printf_i+0x1a8>
 800bcf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bcfc:	e03a      	b.n	800bd74 <_printf_i+0xa8>
 800bcfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd02:	2b15      	cmp	r3, #21
 800bd04:	d8f6      	bhi.n	800bcf4 <_printf_i+0x28>
 800bd06:	a101      	add	r1, pc, #4	; (adr r1, 800bd0c <_printf_i+0x40>)
 800bd08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd0c:	0800bd65 	.word	0x0800bd65
 800bd10:	0800bd79 	.word	0x0800bd79
 800bd14:	0800bcf5 	.word	0x0800bcf5
 800bd18:	0800bcf5 	.word	0x0800bcf5
 800bd1c:	0800bcf5 	.word	0x0800bcf5
 800bd20:	0800bcf5 	.word	0x0800bcf5
 800bd24:	0800bd79 	.word	0x0800bd79
 800bd28:	0800bcf5 	.word	0x0800bcf5
 800bd2c:	0800bcf5 	.word	0x0800bcf5
 800bd30:	0800bcf5 	.word	0x0800bcf5
 800bd34:	0800bcf5 	.word	0x0800bcf5
 800bd38:	0800be7d 	.word	0x0800be7d
 800bd3c:	0800bda5 	.word	0x0800bda5
 800bd40:	0800be37 	.word	0x0800be37
 800bd44:	0800bcf5 	.word	0x0800bcf5
 800bd48:	0800bcf5 	.word	0x0800bcf5
 800bd4c:	0800be9f 	.word	0x0800be9f
 800bd50:	0800bcf5 	.word	0x0800bcf5
 800bd54:	0800bda5 	.word	0x0800bda5
 800bd58:	0800bcf5 	.word	0x0800bcf5
 800bd5c:	0800bcf5 	.word	0x0800bcf5
 800bd60:	0800be3f 	.word	0x0800be3f
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	1d1a      	adds	r2, r3, #4
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	602a      	str	r2, [r5, #0]
 800bd6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd74:	2301      	movs	r3, #1
 800bd76:	e09f      	b.n	800beb8 <_printf_i+0x1ec>
 800bd78:	6820      	ldr	r0, [r4, #0]
 800bd7a:	682b      	ldr	r3, [r5, #0]
 800bd7c:	0607      	lsls	r7, r0, #24
 800bd7e:	f103 0104 	add.w	r1, r3, #4
 800bd82:	6029      	str	r1, [r5, #0]
 800bd84:	d501      	bpl.n	800bd8a <_printf_i+0xbe>
 800bd86:	681e      	ldr	r6, [r3, #0]
 800bd88:	e003      	b.n	800bd92 <_printf_i+0xc6>
 800bd8a:	0646      	lsls	r6, r0, #25
 800bd8c:	d5fb      	bpl.n	800bd86 <_printf_i+0xba>
 800bd8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bd92:	2e00      	cmp	r6, #0
 800bd94:	da03      	bge.n	800bd9e <_printf_i+0xd2>
 800bd96:	232d      	movs	r3, #45	; 0x2d
 800bd98:	4276      	negs	r6, r6
 800bd9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd9e:	485a      	ldr	r0, [pc, #360]	; (800bf08 <_printf_i+0x23c>)
 800bda0:	230a      	movs	r3, #10
 800bda2:	e012      	b.n	800bdca <_printf_i+0xfe>
 800bda4:	682b      	ldr	r3, [r5, #0]
 800bda6:	6820      	ldr	r0, [r4, #0]
 800bda8:	1d19      	adds	r1, r3, #4
 800bdaa:	6029      	str	r1, [r5, #0]
 800bdac:	0605      	lsls	r5, r0, #24
 800bdae:	d501      	bpl.n	800bdb4 <_printf_i+0xe8>
 800bdb0:	681e      	ldr	r6, [r3, #0]
 800bdb2:	e002      	b.n	800bdba <_printf_i+0xee>
 800bdb4:	0641      	lsls	r1, r0, #25
 800bdb6:	d5fb      	bpl.n	800bdb0 <_printf_i+0xe4>
 800bdb8:	881e      	ldrh	r6, [r3, #0]
 800bdba:	4853      	ldr	r0, [pc, #332]	; (800bf08 <_printf_i+0x23c>)
 800bdbc:	2f6f      	cmp	r7, #111	; 0x6f
 800bdbe:	bf0c      	ite	eq
 800bdc0:	2308      	moveq	r3, #8
 800bdc2:	230a      	movne	r3, #10
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdca:	6865      	ldr	r5, [r4, #4]
 800bdcc:	60a5      	str	r5, [r4, #8]
 800bdce:	2d00      	cmp	r5, #0
 800bdd0:	bfa2      	ittt	ge
 800bdd2:	6821      	ldrge	r1, [r4, #0]
 800bdd4:	f021 0104 	bicge.w	r1, r1, #4
 800bdd8:	6021      	strge	r1, [r4, #0]
 800bdda:	b90e      	cbnz	r6, 800bde0 <_printf_i+0x114>
 800bddc:	2d00      	cmp	r5, #0
 800bdde:	d04b      	beq.n	800be78 <_printf_i+0x1ac>
 800bde0:	4615      	mov	r5, r2
 800bde2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bde6:	fb03 6711 	mls	r7, r3, r1, r6
 800bdea:	5dc7      	ldrb	r7, [r0, r7]
 800bdec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bdf0:	4637      	mov	r7, r6
 800bdf2:	42bb      	cmp	r3, r7
 800bdf4:	460e      	mov	r6, r1
 800bdf6:	d9f4      	bls.n	800bde2 <_printf_i+0x116>
 800bdf8:	2b08      	cmp	r3, #8
 800bdfa:	d10b      	bne.n	800be14 <_printf_i+0x148>
 800bdfc:	6823      	ldr	r3, [r4, #0]
 800bdfe:	07de      	lsls	r6, r3, #31
 800be00:	d508      	bpl.n	800be14 <_printf_i+0x148>
 800be02:	6923      	ldr	r3, [r4, #16]
 800be04:	6861      	ldr	r1, [r4, #4]
 800be06:	4299      	cmp	r1, r3
 800be08:	bfde      	ittt	le
 800be0a:	2330      	movle	r3, #48	; 0x30
 800be0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be14:	1b52      	subs	r2, r2, r5
 800be16:	6122      	str	r2, [r4, #16]
 800be18:	f8cd a000 	str.w	sl, [sp]
 800be1c:	464b      	mov	r3, r9
 800be1e:	aa03      	add	r2, sp, #12
 800be20:	4621      	mov	r1, r4
 800be22:	4640      	mov	r0, r8
 800be24:	f7ff fee4 	bl	800bbf0 <_printf_common>
 800be28:	3001      	adds	r0, #1
 800be2a:	d14a      	bne.n	800bec2 <_printf_i+0x1f6>
 800be2c:	f04f 30ff 	mov.w	r0, #4294967295
 800be30:	b004      	add	sp, #16
 800be32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be36:	6823      	ldr	r3, [r4, #0]
 800be38:	f043 0320 	orr.w	r3, r3, #32
 800be3c:	6023      	str	r3, [r4, #0]
 800be3e:	4833      	ldr	r0, [pc, #204]	; (800bf0c <_printf_i+0x240>)
 800be40:	2778      	movs	r7, #120	; 0x78
 800be42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	6829      	ldr	r1, [r5, #0]
 800be4a:	061f      	lsls	r7, r3, #24
 800be4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800be50:	d402      	bmi.n	800be58 <_printf_i+0x18c>
 800be52:	065f      	lsls	r7, r3, #25
 800be54:	bf48      	it	mi
 800be56:	b2b6      	uxthmi	r6, r6
 800be58:	07df      	lsls	r7, r3, #31
 800be5a:	bf48      	it	mi
 800be5c:	f043 0320 	orrmi.w	r3, r3, #32
 800be60:	6029      	str	r1, [r5, #0]
 800be62:	bf48      	it	mi
 800be64:	6023      	strmi	r3, [r4, #0]
 800be66:	b91e      	cbnz	r6, 800be70 <_printf_i+0x1a4>
 800be68:	6823      	ldr	r3, [r4, #0]
 800be6a:	f023 0320 	bic.w	r3, r3, #32
 800be6e:	6023      	str	r3, [r4, #0]
 800be70:	2310      	movs	r3, #16
 800be72:	e7a7      	b.n	800bdc4 <_printf_i+0xf8>
 800be74:	4824      	ldr	r0, [pc, #144]	; (800bf08 <_printf_i+0x23c>)
 800be76:	e7e4      	b.n	800be42 <_printf_i+0x176>
 800be78:	4615      	mov	r5, r2
 800be7a:	e7bd      	b.n	800bdf8 <_printf_i+0x12c>
 800be7c:	682b      	ldr	r3, [r5, #0]
 800be7e:	6826      	ldr	r6, [r4, #0]
 800be80:	6961      	ldr	r1, [r4, #20]
 800be82:	1d18      	adds	r0, r3, #4
 800be84:	6028      	str	r0, [r5, #0]
 800be86:	0635      	lsls	r5, r6, #24
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	d501      	bpl.n	800be90 <_printf_i+0x1c4>
 800be8c:	6019      	str	r1, [r3, #0]
 800be8e:	e002      	b.n	800be96 <_printf_i+0x1ca>
 800be90:	0670      	lsls	r0, r6, #25
 800be92:	d5fb      	bpl.n	800be8c <_printf_i+0x1c0>
 800be94:	8019      	strh	r1, [r3, #0]
 800be96:	2300      	movs	r3, #0
 800be98:	6123      	str	r3, [r4, #16]
 800be9a:	4615      	mov	r5, r2
 800be9c:	e7bc      	b.n	800be18 <_printf_i+0x14c>
 800be9e:	682b      	ldr	r3, [r5, #0]
 800bea0:	1d1a      	adds	r2, r3, #4
 800bea2:	602a      	str	r2, [r5, #0]
 800bea4:	681d      	ldr	r5, [r3, #0]
 800bea6:	6862      	ldr	r2, [r4, #4]
 800bea8:	2100      	movs	r1, #0
 800beaa:	4628      	mov	r0, r5
 800beac:	f7f4 f9b8 	bl	8000220 <memchr>
 800beb0:	b108      	cbz	r0, 800beb6 <_printf_i+0x1ea>
 800beb2:	1b40      	subs	r0, r0, r5
 800beb4:	6060      	str	r0, [r4, #4]
 800beb6:	6863      	ldr	r3, [r4, #4]
 800beb8:	6123      	str	r3, [r4, #16]
 800beba:	2300      	movs	r3, #0
 800bebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bec0:	e7aa      	b.n	800be18 <_printf_i+0x14c>
 800bec2:	6923      	ldr	r3, [r4, #16]
 800bec4:	462a      	mov	r2, r5
 800bec6:	4649      	mov	r1, r9
 800bec8:	4640      	mov	r0, r8
 800beca:	47d0      	blx	sl
 800becc:	3001      	adds	r0, #1
 800bece:	d0ad      	beq.n	800be2c <_printf_i+0x160>
 800bed0:	6823      	ldr	r3, [r4, #0]
 800bed2:	079b      	lsls	r3, r3, #30
 800bed4:	d413      	bmi.n	800befe <_printf_i+0x232>
 800bed6:	68e0      	ldr	r0, [r4, #12]
 800bed8:	9b03      	ldr	r3, [sp, #12]
 800beda:	4298      	cmp	r0, r3
 800bedc:	bfb8      	it	lt
 800bede:	4618      	movlt	r0, r3
 800bee0:	e7a6      	b.n	800be30 <_printf_i+0x164>
 800bee2:	2301      	movs	r3, #1
 800bee4:	4632      	mov	r2, r6
 800bee6:	4649      	mov	r1, r9
 800bee8:	4640      	mov	r0, r8
 800beea:	47d0      	blx	sl
 800beec:	3001      	adds	r0, #1
 800beee:	d09d      	beq.n	800be2c <_printf_i+0x160>
 800bef0:	3501      	adds	r5, #1
 800bef2:	68e3      	ldr	r3, [r4, #12]
 800bef4:	9903      	ldr	r1, [sp, #12]
 800bef6:	1a5b      	subs	r3, r3, r1
 800bef8:	42ab      	cmp	r3, r5
 800befa:	dcf2      	bgt.n	800bee2 <_printf_i+0x216>
 800befc:	e7eb      	b.n	800bed6 <_printf_i+0x20a>
 800befe:	2500      	movs	r5, #0
 800bf00:	f104 0619 	add.w	r6, r4, #25
 800bf04:	e7f5      	b.n	800bef2 <_printf_i+0x226>
 800bf06:	bf00      	nop
 800bf08:	0800c109 	.word	0x0800c109
 800bf0c:	0800c11a 	.word	0x0800c11a

0800bf10 <memmove>:
 800bf10:	4288      	cmp	r0, r1
 800bf12:	b510      	push	{r4, lr}
 800bf14:	eb01 0402 	add.w	r4, r1, r2
 800bf18:	d902      	bls.n	800bf20 <memmove+0x10>
 800bf1a:	4284      	cmp	r4, r0
 800bf1c:	4623      	mov	r3, r4
 800bf1e:	d807      	bhi.n	800bf30 <memmove+0x20>
 800bf20:	1e43      	subs	r3, r0, #1
 800bf22:	42a1      	cmp	r1, r4
 800bf24:	d008      	beq.n	800bf38 <memmove+0x28>
 800bf26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf2e:	e7f8      	b.n	800bf22 <memmove+0x12>
 800bf30:	4402      	add	r2, r0
 800bf32:	4601      	mov	r1, r0
 800bf34:	428a      	cmp	r2, r1
 800bf36:	d100      	bne.n	800bf3a <memmove+0x2a>
 800bf38:	bd10      	pop	{r4, pc}
 800bf3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf42:	e7f7      	b.n	800bf34 <memmove+0x24>

0800bf44 <memcpy>:
 800bf44:	440a      	add	r2, r1
 800bf46:	4291      	cmp	r1, r2
 800bf48:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf4c:	d100      	bne.n	800bf50 <memcpy+0xc>
 800bf4e:	4770      	bx	lr
 800bf50:	b510      	push	{r4, lr}
 800bf52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf5a:	4291      	cmp	r1, r2
 800bf5c:	d1f9      	bne.n	800bf52 <memcpy+0xe>
 800bf5e:	bd10      	pop	{r4, pc}

0800bf60 <_realloc_r>:
 800bf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf64:	4680      	mov	r8, r0
 800bf66:	4614      	mov	r4, r2
 800bf68:	460e      	mov	r6, r1
 800bf6a:	b921      	cbnz	r1, 800bf76 <_realloc_r+0x16>
 800bf6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf70:	4611      	mov	r1, r2
 800bf72:	f7ff bb51 	b.w	800b618 <_malloc_r>
 800bf76:	b92a      	cbnz	r2, 800bf84 <_realloc_r+0x24>
 800bf78:	f7ff fc96 	bl	800b8a8 <_free_r>
 800bf7c:	4625      	mov	r5, r4
 800bf7e:	4628      	mov	r0, r5
 800bf80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf84:	f000 f81b 	bl	800bfbe <_malloc_usable_size_r>
 800bf88:	4284      	cmp	r4, r0
 800bf8a:	4607      	mov	r7, r0
 800bf8c:	d802      	bhi.n	800bf94 <_realloc_r+0x34>
 800bf8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf92:	d812      	bhi.n	800bfba <_realloc_r+0x5a>
 800bf94:	4621      	mov	r1, r4
 800bf96:	4640      	mov	r0, r8
 800bf98:	f7ff fb3e 	bl	800b618 <_malloc_r>
 800bf9c:	4605      	mov	r5, r0
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d0ed      	beq.n	800bf7e <_realloc_r+0x1e>
 800bfa2:	42bc      	cmp	r4, r7
 800bfa4:	4622      	mov	r2, r4
 800bfa6:	4631      	mov	r1, r6
 800bfa8:	bf28      	it	cs
 800bfaa:	463a      	movcs	r2, r7
 800bfac:	f7ff ffca 	bl	800bf44 <memcpy>
 800bfb0:	4631      	mov	r1, r6
 800bfb2:	4640      	mov	r0, r8
 800bfb4:	f7ff fc78 	bl	800b8a8 <_free_r>
 800bfb8:	e7e1      	b.n	800bf7e <_realloc_r+0x1e>
 800bfba:	4635      	mov	r5, r6
 800bfbc:	e7df      	b.n	800bf7e <_realloc_r+0x1e>

0800bfbe <_malloc_usable_size_r>:
 800bfbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfc2:	1f18      	subs	r0, r3, #4
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	bfbc      	itt	lt
 800bfc8:	580b      	ldrlt	r3, [r1, r0]
 800bfca:	18c0      	addlt	r0, r0, r3
 800bfcc:	4770      	bx	lr
	...

0800bfd0 <_init>:
 800bfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd2:	bf00      	nop
 800bfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfd6:	bc08      	pop	{r3}
 800bfd8:	469e      	mov	lr, r3
 800bfda:	4770      	bx	lr

0800bfdc <_fini>:
 800bfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfde:	bf00      	nop
 800bfe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfe2:	bc08      	pop	{r3}
 800bfe4:	469e      	mov	lr, r3
 800bfe6:	4770      	bx	lr
